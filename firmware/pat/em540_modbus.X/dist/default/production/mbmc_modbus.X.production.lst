

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Thu Jan 27 13:42:37 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og9 
     1                           	processor	18F1320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.40
    37                           ; Generated 17/11/2021 GMT
    38                           ; 
    39                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F1320 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  0008C0                     __pidataCOMRAM:
    74                           	callstack 0
    75                           
    76                           ;initializer for _V
    77  0008C0  0000               	dw	0
    78  0008C2  0000               	dw	0
    79  0008C4  0000               	dw	0
    80  0008C6  0000               	dw	0
    81  0008C8  0000               	dw	0
    82  0008CA  0000               	dw	0
    83  0008CC  00                 	db	0
    84  0008CD  00                 	db	0
    85  0008CE  10                 	db	16
    86  0008CF  00                 	db	0
    87  0008D0  00                 	db	0
    88  0008D1  00                 	db	0
    89  0008D2  00                 	db	0
    90  0008D3  00                 	db	0
    91                           
    92                           ;initializer for _build_time
    93  0008D4  F6                 	db	low STR_2
    94  0008D5  1F                 	db	high STR_2
    95                           
    96                           ;initializer for _build_date
    97  0008D6  EA                 	db	low STR_1
    98  0008D7  1F                 	db	high STR_1
    99                           
   100                           ;initializer for _i400_power
   101  0008D8  0130               	dw	304
   102                           
   103                           ;initializer for _i400_pwm
   104  0008DA  0171               	dw	369
   105                           
   106                           ;initializer for controller_work@volts
   107  0008DC  FF                 	db	255
   108                           
   109                           ;initializer for _modbus_cc_freset
   110  0008DD  04                 	db	4
   111  0008DE  06                 	db	6
   112  0008DF  00                 	db	0
   113  0008E0  0B                 	db	11
   114  0008E1  00                 	db	0
   115  0008E2  02                 	db	2
   116                           
   117                           ;initializer for _modbus_cc_clear
   118  0008E3  04                 	db	4
   119  0008E4  06                 	db	6
   120  0008E5  00                 	db	0
   121  0008E6  0A                 	db	10
   122  0008E7  00                 	db	0
   123  0008E8  01                 	db	1
   124                           
   125                           	psect	mediumconst
   126  001DAE                     __pmediumconst:
   127                           	callstack 0
   128  001DAE  00                 	db	0
   129  001DAF                     _table_crc_lo:
   130                           	callstack 0
   131  001DAF  00                 	db	0
   132  001DB0  C0                 	db	192
   133  001DB1  C1                 	db	193
   134  001DB2  01                 	db	1
   135  001DB3  C3                 	db	195
   136  001DB4  03                 	db	3
   137  001DB5  02                 	db	2
   138  001DB6  C2                 	db	194
   139  001DB7  C6                 	db	198
   140  001DB8  06                 	db	6
   141  001DB9  07                 	db	7
   142  001DBA  C7                 	db	199
   143  001DBB  05                 	db	5
   144  001DBC  C5                 	db	197
   145  001DBD  C4                 	db	196
   146  001DBE  04                 	db	4
   147  001DBF  CC                 	db	204
   148  001DC0  0C                 	db	12
   149  001DC1  0D                 	db	13
   150  001DC2  CD                 	db	205
   151  001DC3  0F                 	db	15
   152  001DC4  CF                 	db	207
   153  001DC5  CE                 	db	206
   154  001DC6  0E                 	db	14
   155  001DC7  0A                 	db	10
   156  001DC8  CA                 	db	202
   157  001DC9  CB                 	db	203
   158  001DCA  0B                 	db	11
   159  001DCB  C9                 	db	201
   160  001DCC  09                 	db	9
   161  001DCD  08                 	db	8
   162  001DCE  C8                 	db	200
   163  001DCF  D8                 	db	216
   164  001DD0  18                 	db	24
   165  001DD1  19                 	db	25
   166  001DD2  D9                 	db	217
   167  001DD3  1B                 	db	27
   168  001DD4  DB                 	db	219
   169  001DD5  DA                 	db	218
   170  001DD6  1A                 	db	26
   171  001DD7  1E                 	db	30
   172  001DD8  DE                 	db	222
   173  001DD9  DF                 	db	223
   174  001DDA  1F                 	db	31
   175  001DDB  DD                 	db	221
   176  001DDC  1D                 	db	29
   177  001DDD  1C                 	db	28
   178  001DDE  DC                 	db	220
   179  001DDF  14                 	db	20
   180  001DE0  D4                 	db	212
   181  001DE1  D5                 	db	213
   182  001DE2  15                 	db	21
   183  001DE3  D7                 	db	215
   184  001DE4  17                 	db	23
   185  001DE5  16                 	db	22
   186  001DE6  D6                 	db	214
   187  001DE7  D2                 	db	210
   188  001DE8  12                 	db	18
   189  001DE9  13                 	db	19
   190  001DEA  D3                 	db	211
   191  001DEB  11                 	db	17
   192  001DEC  D1                 	db	209
   193  001DED  D0                 	db	208
   194  001DEE  10                 	db	16
   195  001DEF  F0                 	db	240
   196  001DF0  30                 	db	48
   197  001DF1  31                 	db	49
   198  001DF2  F1                 	db	241
   199  001DF3  33                 	db	51
   200  001DF4  F3                 	db	243
   201  001DF5  F2                 	db	242
   202  001DF6  32                 	db	50
   203  001DF7  36                 	db	54
   204  001DF8  F6                 	db	246
   205  001DF9  F7                 	db	247
   206  001DFA  37                 	db	55
   207  001DFB  F5                 	db	245
   208  001DFC  35                 	db	53
   209  001DFD  34                 	db	52
   210  001DFE  F4                 	db	244
   211  001DFF  3C                 	db	60
   212  001E00  FC                 	db	252
   213  001E01  FD                 	db	253
   214  001E02  3D                 	db	61
   215  001E03  FF                 	db	255
   216  001E04  3F                 	db	63
   217  001E05  3E                 	db	62
   218  001E06  FE                 	db	254
   219  001E07  FA                 	db	250
   220  001E08  3A                 	db	58
   221  001E09  3B                 	db	59
   222  001E0A  FB                 	db	251
   223  001E0B  39                 	db	57
   224  001E0C  F9                 	db	249
   225  001E0D  F8                 	db	248
   226  001E0E  38                 	db	56
   227  001E0F  28                 	db	40
   228  001E10  E8                 	db	232
   229  001E11  E9                 	db	233
   230  001E12  29                 	db	41
   231  001E13  EB                 	db	235
   232  001E14  2B                 	db	43
   233  001E15  2A                 	db	42
   234  001E16  EA                 	db	234
   235  001E17  EE                 	db	238
   236  001E18  2E                 	db	46
   237  001E19  2F                 	db	47
   238  001E1A  EF                 	db	239
   239  001E1B  2D                 	db	45
   240  001E1C  ED                 	db	237
   241  001E1D  EC                 	db	236
   242  001E1E  2C                 	db	44
   243  001E1F  E4                 	db	228
   244  001E20  24                 	db	36
   245  001E21  25                 	db	37
   246  001E22  E5                 	db	229
   247  001E23  27                 	db	39
   248  001E24  E7                 	db	231
   249  001E25  E6                 	db	230
   250  001E26  26                 	db	38
   251  001E27  22                 	db	34
   252  001E28  E2                 	db	226
   253  001E29  E3                 	db	227
   254  001E2A  23                 	db	35
   255  001E2B  E1                 	db	225
   256  001E2C  21                 	db	33
   257  001E2D  20                 	db	32
   258  001E2E  E0                 	db	224
   259  001E2F  A0                 	db	160
   260  001E30  60                 	db	96
   261  001E31  61                 	db	97
   262  001E32  A1                 	db	161
   263  001E33  63                 	db	99
   264  001E34  A3                 	db	163
   265  001E35  A2                 	db	162
   266  001E36  62                 	db	98
   267  001E37  66                 	db	102
   268  001E38  A6                 	db	166
   269  001E39  A7                 	db	167
   270  001E3A  67                 	db	103
   271  001E3B  A5                 	db	165
   272  001E3C  65                 	db	101
   273  001E3D  64                 	db	100
   274  001E3E  A4                 	db	164
   275  001E3F  6C                 	db	108
   276  001E40  AC                 	db	172
   277  001E41  AD                 	db	173
   278  001E42  6D                 	db	109
   279  001E43  AF                 	db	175
   280  001E44  6F                 	db	111
   281  001E45  6E                 	db	110
   282  001E46  AE                 	db	174
   283  001E47  AA                 	db	170
   284  001E48  6A                 	db	106
   285  001E49  6B                 	db	107
   286  001E4A  AB                 	db	171
   287  001E4B  69                 	db	105
   288  001E4C  A9                 	db	169
   289  001E4D  A8                 	db	168
   290  001E4E  68                 	db	104
   291  001E4F  78                 	db	120
   292  001E50  B8                 	db	184
   293  001E51  B9                 	db	185
   294  001E52  79                 	db	121
   295  001E53  BB                 	db	187
   296  001E54  7B                 	db	123
   297  001E55  7A                 	db	122
   298  001E56  BA                 	db	186
   299  001E57  BE                 	db	190
   300  001E58  7E                 	db	126
   301  001E59  7F                 	db	127
   302  001E5A  BF                 	db	191
   303  001E5B  7D                 	db	125
   304  001E5C  BD                 	db	189
   305  001E5D  BC                 	db	188
   306  001E5E  7C                 	db	124
   307  001E5F  B4                 	db	180
   308  001E60  74                 	db	116
   309  001E61  75                 	db	117
   310  001E62  B5                 	db	181
   311  001E63  77                 	db	119
   312  001E64  B7                 	db	183
   313  001E65  B6                 	db	182
   314  001E66  76                 	db	118
   315  001E67  72                 	db	114
   316  001E68  B2                 	db	178
   317  001E69  B3                 	db	179
   318  001E6A  73                 	db	115
   319  001E6B  B1                 	db	177
   320  001E6C  71                 	db	113
   321  001E6D  70                 	db	112
   322  001E6E  B0                 	db	176
   323  001E6F  50                 	db	80
   324  001E70  90                 	db	144
   325  001E71  91                 	db	145
   326  001E72  51                 	db	81
   327  001E73  93                 	db	147
   328  001E74  53                 	db	83
   329  001E75  52                 	db	82
   330  001E76  92                 	db	146
   331  001E77  96                 	db	150
   332  001E78  56                 	db	86
   333  001E79  57                 	db	87
   334  001E7A  97                 	db	151
   335  001E7B  55                 	db	85
   336  001E7C  95                 	db	149
   337  001E7D  94                 	db	148
   338  001E7E  54                 	db	84
   339  001E7F  9C                 	db	156
   340  001E80  5C                 	db	92
   341  001E81  5D                 	db	93
   342  001E82  9D                 	db	157
   343  001E83  5F                 	db	95
   344  001E84  9F                 	db	159
   345  001E85  9E                 	db	158
   346  001E86  5E                 	db	94
   347  001E87  5A                 	db	90
   348  001E88  9A                 	db	154
   349  001E89  9B                 	db	155
   350  001E8A  5B                 	db	91
   351  001E8B  99                 	db	153
   352  001E8C  59                 	db	89
   353  001E8D  58                 	db	88
   354  001E8E  98                 	db	152
   355  001E8F  88                 	db	136
   356  001E90  48                 	db	72
   357  001E91  49                 	db	73
   358  001E92  89                 	db	137
   359  001E93  4B                 	db	75
   360  001E94  8B                 	db	139
   361  001E95  8A                 	db	138
   362  001E96  4A                 	db	74
   363  001E97  4E                 	db	78
   364  001E98  8E                 	db	142
   365  001E99  8F                 	db	143
   366  001E9A  4F                 	db	79
   367  001E9B  8D                 	db	141
   368  001E9C  4D                 	db	77
   369  001E9D  4C                 	db	76
   370  001E9E  8C                 	db	140
   371  001E9F  44                 	db	68
   372  001EA0  84                 	db	132
   373  001EA1  85                 	db	133
   374  001EA2  45                 	db	69
   375  001EA3  87                 	db	135
   376  001EA4  47                 	db	71
   377  001EA5  46                 	db	70
   378  001EA6  86                 	db	134
   379  001EA7  82                 	db	130
   380  001EA8  42                 	db	66
   381  001EA9  43                 	db	67
   382  001EAA  83                 	db	131
   383  001EAB  41                 	db	65
   384  001EAC  81                 	db	129
   385  001EAD  80                 	db	128
   386  001EAE  40                 	db	64
   387  001EAF                     __end_of_table_crc_lo:
   388                           	callstack 0
   389  001EAF                     _table_crc_hi:
   390                           	callstack 0
   391  001EAF  00                 	db	0
   392  001EB0  C1                 	db	193
   393  001EB1  81                 	db	129
   394  001EB2  40                 	db	64
   395  001EB3  01                 	db	1
   396  001EB4  C0                 	db	192
   397  001EB5  80                 	db	128
   398  001EB6  41                 	db	65
   399  001EB7  01                 	db	1
   400  001EB8  C0                 	db	192
   401  001EB9  80                 	db	128
   402  001EBA  41                 	db	65
   403  001EBB  00                 	db	0
   404  001EBC  C1                 	db	193
   405  001EBD  81                 	db	129
   406  001EBE  40                 	db	64
   407  001EBF  01                 	db	1
   408  001EC0  C0                 	db	192
   409  001EC1  80                 	db	128
   410  001EC2  41                 	db	65
   411  001EC3  00                 	db	0
   412  001EC4  C1                 	db	193
   413  001EC5  81                 	db	129
   414  001EC6  40                 	db	64
   415  001EC7  00                 	db	0
   416  001EC8  C1                 	db	193
   417  001EC9  81                 	db	129
   418  001ECA  40                 	db	64
   419  001ECB  01                 	db	1
   420  001ECC  C0                 	db	192
   421  001ECD  80                 	db	128
   422  001ECE  41                 	db	65
   423  001ECF  01                 	db	1
   424  001ED0  C0                 	db	192
   425  001ED1  80                 	db	128
   426  001ED2  41                 	db	65
   427  001ED3  00                 	db	0
   428  001ED4  C1                 	db	193
   429  001ED5  81                 	db	129
   430  001ED6  40                 	db	64
   431  001ED7  00                 	db	0
   432  001ED8  C1                 	db	193
   433  001ED9  81                 	db	129
   434  001EDA  40                 	db	64
   435  001EDB  01                 	db	1
   436  001EDC  C0                 	db	192
   437  001EDD  80                 	db	128
   438  001EDE  41                 	db	65
   439  001EDF  00                 	db	0
   440  001EE0  C1                 	db	193
   441  001EE1  81                 	db	129
   442  001EE2  40                 	db	64
   443  001EE3  01                 	db	1
   444  001EE4  C0                 	db	192
   445  001EE5  80                 	db	128
   446  001EE6  41                 	db	65
   447  001EE7  01                 	db	1
   448  001EE8  C0                 	db	192
   449  001EE9  80                 	db	128
   450  001EEA  41                 	db	65
   451  001EEB  00                 	db	0
   452  001EEC  C1                 	db	193
   453  001EED  81                 	db	129
   454  001EEE  40                 	db	64
   455  001EEF  01                 	db	1
   456  001EF0  C0                 	db	192
   457  001EF1  80                 	db	128
   458  001EF2  41                 	db	65
   459  001EF3  00                 	db	0
   460  001EF4  C1                 	db	193
   461  001EF5  81                 	db	129
   462  001EF6  40                 	db	64
   463  001EF7  00                 	db	0
   464  001EF8  C1                 	db	193
   465  001EF9  81                 	db	129
   466  001EFA  40                 	db	64
   467  001EFB  01                 	db	1
   468  001EFC  C0                 	db	192
   469  001EFD  80                 	db	128
   470  001EFE  41                 	db	65
   471  001EFF  00                 	db	0
   472  001F00  C1                 	db	193
   473  001F01  81                 	db	129
   474  001F02  40                 	db	64
   475  001F03  01                 	db	1
   476  001F04  C0                 	db	192
   477  001F05  80                 	db	128
   478  001F06  41                 	db	65
   479  001F07  01                 	db	1
   480  001F08  C0                 	db	192
   481  001F09  80                 	db	128
   482  001F0A  41                 	db	65
   483  001F0B  00                 	db	0
   484  001F0C  C1                 	db	193
   485  001F0D  81                 	db	129
   486  001F0E  40                 	db	64
   487  001F0F  00                 	db	0
   488  001F10  C1                 	db	193
   489  001F11  81                 	db	129
   490  001F12  40                 	db	64
   491  001F13  01                 	db	1
   492  001F14  C0                 	db	192
   493  001F15  80                 	db	128
   494  001F16  41                 	db	65
   495  001F17  01                 	db	1
   496  001F18  C0                 	db	192
   497  001F19  80                 	db	128
   498  001F1A  41                 	db	65
   499  001F1B  00                 	db	0
   500  001F1C  C1                 	db	193
   501  001F1D  81                 	db	129
   502  001F1E  40                 	db	64
   503  001F1F  01                 	db	1
   504  001F20  C0                 	db	192
   505  001F21  80                 	db	128
   506  001F22  41                 	db	65
   507  001F23  00                 	db	0
   508  001F24  C1                 	db	193
   509  001F25  81                 	db	129
   510  001F26  40                 	db	64
   511  001F27  00                 	db	0
   512  001F28  C1                 	db	193
   513  001F29  81                 	db	129
   514  001F2A  40                 	db	64
   515  001F2B  01                 	db	1
   516  001F2C  C0                 	db	192
   517  001F2D  80                 	db	128
   518  001F2E  41                 	db	65
   519  001F2F  01                 	db	1
   520  001F30  C0                 	db	192
   521  001F31  80                 	db	128
   522  001F32  41                 	db	65
   523  001F33  00                 	db	0
   524  001F34  C1                 	db	193
   525  001F35  81                 	db	129
   526  001F36  40                 	db	64
   527  001F37  00                 	db	0
   528  001F38  C1                 	db	193
   529  001F39  81                 	db	129
   530  001F3A  40                 	db	64
   531  001F3B  01                 	db	1
   532  001F3C  C0                 	db	192
   533  001F3D  80                 	db	128
   534  001F3E  41                 	db	65
   535  001F3F  00                 	db	0
   536  001F40  C1                 	db	193
   537  001F41  81                 	db	129
   538  001F42  40                 	db	64
   539  001F43  01                 	db	1
   540  001F44  C0                 	db	192
   541  001F45  80                 	db	128
   542  001F46  41                 	db	65
   543  001F47  01                 	db	1
   544  001F48  C0                 	db	192
   545  001F49  80                 	db	128
   546  001F4A  41                 	db	65
   547  001F4B  00                 	db	0
   548  001F4C  C1                 	db	193
   549  001F4D  81                 	db	129
   550  001F4E  40                 	db	64
   551  001F4F  00                 	db	0
   552  001F50  C1                 	db	193
   553  001F51  81                 	db	129
   554  001F52  40                 	db	64
   555  001F53  01                 	db	1
   556  001F54  C0                 	db	192
   557  001F55  80                 	db	128
   558  001F56  41                 	db	65
   559  001F57  01                 	db	1
   560  001F58  C0                 	db	192
   561  001F59  80                 	db	128
   562  001F5A  41                 	db	65
   563  001F5B  00                 	db	0
   564  001F5C  C1                 	db	193
   565  001F5D  81                 	db	129
   566  001F5E  40                 	db	64
   567  001F5F  01                 	db	1
   568  001F60  C0                 	db	192
   569  001F61  80                 	db	128
   570  001F62  41                 	db	65
   571  001F63  00                 	db	0
   572  001F64  C1                 	db	193
   573  001F65  81                 	db	129
   574  001F66  40                 	db	64
   575  001F67  00                 	db	0
   576  001F68  C1                 	db	193
   577  001F69  81                 	db	129
   578  001F6A  40                 	db	64
   579  001F6B  01                 	db	1
   580  001F6C  C0                 	db	192
   581  001F6D  80                 	db	128
   582  001F6E  41                 	db	65
   583  001F6F  00                 	db	0
   584  001F70  C1                 	db	193
   585  001F71  81                 	db	129
   586  001F72  40                 	db	64
   587  001F73  01                 	db	1
   588  001F74  C0                 	db	192
   589  001F75  80                 	db	128
   590  001F76  41                 	db	65
   591  001F77  01                 	db	1
   592  001F78  C0                 	db	192
   593  001F79  80                 	db	128
   594  001F7A  41                 	db	65
   595  001F7B  00                 	db	0
   596  001F7C  C1                 	db	193
   597  001F7D  81                 	db	129
   598  001F7E  40                 	db	64
   599  001F7F  01                 	db	1
   600  001F80  C0                 	db	192
   601  001F81  80                 	db	128
   602  001F82  41                 	db	65
   603  001F83  00                 	db	0
   604  001F84  C1                 	db	193
   605  001F85  81                 	db	129
   606  001F86  40                 	db	64
   607  001F87  00                 	db	0
   608  001F88  C1                 	db	193
   609  001F89  81                 	db	129
   610  001F8A  40                 	db	64
   611  001F8B  01                 	db	1
   612  001F8C  C0                 	db	192
   613  001F8D  80                 	db	128
   614  001F8E  41                 	db	65
   615  001F8F  01                 	db	1
   616  001F90  C0                 	db	192
   617  001F91  80                 	db	128
   618  001F92  41                 	db	65
   619  001F93  00                 	db	0
   620  001F94  C1                 	db	193
   621  001F95  81                 	db	129
   622  001F96  40                 	db	64
   623  001F97  00                 	db	0
   624  001F98  C1                 	db	193
   625  001F99  81                 	db	129
   626  001F9A  40                 	db	64
   627  001F9B  01                 	db	1
   628  001F9C  C0                 	db	192
   629  001F9D  80                 	db	128
   630  001F9E  41                 	db	65
   631  001F9F  00                 	db	0
   632  001FA0  C1                 	db	193
   633  001FA1  81                 	db	129
   634  001FA2  40                 	db	64
   635  001FA3  01                 	db	1
   636  001FA4  C0                 	db	192
   637  001FA5  80                 	db	128
   638  001FA6  41                 	db	65
   639  001FA7  01                 	db	1
   640  001FA8  C0                 	db	192
   641  001FA9  80                 	db	128
   642  001FAA  41                 	db	65
   643  001FAB  00                 	db	0
   644  001FAC  C1                 	db	193
   645  001FAD  81                 	db	129
   646  001FAE  40                 	db	64
   647  001FAF                     __end_of_table_crc_hi:
   648                           	callstack 0
   649  001FAF  04                 	db	4
   650  001FB0  03                 	db	3
   651  001FB1  00                 	db	0
   652  001FB2  00                 	db	0
   653  001FB3  00                 	db	0
   654  001FB4  00                 	db	0
   655  001FB5  85                 	db	133
   656  001FB6  01                 	db	1
   657  001FB7  03                 	db	3
   658  001FB8  00                 	db	0
   659  001FB9  00                 	db	0
   660  001FBA  00                 	db	0
   661  001FBB  00                 	db	0
   662  001FBC  85                 	db	133
   663  001FBD  00                 	db	0
   664  001FBE  00                 	db	0
   665  001FBF  85                 	db	133
   666  001FC0                     __end_of_i400_mode:
   667                           	callstack 0
   668  001FC0  04                 	db	4
   669  001FC1  03                 	db	3
   670  001FC2  04                 	db	4
   671  001FC3  00                 	db	0
   672  001FC4  00                 	db	0
   673  001FC5  00                 	db	0
   674  001FC6  00                 	db	0
   675  001FC7  39                 	db	57
   676  001FC8  85                 	db	133
   677  001FC9                     __end_of_i400_error:
   678                           	callstack 0
   679  001FC9  04                 	db	4
   680  001FCA  06                 	db	6
   681  001FCB  00                 	db	0
   682  001FCC  00                 	db	0
   683  001FCD  00                 	db	0
   684  001FCE  01                 	db	1
   685  001FCF  60                 	db	96
   686  001FD0  00                 	db	0
   687  001FD1                     __end_of_i400_freset:
   688                           	callstack 0
   689  001FD1  04                 	db	4
   690  001FD2  06                 	db	6
   691  001FD3  00                 	db	0
   692  001FD4  00                 	db	0
   693  001FD5  00                 	db	0
   694  001FD6  01                 	db	1
   695  001FD7  5D                 	db	93
   696  001FD8  C0                 	db	192
   697  001FD9                     __end_of_i400_clear:
   698                           	callstack 0
   699  001FD9                     _build_version:
   700                           	callstack 0
   701  001FD9  33                 	db	51
   702  001FDA  2E                 	db	46
   703  001FDB  30                 	db	48
   704  001FDC  61                 	db	97
   705  001FDD  00                 	db	0
   706  001FDE                     __end_of_build_version:
   707                           	callstack 0
   708  001FDE                     _modbus_cc_error:
   709                           	callstack 0
   710  001FDE  04                 	db	4
   711  001FDF  03                 	db	3
   712  001FE0  00                 	db	0
   713  001FE1  0A                 	db	10
   714  001FE2  00                 	db	0
   715  001FE3  02                 	db	2
   716  001FE4                     __end_of_modbus_cc_error:
   717                           	callstack 0
   718  001FE4                     _modbus_cc_mode:
   719                           	callstack 0
   720  001FE4  04                 	db	4
   721  001FE5  03                 	db	3
   722  001FE6  00                 	db	0
   723  001FE7  00                 	db	0
   724  001FE8  00                 	db	0
   725  001FE9  06                 	db	6
   726  001FEA                     __end_of_modbus_cc_mode:
   727                           	callstack 0
   728  0000                     _RCREG	set	4014
   729  0000                     _SPBRG	set	4015
   730  0000                     _SPBRGH	set	4016
   731  0000                     _TMR1L	set	4046
   732  0000                     _TMR1H	set	4047
   733  0000                     _TMR0L	set	4054
   734  0000                     _TMR0H	set	4055
   735  0000                     _TXREG	set	4013
   736  0000                     _RCSTAbits	set	4011
   737  0000                     _TXSTA	set	4012
   738  0000                     _RCONbits	set	4048
   739  0000                     _LATAbits	set	3977
   740  0000                     _CCP1CON	set	4029
   741  0000                     _CCPR1L	set	4030
   742  0000                     _ADCON1	set	4033
   743  0000                     _RCON	set	4048
   744  0000                     _TRISA	set	3986
   745  0000                     _LATBbits	set	3978
   746  0000                     _TXSTAbits	set	4012
   747  0000                     _T0CON	set	4053
   748  0000                     _INTCON2bits	set	4081
   749  0000                     _STKPTRbits	set	4092
   750  0000                     _T2CONbits	set	4042
   751  0000                     _T1CON	set	4045
   752  0000                     _PIE1bits	set	3997
   753  0000                     _RCSTA	set	4011
   754  0000                     _TRISB	set	3987
   755  0000                     _INTCONbits	set	4082
   756  0000                     _PR2	set	4043
   757  0000                     _IPR1bits	set	3999
   758  0000                     _BAUDCTLbits	set	4010
   759  0000                     _PIR1bits	set	3998
   760  001FEA                     STR_1:
   761  001FEA  4A                 	db	74	;'J'
   762  001FEB  61                 	db	97	;'a'
   763  001FEC  6E                 	db	110	;'n'
   764  001FED  20                 	db	32
   765  001FEE  32                 	db	50	;'2'
   766  001FEF  33                 	db	51	;'3'
   767  001FF0  20                 	db	32
   768  001FF1  32                 	db	50	;'2'
   769  001FF2  30                 	db	48	;'0'
   770  001FF3  32                 	db	50	;'2'
   771  001FF4  32                 	db	50	;'2'
   772  001FF5  00                 	db	0
   773  001FF6                     STR_2:
   774  001FF6  31                 	db	49	;'1'
   775  001FF7  37                 	db	55	;'7'
   776  001FF8  3A                 	db	58	;':'
   777  001FF9  34                 	db	52	;'4'
   778  001FFA  36                 	db	54	;'6'
   779  001FFB  3A                 	db	58	;':'
   780  001FFC  31                 	db	49	;'1'
   781  001FFD  30                 	db	48	;'0'
   782  001FFE  00                 	db	0
   783  001FFF  00                 	db	0	; dummy byte at the end
   784  0000                     
   785                           ; #config settings
   786                           
   787                           	psect	cinit
   788  00074C                     __pcinit:
   789                           	callstack 0
   790  00074C                     start_initialization:
   791                           	callstack 0
   792  00074C                     __initialization:
   793                           	callstack 0
   794                           
   795                           ; Initialize objects allocated to COMRAM (41 bytes)
   796                           ; load TBLPTR registers with __pidataCOMRAM
   797  00074C  0EC0               	movlw	low __pidataCOMRAM
   798  00074E  6EF6               	movwf	tblptrl,c
   799  000750  0E08               	movlw	high __pidataCOMRAM
   800  000752  6EF7               	movwf	tblptrh,c
   801  000754  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   802  000756  6EF8               	movwf	tblptru,c
   803  000758  EE00  F001         	lfsr	0,__pdataCOMRAM
   804  00075C  EE10 F029          	lfsr	1,41
   805  000760                     copy_data0:
   806  000760  0009               	tblrd		*+
   807  000762  CFF5 FFEE          	movff	tablat,postinc0
   808  000766  50E5               	movf	postdec1,w,c
   809  000768  50E1               	movf	fsr1l,w,c
   810  00076A  E1FA               	bnz	copy_data0
   811                           
   812                           ; Clear objects allocated to BANK0 (64 bytes)
   813  00076C  EE00  F080         	lfsr	0,__pbssBANK0
   814  000770  0E40               	movlw	64
   815  000772                     clear_0:
   816  000772  6AEE               	clrf	postinc0,c
   817  000774  06E8               	decf	wreg,f,c
   818  000776  E1FD               	bnz	clear_0
   819                           
   820                           ; Clear objects allocated to COMRAM (25 bytes)
   821  000778  EE00  F04D         	lfsr	0,__pbssCOMRAM
   822  00077C  0E19               	movlw	25
   823  00077E                     clear_1:
   824  00077E  6AEE               	clrf	postinc0,c
   825  000780  06E8               	decf	wreg,f,c
   826  000782  E1FD               	bnz	clear_1
   827  000784                     end_of_initialization:
   828                           	callstack 0
   829  000784                     __end_of__initialization:
   830                           	callstack 0
   831  000784  9066               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   832  000786  9266               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   833  000788  0E00               	movlw	low (__Lmediumconst shr (0+16))
   834  00078A  6EF8               	movwf	tblptru,c
   835  00078C  0100               	movlb	0
   836  00078E  EFB6  F004         	goto	_main	;jump to C main() function
   837                           
   838                           	psect	bssCOMRAM
   839  00004D                     __pbssCOMRAM:
   840                           	callstack 0
   841  00004D                     get_500hz@tmp:
   842                           	callstack 0
   843  00004D                     	ds	4
   844  000051                     get_10hz@tmp:
   845                           	callstack 0
   846  000051                     	ds	4
   847  000055                     get_2hz@tmp:
   848                           	callstack 0
   849  000055                     	ds	4
   850  000059                     _crc_error:
   851                           	callstack 0
   852  000059                     	ds	4
   853  00005D                     _rvalue:
   854                           	callstack 0
   855  00005D                     	ds	2
   856  00005F                     _req_length:
   857                           	callstack 0
   858  00005F                     	ds	2
   859  000061                     tm_handler@c_error:
   860                           	callstack 0
   861  000061                     	ds	1
   862  000062                     controller_work@modbus_command:
   863                           	callstack 0
   864  000062                     	ds	1
   865  000063                     controller_work@cstate:
   866                           	callstack 0
   867  000063                     	ds	1
   868  000064                     controller_work@mcmd:
   869                           	callstack 0
   870  000064                     	ds	1
   871  000065                     _cc_stream_file:
   872                           	callstack 0
   873  000065                     	ds	1
   874                           
   875                           	psect	dataCOMRAM
   876  000001                     __pdataCOMRAM:
   877                           	callstack 0
   878  000001                     _V:
   879                           	callstack 0
   880  000001                     	ds	20
   881  000015                     _build_time:
   882                           	callstack 0
   883  000015                     	ds	2
   884  000017                     _build_date:
   885                           	callstack 0
   886  000017                     	ds	2
   887  000019                     _i400_power:
   888                           	callstack 0
   889  000019                     	ds	2
   890  00001B                     _i400_pwm:
   891                           	callstack 0
   892  00001B                     	ds	2
   893  00001D                     controller_work@volts:
   894                           	callstack 0
   895  00001D                     	ds	1
   896  00001E                     _modbus_cc_freset:
   897                           	callstack 0
   898  00001E                     	ds	6
   899  000024                     _modbus_cc_clear:
   900                           	callstack 0
   901  000024                     	ds	6
   902                           
   903                           	psect	bssBANK0
   904  000080                     __pbssBANK0:
   905                           	callstack 0
   906  000080                     _cc_buffer:
   907                           	callstack 0
   908  000080                     	ds	64
   909                           
   910                           	psect	cstackCOMRAM
   911  00002A                     __pcstackCOMRAM:
   912                           	callstack 0
   913  00002A                     ??_led_blink:
   914  00002A                     
   915                           ; 4 bytes @ 0x0
   916  00002A                     	ds	5
   917  00002F                     ??_tm_handler:
   918                           
   919                           ; 1 bytes @ 0x5
   920  00002F                     	ds	3
   921  000032                     ?_crc16:
   922                           	callstack 0
   923  000032                     ?_get_10hz:
   924                           	callstack 0
   925  000032                     ?_get_500hz:
   926                           	callstack 0
   927  000032                     get_2hz@mode:
   928                           	callstack 0
   929  000032                     set_led_blink@blinks:
   930                           	callstack 0
   931  000032                     crc16@buffer:
   932                           	callstack 0
   933  000032                     memcpy@d1:
   934                           	callstack 0
   935  000032                     SetDCPWM1@dutycycle:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0x8
   939  000032                     	ds	1
   940  000033                     crc16@buffer_length:
   941                           	callstack 0
   942  000033                     memcpy@s1:
   943                           	callstack 0
   944                           
   945                           ; 2 bytes @ 0x9
   946  000033                     	ds	1
   947  000034                     ??_SetDCPWM1:
   948                           
   949                           ; 1 bytes @ 0xA
   950  000034                     	ds	1
   951  000035                     ??_crc16:
   952  000035                     memcpy@n:
   953                           	callstack 0
   954                           
   955                           ; 2 bytes @ 0xB
   956  000035                     	ds	1
   957  000036                     get_10hz@mode:
   958                           	callstack 0
   959  000036                     get_500hz@mode:
   960                           	callstack 0
   961  000036                     SetDCPWM1@DCycle:
   962                           	callstack 0
   963                           
   964                           ; 2 bytes @ 0xC
   965  000036                     	ds	1
   966  000037                     crc16@i:
   967                           	callstack 0
   968  000037                     memcpy@s:
   969                           	callstack 0
   970                           
   971                           ; 2 bytes @ 0xD
   972  000037                     	ds	1
   973  000038                     crc16@crc_hi:
   974                           	callstack 0
   975                           
   976                           ; 1 bytes @ 0xE
   977  000038                     	ds	1
   978  000039                     crc16@crc_lo:
   979                           	callstack 0
   980  000039                     memcpy@tmp:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0xF
   984  000039                     	ds	1
   985  00003A                     ?_modbus_rtu_send_msg_crc:
   986                           	callstack 0
   987  00003A                     modbus_rtu_send_msg_crc@req:
   988                           	callstack 0
   989  00003A                     memcpy@d:
   990                           	callstack 0
   991                           
   992                           ; 1 bytes @ 0x10
   993  00003A                     	ds	1
   994  00003B                     modbus_rtu_send_msg_crc@req_length:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0x11
   998  00003B                     	ds	2
   999  00003D                     modbus_rtu_send_msg_crc@crc:
  1000                           	callstack 0
  1001                           
  1002                           ; 2 bytes @ 0x13
  1003  00003D                     	ds	2
  1004  00003F                     ?_modbus_rtu_send_msg:
  1005                           	callstack 0
  1006  00003F                     modbus_rtu_send_msg@cc_buffer:
  1007                           	callstack 0
  1008                           
  1009                           ; 1 bytes @ 0x15
  1010  00003F                     	ds	1
  1011  000040                     modbus_rtu_send_msg@modbus_cc_mode:
  1012                           	callstack 0
  1013                           
  1014                           ; 2 bytes @ 0x16
  1015  000040                     	ds	2
  1016  000042                     modbus_rtu_send_msg@req_length:
  1017                           	callstack 0
  1018                           
  1019                           ; 2 bytes @ 0x18
  1020  000042                     	ds	2
  1021  000044                     ??_controller_work:
  1022                           
  1023                           ; 1 bytes @ 0x1A
  1024  000044                     	ds	2
  1025  000046                     controller_work@temp:
  1026                           	callstack 0
  1027                           
  1028                           ; 2 bytes @ 0x1C
  1029  000046                     	ds	2
  1030  000048                     controller_work@temp_727:
  1031                           	callstack 0
  1032                           
  1033                           ; 1 bytes @ 0x1E
  1034  000048                     	ds	1
  1035  000049                     controller_work@c_crc:
  1036                           	callstack 0
  1037                           
  1038                           ; 2 bytes @ 0x1F
  1039  000049                     	ds	2
  1040  00004B                     controller_work@c_crc_rec:
  1041                           	callstack 0
  1042                           
  1043                           ; 2 bytes @ 0x21
  1044  00004B                     	ds	2
  1045  00004D                     
  1046                           ; 1 bytes @ 0x23
  1047 ;;
  1048 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1049 ;;
  1050 ;; *************** function _main *****************
  1051 ;; Defined at:
  1052 ;;		line 435 in file "../ibsmon.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0
  1066 ;;      Params:         0       0
  1067 ;;      Locals:         0       0
  1068 ;;      Temps:          0       0
  1069 ;;      Totals:         0       0
  1070 ;;Total ram usage:        0 bytes
  1071 ;; Hardware stack levels required when called: 6
  1072 ;; This function calls:
  1073 ;;		_controller_work
  1074 ;;		_init_i400mon
  1075 ;; This function is called by:
  1076 ;;		Startup code after reset
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text0
  1081  00096C                     __ptext0:
  1082                           	callstack 0
  1083  00096C                     _main:
  1084                           	callstack 25
  1085                           
  1086                           ;../ibsmon.c: 437:  init_i400mon();
  1087                           
  1088                           ;incstack = 0
  1089  00096C  ECC6  F002         	call	_init_i400mon	;wreg free
  1090  000970                     l2067:
  1091                           
  1092                           ;../ibsmon.c: 440:   controller_work();
  1093  000970  EC5B  F000         	call	_controller_work	;wreg free
  1094  000974  D7FD               	goto	l2067
  1095  000976                     __end_of_main:
  1096                           	callstack 0
  1097                           
  1098 ;; *************** function _init_i400mon *****************
  1099 ;; Defined at:
  1100 ;;		line 351 in file "../ibsmon.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  tmp             2    0        unsigned short 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0
  1114 ;;      Params:         0       0
  1115 ;;      Locals:         0       0
  1116 ;;      Temps:          0       0
  1117 ;;      Totals:         0       0
  1118 ;;Total ram usage:        0 bytes
  1119 ;; Hardware stack levels used: 1
  1120 ;; Hardware stack levels required when called: 3
  1121 ;; This function calls:
  1122 ;;		_SetDCPWM1
  1123 ;;		_init_stream_params
  1124 ;;		_set_led_blink
  1125 ;; This function is called by:
  1126 ;;		_main
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text1
  1131  00058C                     __ptext1:
  1132                           	callstack 0
  1133  00058C                     _init_i400mon:
  1134                           	callstack 27
  1135                           
  1136                           ;../ibsmon.c: 353:  uint16_t tmp;;../ibsmon.c: 354:  V.boot_code = 0;
  1137                           
  1138                           ;incstack = 0
  1139  00058C  960F               	bcf	(_V+14)^0,3,c	;volatile
  1140                           
  1141                           ;../ibsmon.c: 355:  LATBbits.LATB2 = 0;
  1142  00058E  948A               	bcf	138,2,c	;volatile
  1143                           
  1144                           ;../ibsmon.c: 356:  if (RCON != 0b0011100) {
  1145  000590  0E1C               	movlw	28
  1146  000592  18D0               	xorwf	208,w,c	;volatile
  1147  000594  A4D8               	btfss	status,2,c
  1148                           
  1149                           ;../ibsmon.c: 357:   V.boot_code = 1;
  1150  000596  860F               	bsf	(_V+14)^0,3,c	;volatile
  1151                           
  1152                           ;../ibsmon.c: 360:  if (STKPTRbits.STKFUL || STKPTRbits.STKUNF) {
  1153                           
  1154                           ;../ibsmon.c: 358:  }
  1155  000598  BEFC               	btfsc	252,7,c	;volatile
  1156  00059A  D002               	goto	u1060
  1157  00059C  ACFC               	btfss	252,6,c	;volatile
  1158  00059E  D003               	goto	l208
  1159  0005A0                     u1060:
  1160                           
  1161                           ;../ibsmon.c: 361:   V.boot_code = 1;
  1162  0005A0  860F               	bsf	(_V+14)^0,3,c	;volatile
  1163                           
  1164                           ;../ibsmon.c: 362:   STKPTRbits.STKFUL = 0;
  1165  0005A2  9EFC               	bcf	252,7,c	;volatile
  1166                           
  1167                           ;../ibsmon.c: 363:   STKPTRbits.STKUNF = 0;
  1168  0005A4  9CFC               	bcf	252,6,c	;volatile
  1169  0005A6                     l208:
  1170                           
  1171                           ;../ibsmon.c: 366:  if (V.boot_code) {
  1172  0005A6  B60F               	btfsc	(_V+14)^0,3,c	;volatile
  1173                           
  1174                           ;../ibsmon.c: 367:   LATBbits.LATB2 = 1;
  1175  0005A8  848A               	bsf	138,2,c	;volatile
  1176                           
  1177                           ;../ibsmon.c: 370:  ADCON1 = 0x7F;
  1178  0005AA  0E7F               	movlw	127
  1179  0005AC  6EC1               	movwf	193,c	;volatile
  1180                           
  1181                           ;../ibsmon.c: 372:  RCONbits.IPEN = 1;
  1182  0005AE  8ED0               	bsf	208,7,c	;volatile
  1183                           
  1184                           ;../ibsmon.c: 374:  TRISA = 0b01001100;
  1185  0005B0  0E4C               	movlw	76
  1186  0005B2  6E92               	movwf	146,c	;volatile
  1187                           
  1188                           ;../ibsmon.c: 375:  TRISB = 0b00010010;
  1189  0005B4  0E12               	movlw	18
  1190  0005B6  6E93               	movwf	147,c	;volatile
  1191                           
  1192                           ;../ibsmon.c: 376:  INTCON2bits.RBPU = 0;
  1193  0005B8  9EF1               	bcf	241,7,c	;volatile
  1194                           
  1195                           ;../ibsmon.c: 378:  LATBbits.LATB0 = 0;
  1196  0005BA  908A               	bcf	138,0,c	;volatile
  1197                           
  1198                           ;../ibsmon.c: 379:  LATAbits.LATA2 = 0;
  1199  0005BC  9489               	bcf	137,2,c	;volatile
  1200                           
  1201                           ;../ibsmon.c: 380:  V.clock_blinks = 0;
  1202  0005BE  0E00               	movlw	0
  1203  0005C0  6E0D               	movwf	(_V+12)^0,c	;volatile
  1204                           
  1205                           ;../ibsmon.c: 381:  set_led_blink(0);
  1206  0005C2  0E00               	movlw	0
  1207  0005C4  EC75  F004         	call	_set_led_blink
  1208                           
  1209                           ;../ibsmon.c: 383:  T0CON = 0b10000101;
  1210  0005C8  0E85               	movlw	133
  1211  0005CA  6ED5               	movwf	213,c	;volatile
  1212                           
  1213                           ;../ibsmon.c: 385:  TMR0H = (uint8_t) tmp;
  1214  0005CC  0E67               	movlw	103
  1215  0005CE  6ED7               	movwf	215,c	;volatile
  1216                           
  1217                           ;../ibsmon.c: 387:  TMR0L = (uint8_t) tmp;
  1218  0005D0  0EE8               	movlw	232
  1219  0005D2  6ED6               	movwf	214,c	;volatile
  1220                           
  1221                           ;../ibsmon.c: 389:  T1CON = 0b10100101;
  1222  0005D4  0EA5               	movlw	165
  1223  0005D6  6ECD               	movwf	205,c	;volatile
  1224                           
  1225                           ;../ibsmon.c: 391:  TMR1H = (uint8_t) tmp;
  1226  0005D8  0EF6               	movlw	246
  1227  0005DA  6ECF               	movwf	207,c	;volatile
  1228                           
  1229                           ;../ibsmon.c: 393:  TMR1L = (uint8_t) tmp;
  1230  0005DC  0E60               	movlw	96
  1231  0005DE  6ECE               	movwf	206,c	;volatile
  1232                           
  1233                           ;../ibsmon.c: 395:  CCP1CON |= 0b00001100;
  1234  0005E0  0E0C               	movlw	12
  1235  0005E2  12BD               	iorwf	189,f,c	;volatile
  1236                           
  1237                           ;../ibsmon.c: 396:  T2CONbits.TMR2ON = 0;
  1238  0005E4  94CA               	bcf	202,2,c	;volatile
  1239                           
  1240                           ;../ibsmon.c: 397:  PR2 = 65;
  1241  0005E6  0E41               	movlw	65
  1242  0005E8  6ECB               	movwf	203,c	;volatile
  1243                           
  1244                           ;../ibsmon.c: 398:  T2CONbits.TMR2ON = 1;
  1245  0005EA  84CA               	bsf	202,2,c	;volatile
  1246                           
  1247                           ;../ibsmon.c: 399:  V.pwm_volts = 255;
  1248  0005EC  6812               	setf	(_V+17)^0,c	;volatile
  1249                           
  1250                           ;../ibsmon.c: 400:  SetDCPWM1(V.pwm_volts);
  1251  0005EE  C012  F032         	movff	_V+17,SetDCPWM1@dutycycle	;volatile
  1252  0005F2  6A33               	clrf	(SetDCPWM1@dutycycle+1)^0,c
  1253  0005F4  EC2A  F004         	call	_SetDCPWM1	;wreg free
  1254                           
  1255                           ;../ibsmon.c: 403:  TXSTA = 0;
  1256  0005F8  0E00               	movlw	0
  1257  0005FA  6EAC               	movwf	172,c	;volatile
  1258                           
  1259                           ;../ibsmon.c: 404:  RCSTA = 0;
  1260  0005FC  0E00               	movlw	0
  1261  0005FE  6EAB               	movwf	171,c	;volatile
  1262                           
  1263                           ;../ibsmon.c: 405:  PIE1bits.RCIE = 1;
  1264  000600  8A9D               	bsf	157,5,c	;volatile
  1265                           
  1266                           ;../ibsmon.c: 406:  PIE1bits.TXIE = 0;
  1267  000602  989D               	bcf	157,4,c	;volatile
  1268                           
  1269                           ;../ibsmon.c: 407:  TXSTAbits.SYNC = 0;
  1270  000604  98AC               	bcf	172,4,c	;volatile
  1271                           
  1272                           ;../ibsmon.c: 408:  RCSTAbits.CREN = 1;
  1273  000606  88AB               	bsf	171,4,c	;volatile
  1274                           
  1275                           ;../ibsmon.c: 409:  PIR1bits.TXIF = 0;
  1276  000608  989E               	bcf	158,4,c	;volatile
  1277                           
  1278                           ;../ibsmon.c: 410:  PIR1bits.RCIF = 0;
  1279  00060A  9A9E               	bcf	158,5,c	;volatile
  1280                           
  1281                           ;../ibsmon.c: 411:  BAUDCTLbits.BRG16 = 1;
  1282  00060C  86AA               	bsf	170,3,c	;volatile
  1283                           
  1284                           ;../ibsmon.c: 412:  TXSTAbits.BRGH = 0;
  1285  00060E  94AC               	bcf	172,2,c	;volatile
  1286                           
  1287                           ;../ibsmon.c: 413:  SPBRGH = 0;
  1288  000610  0E00               	movlw	0
  1289  000612  6EB0               	movwf	176,c	;volatile
  1290                           
  1291                           ;../ibsmon.c: 414:  SPBRG = 42;
  1292  000614  0E2A               	movlw	42
  1293  000616  6EAF               	movwf	175,c	;volatile
  1294                           
  1295                           ;../ibsmon.c: 415:  TXSTAbits.TXEN = 1;
  1296  000618  8AAC               	bsf	172,5,c	;volatile
  1297                           
  1298                           ;../ibsmon.c: 416:  RCSTAbits.SPEN = 1;
  1299  00061A  8EAB               	bsf	171,7,c	;volatile
  1300                           
  1301                           ;../ibsmon.c: 418:  INTCONbits.TMR0IE = 1;
  1302  00061C  8AF2               	bsf	242,5,c	;volatile
  1303                           
  1304                           ;../ibsmon.c: 419:  INTCON2bits.TMR0IP = 1;
  1305  00061E  84F1               	bsf	241,2,c	;volatile
  1306                           
  1307                           ;../ibsmon.c: 420:  PIE1bits.TMR1IE = 1;
  1308  000620  809D               	bsf	157,0,c	;volatile
  1309                           
  1310                           ;../ibsmon.c: 421:  IPR1bits.TMR1IP = 1;
  1311  000622  809F               	bsf	159,0,c	;volatile
  1312                           
  1313                           ;../ibsmon.c: 423:  init_stream_params();
  1314  000624  ECBB  F004         	call	_init_stream_params	;wreg free
  1315                           
  1316                           ;../ibsmon.c: 426:  INTCONbits.GIEH = 1;
  1317  000628  8EF2               	bsf	242,7,c	;volatile
  1318  00062A  0012               	return		;funcret
  1319  00062C                     __end_of_init_i400mon:
  1320                           	callstack 0
  1321                           
  1322 ;; *************** function _init_stream_params *****************
  1323 ;; Defined at:
  1324 ;;		line 429 in file "../ibsmon.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      unsigned char 
  1331 ;; Registers used:
  1332 ;;		None
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0
  1338 ;;      Params:         0       0
  1339 ;;      Locals:         0       0
  1340 ;;      Temps:          0       0
  1341 ;;      Totals:         0       0
  1342 ;;Total ram usage:        0 bytes
  1343 ;; Hardware stack levels used: 1
  1344 ;; Hardware stack levels required when called: 2
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_init_i400mon
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text2
  1353  000976                     __ptext2:
  1354                           	callstack 0
  1355  000976                     _init_stream_params:
  1356                           	callstack 27
  1357                           
  1358                           ;../ibsmon.c: 431:  V.config = 0;
  1359                           
  1360                           ;incstack = 0
  1361  000976  920F               	bcf	(_V+14)^0,1,c	;volatile
  1362                           
  1363                           ;../ibsmon.c: 432:  return 0;;	Return value of _init_stream_params is never used
  1364  000978  0012               	return		;funcret
  1365  00097A                     __end_of_init_stream_params:
  1366                           	callstack 0
  1367                           
  1368 ;; *************** function _controller_work *****************
  1369 ;; Defined at:
  1370 ;;		line 118 in file "../ibsmon.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  temp            1   30[COMRAM] unsigned char 
  1375 ;;  temp            2   28[COMRAM] unsigned short 
  1376 ;;  c_crc_rec       2   33[COMRAM] unsigned short 
  1377 ;;  c_crc           2   31[COMRAM] unsigned short 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      char 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0
  1387 ;;      Params:         0       0
  1388 ;;      Locals:         7       0
  1389 ;;      Temps:          2       0
  1390 ;;      Totals:         9       0
  1391 ;;Total ram usage:        9 bytes
  1392 ;; Hardware stack levels used: 1
  1393 ;; Hardware stack levels required when called: 5
  1394 ;; This function calls:
  1395 ;;		_SetDCPWM1
  1396 ;;		_clear_10hz
  1397 ;;		_clear_2hz
  1398 ;;		_clear_500hz
  1399 ;;		_crc16
  1400 ;;		_get_10hz
  1401 ;;		_get_2hz
  1402 ;;		_get_500hz
  1403 ;;		_modbus_rtu_send_msg
  1404 ;;		_set_led_blink
  1405 ;; This function is called by:
  1406 ;;		_main
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text3
  1411  0000B6                     __ptext3:
  1412                           	callstack 0
  1413  0000B6                     _controller_work:
  1414                           	callstack 25
  1415                           
  1416                           ;../ibsmon.c: 120:  static uint8_t mcmd = G_MODE;;../ibsmon.c: 121:  static comm_type cs
      +                          tate = CLEAR;;../ibsmon.c: 122:  static cmd_type modbus_command = G_MODE;;../ibsmon.c: 1
      +                          24:  switch (cstate) {
  1417                           
  1418                           ;incstack = 0
  1419  0000B6  D255               	goto	l1921
  1420  0000B8                     l1681:
  1421                           
  1422                           ;../ibsmon.c: 126:   clear_2hz();
  1423  0000B8  ECA0  F004         	call	_clear_2hz	;wreg free
  1424                           
  1425                           ;../ibsmon.c: 127:   clear_10hz();
  1426  0000BC  ECAB  F004         	call	_clear_10hz	;wreg free
  1427                           
  1428                           ;../ibsmon.c: 128:   cstate = INIT;
  1429  0000C0  0E01               	movlw	1
  1430  0000C2  6E63               	movwf	controller_work@cstate^0,c
  1431                           
  1432                           ;../ibsmon.c: 129:   modbus_command = mcmd++;
  1433  0000C4  C064  F062         	movff	controller_work@mcmd,controller_work@modbus_command
  1434  0000C8  2A64               	incf	controller_work@mcmd^0,f,c
  1435                           
  1436                           ;../ibsmon.c: 130:   if (mcmd > G_LAST) {
  1437  0000CA  0E04               	movlw	4
  1438  0000CC  6464               	cpfsgt	controller_work@mcmd^0,c
  1439  0000CE  D076               	goto	l1721
  1440                           
  1441                           ;../ibsmon.c: 131:    mcmd = G_MODE;
  1442  0000D0  0E00               	movlw	0
  1443  0000D2  6E64               	movwf	controller_work@mcmd^0,c
  1444  0000D4  D073               	goto	l1721
  1445  0000D6                     l138:
  1446                           
  1447                           ;../ibsmon.c: 138:    if (LATAbits.LATA3) {
  1448  0000D6  A689               	btfss	137,3,c	;volatile
  1449  0000D8  D004               	goto	l1695
  1450                           
  1451                           ;../ibsmon.c: 139:     rvalue.value = i400_pwm;
  1452  0000DA  0E01               	movlw	1
  1453  0000DC  6E5E               	movwf	(_rvalue+1)^0,c
  1454  0000DE  0E71               	movlw	113
  1455  0000E0  D003               	goto	L1
  1456  0000E2                     l1695:
  1457                           
  1458                           ;../ibsmon.c: 141:     rvalue.value = 0;
  1459  0000E2  0E00               	movlw	0
  1460  0000E4  6E5E               	movwf	(_rvalue+1)^0,c
  1461  0000E6  0E00               	movlw	0
  1462  0000E8                     L1:
  1463  0000E8  6E5D               	movwf	_rvalue^0,c
  1464                           
  1465                           ;../ibsmon.c: 143:    modbus_cc_freset[4] = rvalue.bytes[1];
  1466  0000EA  C05E  F022         	movff	_rvalue+1,_modbus_cc_freset+4
  1467                           
  1468                           ;../ibsmon.c: 144:    modbus_cc_freset[5] = rvalue.bytes[0];
  1469  0000EE  C05D  F023         	movff	_rvalue,_modbus_cc_freset+5
  1470                           
  1471                           ;../ibsmon.c: 145:    req_length = modbus_rtu_send_msg((void*) cc_buffer, (const void *)
      +                           modbus_cc_freset, sizeof(modbus_cc_freset));
  1472  0000F2  0E80               	movlw	low _cc_buffer
  1473  0000F4  6E3F               	movwf	modbus_rtu_send_msg@cc_buffer^0,c
  1474  0000F6  0E1E               	movlw	low _modbus_cc_freset
  1475  0000F8  6E40               	movwf	modbus_rtu_send_msg@modbus_cc_mode^0,c
  1476  0000FA  6A41               	clrf	(modbus_rtu_send_msg@modbus_cc_mode+1)^0,c
  1477  0000FC  0E00               	movlw	0
  1478  0000FE  6E43               	movwf	(modbus_rtu_send_msg@req_length+1)^0,c
  1479  000100  0E06               	movlw	6
  1480  000102  6E42               	movwf	modbus_rtu_send_msg@req_length^0,c
  1481  000104  EC47  F004         	call	_modbus_rtu_send_msg	;wreg free
  1482  000108  C03F  F05F         	movff	?_modbus_rtu_send_msg,_req_length
  1483  00010C  C040  F060         	movff	?_modbus_rtu_send_msg+1,_req_length+1
  1484                           
  1485                           ;../ibsmon.c: 146:    break;
  1486  000110  0012               	return	
  1487  000112                     l1703:
  1488                           
  1489                           ;../ibsmon.c: 148:    i400_power = V.power_on << 8;
  1490  000112  A80F               	btfss	(_V+14)^0,4,c	;volatile
  1491  000114  D002               	goto	u740
  1492  000116  0E01               	movlw	1
  1493  000118  D001               	goto	u746
  1494  00011A                     u740:
  1495  00011A  0E00               	movlw	0
  1496  00011C                     u746:
  1497  00011C  6E1A               	movwf	(_i400_power+1)^0,c
  1498  00011E  6A19               	clrf	_i400_power^0,c
  1499                           
  1500                           ;../ibsmon.c: 149:    i400_power += (((uint16_t) (V.error & 0x00ff)) << 9) + 0x0030;;
  1501  000120  0EFF               	movlw	255
  1502  000122  1413               	andwf	(_V+18)^0,w,c	;volatile
  1503  000124  6E44               	movwf	??_controller_work^0,c
  1504  000126  0E00               	movlw	0
  1505  000128  1414               	andwf	(_V+19)^0,w,c	;volatile
  1506  00012A  6E45               	movwf	(??_controller_work+1)^0,c
  1507  00012C  0E09               	movlw	9
  1508  00012E                     u755:
  1509  00012E  90D8               	bcf	status,0,c
  1510  000130  3644               	rlcf	??_controller_work^0,f,c
  1511  000132  3645               	rlcf	(??_controller_work+1)^0,f,c
  1512  000134  2EE8               	decfsz	wreg,f,c
  1513  000136  D7FB               	goto	u755
  1514  000138  0E30               	movlw	48
  1515  00013A  2644               	addwf	??_controller_work^0,f,c
  1516  00013C  0E00               	movlw	0
  1517  00013E  2245               	addwfc	(??_controller_work+1)^0,f,c
  1518  000140  5044               	movf	??_controller_work^0,w,c
  1519  000142  2619               	addwf	_i400_power^0,f,c
  1520  000144  5045               	movf	(??_controller_work+1)^0,w,c
  1521  000146  221A               	addwfc	(_i400_power+1)^0,f,c
  1522                           
  1523                           ;../ibsmon.c: 150:    rvalue.value = i400_power;
  1524  000148  C019  F05D         	movff	_i400_power,_rvalue
  1525  00014C  C01A  F05E         	movff	_i400_power+1,_rvalue+1
  1526                           
  1527                           ;../ibsmon.c: 151:    modbus_cc_clear[4] = rvalue.bytes[1];
  1528  000150  C05E  F028         	movff	_rvalue+1,_modbus_cc_clear+4
  1529                           
  1530                           ;../ibsmon.c: 152:    modbus_cc_clear[5] = rvalue.bytes[0];
  1531  000154  C05D  F029         	movff	_rvalue,_modbus_cc_clear+5
  1532                           
  1533                           ;../ibsmon.c: 153:    req_length = modbus_rtu_send_msg((void*) cc_buffer, (const void *)
      +                           modbus_cc_clear, sizeof(modbus_cc_clear));
  1534  000158  0E80               	movlw	low _cc_buffer
  1535  00015A  6E3F               	movwf	modbus_rtu_send_msg@cc_buffer^0,c
  1536  00015C  0E24               	movlw	low _modbus_cc_clear
  1537  00015E  6E40               	movwf	modbus_rtu_send_msg@modbus_cc_mode^0,c
  1538  000160  6A41               	clrf	(modbus_rtu_send_msg@modbus_cc_mode+1)^0,c
  1539  000162  0E00               	movlw	0
  1540  000164  6E43               	movwf	(modbus_rtu_send_msg@req_length+1)^0,c
  1541  000166  0E06               	movlw	6
  1542  000168  6E42               	movwf	modbus_rtu_send_msg@req_length^0,c
  1543  00016A  EC47  F004         	call	_modbus_rtu_send_msg	;wreg free
  1544  00016E  C03F  F05F         	movff	?_modbus_rtu_send_msg,_req_length
  1545  000172  C040  F060         	movff	?_modbus_rtu_send_msg+1,_req_length+1
  1546                           
  1547                           ;../ibsmon.c: 154:    break;
  1548  000176  0012               	return	
  1549  000178                     l1715:
  1550                           
  1551                           ;../ibsmon.c: 156:    req_length = modbus_rtu_send_msg((void*) cc_buffer, (const void *)
      +                           modbus_cc_error, sizeof(modbus_cc_error));
  1552  000178  0E80               	movlw	low _cc_buffer
  1553  00017A  6E3F               	movwf	modbus_rtu_send_msg@cc_buffer^0,c
  1554  00017C  0EDE               	movlw	low _modbus_cc_error
  1555  00017E  6E40               	movwf	modbus_rtu_send_msg@modbus_cc_mode^0,c
  1556  000180  0E1F               	movlw	high _modbus_cc_error
  1557  000182  6E41               	movwf	(modbus_rtu_send_msg@modbus_cc_mode+1)^0,c
  1558  000184  0E00               	movlw	0
  1559  000186  6E43               	movwf	(modbus_rtu_send_msg@req_length+1)^0,c
  1560  000188  0E06               	movlw	6
  1561  00018A  6E42               	movwf	modbus_rtu_send_msg@req_length^0,c
  1562  00018C  EC47  F004         	call	_modbus_rtu_send_msg	;wreg free
  1563  000190  C03F  F05F         	movff	?_modbus_rtu_send_msg,_req_length
  1564  000194  C040  F060         	movff	?_modbus_rtu_send_msg+1,_req_length+1
  1565                           
  1566                           ;../ibsmon.c: 157:    break;
  1567  000198  0012               	return	
  1568  00019A                     l1717:
  1569                           
  1570                           ;../ibsmon.c: 160:    req_length = modbus_rtu_send_msg((void*) cc_buffer, (const void *)
      +                           modbus_cc_mode, sizeof(modbus_cc_mode));
  1571  00019A  0E80               	movlw	low _cc_buffer
  1572  00019C  6E3F               	movwf	modbus_rtu_send_msg@cc_buffer^0,c
  1573  00019E  0EE4               	movlw	low _modbus_cc_mode
  1574  0001A0  6E40               	movwf	modbus_rtu_send_msg@modbus_cc_mode^0,c
  1575  0001A2  0E1F               	movlw	high _modbus_cc_mode
  1576  0001A4  6E41               	movwf	(modbus_rtu_send_msg@modbus_cc_mode+1)^0,c
  1577  0001A6  0E00               	movlw	0
  1578  0001A8  6E43               	movwf	(modbus_rtu_send_msg@req_length+1)^0,c
  1579  0001AA  0E06               	movlw	6
  1580  0001AC  6E42               	movwf	modbus_rtu_send_msg@req_length^0,c
  1581  0001AE  EC47  F004         	call	_modbus_rtu_send_msg	;wreg free
  1582  0001B2  C03F  F05F         	movff	?_modbus_rtu_send_msg,_req_length
  1583  0001B6  C040  F060         	movff	?_modbus_rtu_send_msg+1,_req_length+1
  1584                           
  1585                           ;../ibsmon.c: 161:    break;
  1586  0001BA  0012               	return	
  1587  0001BC                     l1721:
  1588  0001BC  5062               	movf	controller_work@modbus_command^0,w,c
  1589  0001BE  6E44               	movwf	??_controller_work^0,c
  1590  0001C0  6A45               	clrf	(??_controller_work+1)^0,c
  1591                           
  1592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1593                           ; Switch size 1, requested type "simple"
  1594                           ; Number of cases is 1, Range of values is 0 to 0
  1595                           ; switch strategies available:
  1596                           ; Name         Instructions Cycles
  1597                           ; simple_byte            4     3 (average)
  1598                           ;	Chosen strategy is simple_byte
  1599  0001C2  5045               	movf	(??_controller_work+1)^0,w,c
  1600  0001C4  0A00               	xorlw	0	; case 0
  1601  0001C6  A4D8               	btfss	status,2,c
  1602  0001C8  D7E8               	goto	l1717
  1603                           
  1604                           ; Switch size 1, requested type "simple"
  1605                           ; Number of cases is 4, Range of values is 0 to 3
  1606                           ; switch strategies available:
  1607                           ; Name         Instructions Cycles
  1608                           ; simple_byte           13     7 (average)
  1609                           ;	Chosen strategy is simple_byte
  1610  0001CA  5044               	movf	??_controller_work^0,w,c
  1611  0001CC  0A00               	xorlw	0	; case 0
  1612  0001CE  B4D8               	btfsc	status,2,c
  1613  0001D0  D7E4               	goto	l1717
  1614  0001D2  0A01               	xorlw	1	; case 1
  1615  0001D4  B4D8               	btfsc	status,2,c
  1616  0001D6  D7D0               	goto	l1715
  1617  0001D8  0A03               	xorlw	3	; case 2
  1618  0001DA  B4D8               	btfsc	status,2,c
  1619  0001DC  D79A               	goto	l1703
  1620  0001DE  0A01               	xorlw	1	; case 3
  1621  0001E0  B4D8               	btfsc	status,2,c
  1622  0001E2  D779               	goto	l138
  1623  0001E4  D7DA               	goto	l1717
  1624  0001E6                     l1723:
  1625                           
  1626                           ;../ibsmon.c: 166:   if (get_10hz(0) >= 50) {
  1627  0001E6  0E00               	movlw	0
  1628  0001E8  EC0A  F004         	call	_get_10hz
  1629  0001EC  5035               	movf	(?_get_10hz+3)^0,w,c
  1630  0001EE  1034               	iorwf	(?_get_10hz+2)^0,w,c
  1631  0001F0  1033               	iorwf	(?_get_10hz+1)^0,w,c
  1632  0001F2  E104               	bnz	u760
  1633  0001F4  0E32               	movlw	50
  1634  0001F6  5C32               	subwf	?_get_10hz^0,w,c
  1635  0001F8  A0D8               	btfss	status,0,c
  1636  0001FA  0012               	return	
  1637  0001FC                     u760:
  1638                           
  1639                           ;../ibsmon.c: 167:    get_2hz(0);
  1640  0001FC  0E00               	movlw	0
  1641  0001FE  EC86  F004         	call	_get_2hz
  1642                           
  1643                           ;../ibsmon.c: 175:    LATAbits.LATA1 = 1;
  1644  000202  8289               	bsf	137,1,c	;volatile
  1645                           
  1646                           ;../ibsmon.c: 177:    LATAbits.LATA0 = 1;
  1647  000204  8089               	bsf	137,0,c	;volatile
  1648                           
  1649                           ;../ibsmon.c: 178:    V.send_count = 0;
  1650  000206  0E00               	movlw	0
  1651  000208  6E10               	movwf	(_V+15)^0,c	;volatile
  1652                           
  1653                           ;../ibsmon.c: 179:    V.recv_count = 0;
  1654  00020A  0E00               	movlw	0
  1655  00020C  6E11               	movwf	(_V+16)^0,c	;volatile
  1656                           
  1657                           ;../ibsmon.c: 180:    cstate = SEND;
  1658  00020E  0E02               	movlw	2
  1659  000210  6E63               	movwf	controller_work@cstate^0,c
  1660                           
  1661                           ;../ibsmon.c: 181:    clear_500hz();
  1662  000212  EC95  F004         	call	_clear_500hz	;wreg free
  1663  000216  0012               	return	
  1664  000218                     l1739:
  1665                           
  1666                           ;../ibsmon.c: 185:   if (get_500hz(0) > 3) {
  1667  000218  0E00               	movlw	0
  1668  00021A  ECEA  F003         	call	_get_500hz
  1669  00021E  5035               	movf	(?_get_500hz+3)^0,w,c
  1670  000220  1034               	iorwf	(?_get_500hz+2)^0,w,c
  1671  000222  1033               	iorwf	(?_get_500hz+1)^0,w,c
  1672  000224  E104               	bnz	u770
  1673  000226  0E04               	movlw	4
  1674  000228  5C32               	subwf	?_get_500hz^0,w,c
  1675  00022A  A0D8               	btfss	status,0,c
  1676  00022C  0012               	return	
  1677  00022E                     u770:
  1678                           
  1679                           ;../ibsmon.c: 187:     while (!TXSTAbits.TRMT) {
  1680                           
  1681                           ;../ibsmon.c: 188:     };
  1682  00022E  A2AC               	btfss	172,1,c	;volatile
  1683  000230  D7FE               	goto	u770
  1684                           
  1685                           ;../ibsmon.c: 189:     TXREG = cc_buffer[V.send_count];
  1686  000232  5010               	movf	(_V+15)^0,w,c	;volatile
  1687  000234  0F80               	addlw	low _cc_buffer
  1688  000236  6ED9               	movwf	fsr2l,c
  1689  000238  6ADA               	clrf	fsr2h,c
  1690  00023A  50DF               	movf	indf2,w,c
  1691  00023C  6EAD               	movwf	173,c	;volatile
  1692                           
  1693                           ;../ibsmon.c: 190:    } while (++V.send_count < req_length);
  1694  00023E  2A10               	incf	(_V+15)^0,f,c	;volatile
  1695  000240  5010               	movf	(_V+15)^0,w,c	;volatile
  1696  000242  6E44               	movwf	??_controller_work^0,c
  1697  000244  6A45               	clrf	(??_controller_work+1)^0,c
  1698  000246  505F               	movf	_req_length^0,w,c
  1699  000248  5C44               	subwf	??_controller_work^0,w,c
  1700  00024A  5060               	movf	(_req_length+1)^0,w,c
  1701  00024C  5845               	subwfb	(??_controller_work+1)^0,w,c
  1702  00024E  A0D8               	btfss	status,0,c
  1703  000250  D7EE               	goto	u770
  1704  000252                     u790:
  1705                           
  1706                           ;../ibsmon.c: 191:    while (!TXSTAbits.TRMT) {
  1707                           
  1708                           ;../ibsmon.c: 192:    };
  1709  000252  A2AC               	btfss	172,1,c	;volatile
  1710  000254  D7FE               	goto	u790
  1711                           
  1712                           ;../ibsmon.c: 193:    cstate = RECV;
  1713  000256  0E03               	movlw	3
  1714  000258  D7DB               	goto	L2
  1715  00025A                     l1749:
  1716                           
  1717                           ;../ibsmon.c: 198:   if (get_500hz(0) > 3) {
  1718  00025A  0E00               	movlw	0
  1719  00025C  ECEA  F003         	call	_get_500hz
  1720  000260  5035               	movf	(?_get_500hz+3)^0,w,c
  1721  000262  1034               	iorwf	(?_get_500hz+2)^0,w,c
  1722  000264  1033               	iorwf	(?_get_500hz+1)^0,w,c
  1723  000266  E104               	bnz	u810
  1724  000268  0E04               	movlw	4
  1725  00026A  5C32               	subwf	?_get_500hz^0,w,c
  1726  00026C  A0D8               	btfss	status,0,c
  1727  00026E  0012               	return	
  1728  000270                     u810:
  1729                           
  1730                           ;../ibsmon.c: 199:    uint16_t c_crc, c_crc_rec;;../ibsmon.c: 201:    LATAbits.LATA0 = 0
      +                          ;
  1731  000270  9089               	bcf	137,0,c	;volatile
  1732                           
  1733                           ;../ibsmon.c: 202:    LATAbits.LATA1 = 0;
  1734  000272  9289               	bcf	137,1,c	;volatile
  1735                           
  1736                           ;../ibsmon.c: 207:    switch (modbus_command) {
  1737  000274  D161               	goto	l1917
  1738  000276                     l1753:
  1739                           
  1740                           ;../ibsmon.c: 209:     req_length = sizeof(i400_freset);
  1741  000276  0E00               	movlw	0
  1742  000278  6E60               	movwf	(_req_length+1)^0,c
  1743  00027A  0E08               	movlw	8
  1744  00027C  6E5F               	movwf	_req_length^0,c
  1745                           
  1746                           ;../ibsmon.c: 210:     if ((V.recv_count >= req_length) && (cc_buffer[0] == 0x04) && (cc
      +                          _buffer[1] == 6)) {
  1747  00027E  0E07               	movlw	7
  1748  000280  6411               	cpfsgt	(_V+16)^0,c	;volatile
  1749  000282  D031               	goto	l1777
  1750  000284  0E04               	movlw	4
  1751  000286  0100               	movlb	0	; () banked
  1752  000288  1980               	xorwf	_cc_buffer& (0+255),w,b	;volatile
  1753  00028A  A4D8               	btfss	status,2,c
  1754  00028C  D02C               	goto	l1777
  1755                           
  1756                           ; BSR set to: 0
  1757  00028E  0E06               	movlw	6
  1758  000290  1981               	xorwf	(_cc_buffer+1)& (0+255),w,b	;volatile
  1759  000292  A4D8               	btfss	status,2,c
  1760  000294  D028               	goto	l1777
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;../ibsmon.c: 211:      c_crc = crc16(cc_buffer, req_length - 2);
  1764  000296  0E80               	movlw	low _cc_buffer
  1765  000298  6E32               	movwf	crc16@buffer^0,c
  1766  00029A  0E00               	movlw	0
  1767  00029C  6E34               	movwf	(crc16@buffer_length+1)^0,c
  1768  00029E  0E06               	movlw	6
  1769  0002A0  6E33               	movwf	crc16@buffer_length^0,c
  1770  0002A2  EC51  F003         	call	_crc16	;wreg free
  1771  0002A6  C032  F049         	movff	?_crc16,controller_work@c_crc
  1772  0002AA  C033  F04A         	movff	?_crc16+1,controller_work@c_crc+1
  1773                           
  1774                           ;../ibsmon.c: 212:      c_crc_rec = (uint16_t) ((uint16_t) cc_buffer[req_length - 2] << 
      +                          (uint16_t) 8) | ((uint16_t) cc_buffer[req_length - 1] & 0x00ff);
  1775  0002AE  0100               	movlb	0	; () banked
  1776  0002B0  5186               	movf	(_cc_buffer+6)& (0+255),w,b	;volatile
  1777  0002B2  6E44               	movwf	??_controller_work^0,c
  1778  0002B4  5187               	movf	(_cc_buffer+7)& (0+255),w,b	;volatile
  1779  0002B6  6E4B               	movwf	controller_work@c_crc_rec^0,c
  1780  0002B8  C044  F04C         	movff	??_controller_work,controller_work@c_crc_rec+1
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;../ibsmon.c: 213:      if (c_crc == c_crc_rec) {
  1784  0002BC  504B               	movf	controller_work@c_crc_rec^0,w,c
  1785  0002BE  1849               	xorwf	controller_work@c_crc^0,w,c
  1786  0002C0  E104               	bnz	l1769
  1787  0002C2  504C               	movf	(controller_work@c_crc_rec+1)^0,w,c
  1788  0002C4  184A               	xorwf	(controller_work@c_crc+1)^0,w,c
  1789  0002C6  B4D8               	btfsc	status,2,c
  1790  0002C8  D00B               	goto	l1775
  1791  0002CA                     l1769:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;../ibsmon.c: 216:       crc_error++;
  1795  0002CA  0E01               	movlw	1
  1796  0002CC  2659               	addwf	_crc_error^0,f,c
  1797  0002CE  0E00               	movlw	0
  1798  0002D0  225A               	addwfc	(_crc_error+1)^0,f,c
  1799  0002D2  225B               	addwfc	(_crc_error+2)^0,f,c
  1800  0002D4  225C               	addwfc	(_crc_error+3)^0,f,c
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;../ibsmon.c: 217:       V.error++;
  1804  0002D6  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  1805  0002D8  2A14               	incf	(_V+19)^0,f,c	;volatile
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;../ibsmon.c: 218:       set_led_blink(0);
  1809  0002DA  0E00               	movlw	0
  1810  0002DC  EC75  F004         	call	_set_led_blink
  1811  0002E0                     l1775:
  1812                           
  1813                           ;../ibsmon.c: 220:      cstate = CLEAR;
  1814  0002E0  0E00               	movlw	0
  1815  0002E2  6E63               	movwf	controller_work@cstate^0,c
  1816                           
  1817                           ;../ibsmon.c: 221:     } else {
  1818  0002E4  0012               	return	
  1819  0002E6                     l1777:
  1820                           
  1821                           ;../ibsmon.c: 225:      if (get_500hz(0) > 300) {
  1822  0002E6  0E00               	movlw	0
  1823  0002E8  ECEA  F003         	call	_get_500hz
  1824  0002EC  5035               	movf	(?_get_500hz+3)^0,w,c
  1825  0002EE  1034               	iorwf	(?_get_500hz+2)^0,w,c
  1826  0002F0  E106               	bnz	u860
  1827  0002F2  0E2D               	movlw	45
  1828  0002F4  5C32               	subwf	?_get_500hz^0,w,c
  1829  0002F6  0E01               	movlw	1
  1830  0002F8  5833               	subwfb	(?_get_500hz+1)^0,w,c
  1831  0002FA  A0D8               	btfss	status,0,c
  1832  0002FC  0012               	return	
  1833  0002FE                     u860:
  1834                           
  1835                           ;../ibsmon.c: 226:       cstate = CLEAR;
  1836  0002FE  0E00               	movlw	0
  1837  000300  6E63               	movwf	controller_work@cstate^0,c
  1838                           
  1839                           ;../ibsmon.c: 227:       LATAbits.LATA2 = 0;
  1840  000302  9489               	bcf	137,2,c	;volatile
  1841  000304                     
  1842                           ;../ibsmon.c: 228:       mcmd = G_MODE;
  1843  000304  0E00               	movlw	0
  1844  000306  6E64               	movwf	controller_work@mcmd^0,c
  1845                           
  1846                           ;../ibsmon.c: 229:       V.error++;
  1847  000308  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  1848  00030A  2A14               	incf	(_V+19)^0,f,c	;volatile
  1849  00030C  0012               	return	
  1850  00030E                     l1785:
  1851                           
  1852                           ;../ibsmon.c: 234:     req_length = sizeof(i400_clear);
  1853  00030E  0E00               	movlw	0
  1854  000310  6E60               	movwf	(_req_length+1)^0,c
  1855  000312  0E08               	movlw	8
  1856  000314  6E5F               	movwf	_req_length^0,c
  1857                           
  1858                           ;../ibsmon.c: 235:     if ((V.recv_count >= req_length) && (cc_buffer[0] == 0x04) && (cc
      +                          _buffer[1] == 6)) {
  1859  000316  0E07               	movlw	7
  1860  000318  6411               	cpfsgt	(_V+16)^0,c	;volatile
  1861  00031A  D02F               	goto	l1809
  1862  00031C  0E04               	movlw	4
  1863  00031E  0100               	movlb	0	; () banked
  1864  000320  1980               	xorwf	_cc_buffer& (0+255),w,b	;volatile
  1865  000322  A4D8               	btfss	status,2,c
  1866  000324  D02A               	goto	l1809
  1867                           
  1868                           ; BSR set to: 0
  1869  000326  0E06               	movlw	6
  1870  000328  1981               	xorwf	(_cc_buffer+1)& (0+255),w,b	;volatile
  1871  00032A  A4D8               	btfss	status,2,c
  1872  00032C  D026               	goto	l1809
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;../ibsmon.c: 236:      c_crc = crc16(cc_buffer, req_length - 2);
  1876  00032E  0E80               	movlw	low _cc_buffer
  1877  000330  6E32               	movwf	crc16@buffer^0,c
  1878  000332  0E00               	movlw	0
  1879  000334  6E34               	movwf	(crc16@buffer_length+1)^0,c
  1880  000336  0E06               	movlw	6
  1881  000338  6E33               	movwf	crc16@buffer_length^0,c
  1882  00033A  EC51  F003         	call	_crc16	;wreg free
  1883  00033E  C032  F049         	movff	?_crc16,controller_work@c_crc
  1884  000342  C033  F04A         	movff	?_crc16+1,controller_work@c_crc+1
  1885                           
  1886                           ;../ibsmon.c: 237:      c_crc_rec = (uint16_t) ((uint16_t) cc_buffer[req_length - 2] << 
      +                          (uint16_t) 8) | ((uint16_t) cc_buffer[req_length - 1] & 0x00ff);
  1887  000346  0100               	movlb	0	; () banked
  1888  000348  5186               	movf	(_cc_buffer+6)& (0+255),w,b	;volatile
  1889  00034A  6E44               	movwf	??_controller_work^0,c
  1890  00034C  5187               	movf	(_cc_buffer+7)& (0+255),w,b	;volatile
  1891  00034E  6E4B               	movwf	controller_work@c_crc_rec^0,c
  1892  000350  C044  F04C         	movff	??_controller_work,controller_work@c_crc_rec+1
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;../ibsmon.c: 238:      if (c_crc == c_crc_rec) {
  1896  000354  504B               	movf	controller_work@c_crc_rec^0,w,c
  1897  000356  1849               	xorwf	controller_work@c_crc^0,w,c
  1898  000358  E104               	bnz	l1801
  1899  00035A  504C               	movf	(controller_work@c_crc_rec+1)^0,w,c
  1900  00035C  184A               	xorwf	(controller_work@c_crc+1)^0,w,c
  1901  00035E  B4D8               	btfsc	status,2,c
  1902  000360  D7BF               	goto	l1775
  1903  000362                     l1801:
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;../ibsmon.c: 241:       crc_error++;
  1907  000362  0E01               	movlw	1
  1908  000364  2659               	addwf	_crc_error^0,f,c
  1909  000366  0E00               	movlw	0
  1910  000368  225A               	addwfc	(_crc_error+1)^0,f,c
  1911  00036A  225B               	addwfc	(_crc_error+2)^0,f,c
  1912  00036C  225C               	addwfc	(_crc_error+3)^0,f,c
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;../ibsmon.c: 242:       V.error++;
  1916  00036E  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  1917  000370  2A14               	incf	(_V+19)^0,f,c	;volatile
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;../ibsmon.c: 243:       set_led_blink(0);
  1921  000372  0E00               	movlw	0
  1922  000374  EC75  F004         	call	_set_led_blink
  1923  000378  D7B3               	goto	l1775
  1924  00037A                     l1809:
  1925                           
  1926                           ;../ibsmon.c: 247:      if (get_500hz(0) > 300) {
  1927  00037A  0E00               	movlw	0
  1928  00037C  ECEA  F003         	call	_get_500hz
  1929  000380  D7B5               	goto	L12
  1930  000382                     l1817:
  1931                           
  1932                           ;../ibsmon.c: 256:     req_length = sizeof(i400_error);
  1933  000382  0E00               	movlw	0
  1934  000384  6E60               	movwf	(_req_length+1)^0,c
  1935  000386  0E09               	movlw	9
  1936  000388  6E5F               	movwf	_req_length^0,c
  1937                           
  1938                           ;../ibsmon.c: 257:     if ((V.recv_count >= req_length) && (cc_buffer[0] == 0x04) && (cc
      +                          _buffer[1] == 3)) {
  1939  00038A  0E08               	movlw	8
  1940  00038C  6411               	cpfsgt	(_V+16)^0,c	;volatile
  1941  00038E  D041               	goto	l1845
  1942  000390  0E04               	movlw	4
  1943  000392  0100               	movlb	0	; () banked
  1944  000394  1980               	xorwf	_cc_buffer& (0+255),w,b	;volatile
  1945  000396  A4D8               	btfss	status,2,c
  1946  000398  D03C               	goto	l1845
  1947                           
  1948                           ; BSR set to: 0
  1949  00039A  0E03               	movlw	3
  1950  00039C  1981               	xorwf	(_cc_buffer+1)& (0+255),w,b	;volatile
  1951  00039E  A4D8               	btfss	status,2,c
  1952  0003A0  D038               	goto	l1845
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;../ibsmon.c: 258:      uint16_t temp;;../ibsmon.c: 259:      c_crc = crc16(cc_buffer, r
      +                          eq_length - 2);
  1956  0003A2  0E80               	movlw	low _cc_buffer
  1957  0003A4  6E32               	movwf	crc16@buffer^0,c
  1958  0003A6  0E00               	movlw	0
  1959  0003A8  6E34               	movwf	(crc16@buffer_length+1)^0,c
  1960  0003AA  0E07               	movlw	7
  1961  0003AC  6E33               	movwf	crc16@buffer_length^0,c
  1962  0003AE  EC51  F003         	call	_crc16	;wreg free
  1963  0003B2  C032  F049         	movff	?_crc16,controller_work@c_crc
  1964  0003B6  C033  F04A         	movff	?_crc16+1,controller_work@c_crc+1
  1965                           
  1966                           ;../ibsmon.c: 260:      c_crc_rec = (uint16_t) ((uint16_t) cc_buffer[req_length - 2] << 
      +                          (uint16_t) 8) | ((uint16_t) cc_buffer[req_length - 1] & 0x00ff);
  1967  0003BA  0100               	movlb	0	; () banked
  1968  0003BC  5187               	movf	(_cc_buffer+7)& (0+255),w,b	;volatile
  1969  0003BE  6E44               	movwf	??_controller_work^0,c
  1970  0003C0  5188               	movf	(_cc_buffer+8)& (0+255),w,b	;volatile
  1971  0003C2  6E4B               	movwf	controller_work@c_crc_rec^0,c
  1972  0003C4  C044  F04C         	movff	??_controller_work,controller_work@c_crc_rec+1
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;../ibsmon.c: 261:      if (c_crc == c_crc_rec) {
  1976  0003C8  504B               	movf	controller_work@c_crc_rec^0,w,c
  1977  0003CA  1849               	xorwf	controller_work@c_crc^0,w,c
  1978  0003CC  E116               	bnz	l1837
  1979  0003CE  504C               	movf	(controller_work@c_crc_rec+1)^0,w,c
  1980  0003D0  184A               	xorwf	(controller_work@c_crc+1)^0,w,c
  1981  0003D2  A4D8               	btfss	status,2,c
  1982  0003D4  D012               	goto	l1837
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;../ibsmon.c: 262:       if ((temp = ((uint16_t) cc_buffer[3] << 8) +((uint16_t) cc_buff
      +                          er[4]&0xff))) {
  1986  0003D6  5183               	movf	(_cc_buffer+3)& (0+255),w,b	;volatile
  1987  0003D8  6E44               	movwf	??_controller_work^0,c
  1988  0003DA  5184               	movf	(_cc_buffer+4)& (0+255),w,b	;volatile
  1989  0003DC  6E46               	movwf	controller_work@temp^0,c
  1990  0003DE  C044  F047         	movff	??_controller_work,controller_work@temp+1
  1991  0003E2  5046               	movf	controller_work@temp^0,w,c
  1992  0003E4  1047               	iorwf	(controller_work@temp+1)^0,w,c
  1993  0003E6  B4D8               	btfsc	status,2,c
  1994  0003E8  D006               	goto	l178
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;../ibsmon.c: 263:        __nop();
  1998  0003EA  F000               	nop	
  1999                           
  2000                           ;../ibsmon.c: 264:        LATAbits.LATA2 = 1;
  2001  0003EC  8489               	bsf	137,2,c	;volatile
  2002                           
  2003                           ;../ibsmon.c: 265:        set_led_blink(10);
  2004  0003EE  0E0A               	movlw	10
  2005  0003F0  EC75  F004         	call	_set_led_blink
  2006                           
  2007                           ;../ibsmon.c: 266:       } else {
  2008  0003F4  D775               	goto	l1775
  2009  0003F6                     l178:
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;../ibsmon.c: 267:        LATAbits.LATA2 = 0;
  2013  0003F6  9489               	bcf	137,2,c	;volatile
  2014  0003F8  D773               	goto	l1775
  2015  0003FA                     l1837:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;../ibsmon.c: 270:       crc_error++;
  2019  0003FA  0E01               	movlw	1
  2020  0003FC  2659               	addwf	_crc_error^0,f,c
  2021  0003FE  0E00               	movlw	0
  2022  000400  225A               	addwfc	(_crc_error+1)^0,f,c
  2023  000402  225B               	addwfc	(_crc_error+2)^0,f,c
  2024  000404  225C               	addwfc	(_crc_error+3)^0,f,c
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;../ibsmon.c: 271:       V.error++;
  2028  000406  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  2029  000408  2A14               	incf	(_V+19)^0,f,c	;volatile
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;../ibsmon.c: 272:       set_led_blink(0);
  2033  00040A  0E00               	movlw	0
  2034  00040C  EC75  F004         	call	_set_led_blink
  2035  000410  D767               	goto	l1775
  2036  000412                     l1845:
  2037                           
  2038                           ;../ibsmon.c: 276:      if (get_500hz(0) > 300) {
  2039  000412  0E00               	movlw	0
  2040  000414  ECEA  F003         	call	_get_500hz
  2041  000418  5035               	movf	(?_get_500hz+3)^0,w,c
  2042  00041A  1034               	iorwf	(?_get_500hz+2)^0,w,c
  2043  00041C  E101               	bnz	u970
  2044  00041E  D769               	goto	L11
  2045  000420                     u970:
  2046  000420  D76E               	goto	u860
  2047  000422                     l1853:
  2048                           
  2049                           ;../ibsmon.c: 286:     req_length = sizeof(i400_mode);
  2050  000422  0E00               	movlw	0
  2051  000424  6E60               	movwf	(_req_length+1)^0,c
  2052  000426  0E11               	movlw	17
  2053  000428  6E5F               	movwf	_req_length^0,c
  2054                           
  2055                           ;../ibsmon.c: 287:     if ((V.recv_count >= req_length) && (cc_buffer[0] == 0x04) && (cc
      +                          _buffer[1] == 3)) {
  2056  00042A  0E10               	movlw	16
  2057  00042C  6411               	cpfsgt	(_V+16)^0,c	;volatile
  2058  00042E  D06C               	goto	l1905
  2059  000430  0E04               	movlw	4
  2060  000432  0100               	movlb	0	; () banked
  2061  000434  1980               	xorwf	_cc_buffer& (0+255),w,b	;volatile
  2062  000436  A4D8               	btfss	status,2,c
  2063  000438  D067               	goto	l1905
  2064                           
  2065                           ; BSR set to: 0
  2066  00043A  0E03               	movlw	3
  2067  00043C  1981               	xorwf	(_cc_buffer+1)& (0+255),w,b	;volatile
  2068  00043E  A4D8               	btfss	status,2,c
  2069  000440  D063               	goto	l1905
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;../ibsmon.c: 288:      uint8_t temp;;../ibsmon.c: 289:      static uint8_t volts = 255;
      +                          ;../ibsmon.c: 291:      c_crc = crc16(cc_buffer, req_length - 2);
  2073  000442  0E80               	movlw	low _cc_buffer
  2074  000444  6E32               	movwf	crc16@buffer^0,c
  2075  000446  0E00               	movlw	0
  2076  000448  6E34               	movwf	(crc16@buffer_length+1)^0,c
  2077  00044A  0E0F               	movlw	15
  2078  00044C  6E33               	movwf	crc16@buffer_length^0,c
  2079  00044E  EC51  F003         	call	_crc16	;wreg free
  2080  000452  C032  F049         	movff	?_crc16,controller_work@c_crc
  2081  000456  C033  F04A         	movff	?_crc16+1,controller_work@c_crc+1
  2082                           
  2083                           ;../ibsmon.c: 292:      c_crc_rec = (uint16_t) ((uint16_t) cc_buffer[req_length - 2] << 
      +                          (uint16_t) 8) | ((uint16_t) cc_buffer[req_length - 1] & 0x00ff);
  2084  00045A  0100               	movlb	0	; () banked
  2085  00045C  518F               	movf	(_cc_buffer+15)& (0+255),w,b	;volatile
  2086  00045E  6E44               	movwf	??_controller_work^0,c
  2087  000460  5190               	movf	(_cc_buffer+16)& (0+255),w,b	;volatile
  2088  000462  6E4B               	movwf	controller_work@c_crc_rec^0,c
  2089  000464  C044  F04C         	movff	??_controller_work,controller_work@c_crc_rec+1
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;../ibsmon.c: 294:      if (c_crc == c_crc_rec) {
  2093  000468  504B               	movf	controller_work@c_crc_rec^0,w,c
  2094  00046A  1849               	xorwf	controller_work@c_crc^0,w,c
  2095  00046C  E13A               	bnz	l1893
  2096  00046E  504C               	movf	(controller_work@c_crc_rec+1)^0,w,c
  2097  000470  184A               	xorwf	(controller_work@c_crc+1)^0,w,c
  2098  000472  A4D8               	btfss	status,2,c
  2099  000474  D036               	goto	l1893
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;../ibsmon.c: 295:       if ((temp = cc_buffer[4])) {
  2103  000476  C084  F048         	movff	_cc_buffer+4,controller_work@temp_727	;volatile
  2104  00047A  5048               	movf	controller_work@temp_727^0,w,c
  2105  00047C  B4D8               	btfsc	status,2,c
  2106  00047E  D02B               	goto	l1889
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;../ibsmon.c: 296:        set_led_blink(temp);
  2110  000480  5048               	movf	controller_work@temp_727^0,w,c
  2111  000482  EC75  F004         	call	_set_led_blink
  2112                           
  2113                           ;../ibsmon.c: 297:        switch (temp) {
  2114  000486  D00C               	goto	l1887
  2115  000488                     l1871:
  2116                           
  2117                           ;../ibsmon.c: 299:         volts = 92;
  2118  000488  0E5C               	movlw	92
  2119  00048A  D029               	goto	L8
  2120  00048C                     l1873:
  2121                           
  2122                           ;../ibsmon.c: 302:         volts = 122;
  2123  00048C  0E7A               	movlw	122
  2124  00048E  D027               	goto	L8
  2125  000490                     l1875:
  2126                           
  2127                           ;../ibsmon.c: 305:         volts = 150;
  2128  000490  0E96               	movlw	150
  2129  000492  D025               	goto	L8
  2130  000494                     l1877:
  2131                           
  2132                           ;../ibsmon.c: 308:         volts = 177;
  2133  000494  0EB1               	movlw	177
  2134  000496  D023               	goto	L8
  2135  000498                     l1879:
  2136                           
  2137                           ;../ibsmon.c: 311:         volts = 205;
  2138  000498  0ECD               	movlw	205
  2139  00049A  D021               	goto	L8
  2140  00049C                     l1881:
  2141                           
  2142                           ;../ibsmon.c: 314:         volts = 230;
  2143  00049C  0EE6               	movlw	230
  2144  00049E  D01F               	goto	L8
  2145  0004A0                     l1887:
  2146  0004A0  5048               	movf	controller_work@temp_727^0,w,c
  2147  0004A2  6E44               	movwf	??_controller_work^0,c
  2148  0004A4  6A45               	clrf	(??_controller_work+1)^0,c
  2149                           
  2150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2151                           ; Switch size 1, requested type "simple"
  2152                           ; Number of cases is 1, Range of values is 0 to 0
  2153                           ; switch strategies available:
  2154                           ; Name         Instructions Cycles
  2155                           ; simple_byte            4     3 (average)
  2156                           ;	Chosen strategy is simple_byte
  2157  0004A6  5045               	movf	(??_controller_work+1)^0,w,c
  2158  0004A8  0A00               	xorlw	0	; case 0
  2159  0004AA  A4D8               	btfss	status,2,c
  2160  0004AC  D7ED               	goto	l1871
  2161                           
  2162                           ; Switch size 1, requested type "simple"
  2163                           ; Number of cases is 6, Range of values is 1 to 6
  2164                           ; switch strategies available:
  2165                           ; Name         Instructions Cycles
  2166                           ; simple_byte           19    10 (average)
  2167                           ;	Chosen strategy is simple_byte
  2168  0004AE  5044               	movf	??_controller_work^0,w,c
  2169  0004B0  0A01               	xorlw	1	; case 1
  2170  0004B2  B4D8               	btfsc	status,2,c
  2171  0004B4  D7E9               	goto	l1871
  2172  0004B6  0A03               	xorlw	3	; case 2
  2173  0004B8  B4D8               	btfsc	status,2,c
  2174  0004BA  D7E8               	goto	l1873
  2175  0004BC  0A01               	xorlw	1	; case 3
  2176  0004BE  B4D8               	btfsc	status,2,c
  2177  0004C0  D7E7               	goto	l1875
  2178  0004C2  0A07               	xorlw	7	; case 4
  2179  0004C4  B4D8               	btfsc	status,2,c
  2180  0004C6  D7E6               	goto	l1877
  2181  0004C8  0A01               	xorlw	1	; case 5
  2182  0004CA  B4D8               	btfsc	status,2,c
  2183  0004CC  D7E5               	goto	l1879
  2184  0004CE  0A03               	xorlw	3	; case 6
  2185  0004D0  B4D8               	btfsc	status,2,c
  2186  0004D2  D7E4               	goto	l1881
  2187  0004D4  D7D9               	goto	l1871
  2188  0004D6                     l1889:
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;../ibsmon.c: 321:        set_led_blink(255);
  2192  0004D6  0EFF               	movlw	255
  2193  0004D8  EC75  F004         	call	_set_led_blink
  2194                           
  2195                           ;../ibsmon.c: 322:        volts = 61;
  2196  0004DC  0E3D               	movlw	61
  2197  0004DE                     L8:
  2198  0004DE  6E1D               	movwf	controller_work@volts^0,c
  2199  0004E0  D00B               	goto	l1899
  2200  0004E2                     l1893:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;../ibsmon.c: 325:       crc_error++;
  2204  0004E2  0E01               	movlw	1
  2205  0004E4  2659               	addwf	_crc_error^0,f,c
  2206  0004E6  0E00               	movlw	0
  2207  0004E8  225A               	addwfc	(_crc_error+1)^0,f,c
  2208  0004EA  225B               	addwfc	(_crc_error+2)^0,f,c
  2209  0004EC  225C               	addwfc	(_crc_error+3)^0,f,c
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;../ibsmon.c: 326:       V.error++;
  2213  0004EE  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  2214  0004F0  2A14               	incf	(_V+19)^0,f,c	;volatile
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;../ibsmon.c: 327:       set_led_blink(0);
  2218  0004F2  0E00               	movlw	0
  2219  0004F4  EC75  F004         	call	_set_led_blink
  2220  0004F8                     l1899:
  2221                           
  2222                           ;../ibsmon.c: 329:      V.pwm_volts = volts;
  2223  0004F8  C01D  F012         	movff	controller_work@volts,_V+17	;volatile
  2224                           
  2225                           ;../ibsmon.c: 330:      SetDCPWM1(V.pwm_volts);
  2226  0004FC  C012  F032         	movff	_V+17,SetDCPWM1@dutycycle	;volatile
  2227  000500  6A33               	clrf	(SetDCPWM1@dutycycle+1)^0,c
  2228  000502  EC2A  F004         	call	_SetDCPWM1	;wreg free
  2229  000506  D6EC               	goto	l1775
  2230  000508                     l1905:
  2231                           
  2232                           ;../ibsmon.c: 333:      if (get_500hz(0) > 300) {
  2233  000508  0E00               	movlw	0
  2234  00050A  ECEA  F003         	call	_get_500hz
  2235  00050E  5035               	movf	(?_get_500hz+3)^0,w,c
  2236  000510  1034               	iorwf	(?_get_500hz+2)^0,w,c
  2237  000512  E106               	bnz	u1030
  2238  000514  0E2D               	movlw	45
  2239  000516  5C32               	subwf	?_get_500hz^0,w,c
  2240  000518  0E01               	movlw	1
  2241  00051A  5833               	subwfb	(?_get_500hz+1)^0,w,c
  2242  00051C  A0D8               	btfss	status,0,c
  2243  00051E  0012               	return	
  2244  000520                     u1030:
  2245                           
  2246                           ;../ibsmon.c: 334:       set_led_blink(0);
  2247  000520  0E00               	movlw	0
  2248  000522  EC75  F004         	call	_set_led_blink
  2249                           
  2250                           ;../ibsmon.c: 335:       cstate = CLEAR;
  2251  000526  0E00               	movlw	0
  2252  000528  6E63               	movwf	controller_work@cstate^0,c
  2253                           
  2254                           ;../ibsmon.c: 336:       V.pwm_volts = 255;
  2255  00052A  6812               	setf	(_V+17)^0,c	;volatile
  2256                           
  2257                           ;../ibsmon.c: 337:       SetDCPWM1(V.pwm_volts);
  2258  00052C  C012  F032         	movff	_V+17,SetDCPWM1@dutycycle	;volatile
  2259  000530  6A33               	clrf	(SetDCPWM1@dutycycle+1)^0,c
  2260  000532  EC2A  F004         	call	_SetDCPWM1	;wreg free
  2261  000536  D6E6               	goto	L9
  2262  000538                     l1917:
  2263  000538  5062               	movf	controller_work@modbus_command^0,w,c
  2264  00053A  6E44               	movwf	??_controller_work^0,c
  2265  00053C  6A45               	clrf	(??_controller_work+1)^0,c
  2266                           
  2267                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2268                           ; Switch size 1, requested type "simple"
  2269                           ; Number of cases is 1, Range of values is 0 to 0
  2270                           ; switch strategies available:
  2271                           ; Name         Instructions Cycles
  2272                           ; simple_byte            4     3 (average)
  2273                           ;	Chosen strategy is simple_byte
  2274  00053E  5045               	movf	(??_controller_work+1)^0,w,c
  2275  000540  0A00               	xorlw	0	; case 0
  2276  000542  A4D8               	btfss	status,2,c
  2277  000544  D76E               	goto	l1853
  2278                           
  2279                           ; Switch size 1, requested type "simple"
  2280                           ; Number of cases is 4, Range of values is 0 to 3
  2281                           ; switch strategies available:
  2282                           ; Name         Instructions Cycles
  2283                           ; simple_byte           13     7 (average)
  2284                           ;	Chosen strategy is simple_byte
  2285  000546  5044               	movf	??_controller_work^0,w,c
  2286  000548  0A00               	xorlw	0	; case 0
  2287  00054A  B4D8               	btfsc	status,2,c
  2288  00054C  D76A               	goto	l1853
  2289  00054E  0A01               	xorlw	1	; case 1
  2290  000550  B4D8               	btfsc	status,2,c
  2291  000552  D717               	goto	l1817
  2292  000554  0A03               	xorlw	3	; case 2
  2293  000556  B4D8               	btfsc	status,2,c
  2294  000558  D6DA               	goto	l1785
  2295  00055A  0A01               	xorlw	1	; case 3
  2296  00055C  B4D8               	btfsc	status,2,c
  2297  00055E  D68B               	goto	l1753
  2298  000560  D760               	goto	l1853
  2299  000562                     l1921:
  2300  000562  5063               	movf	controller_work@cstate^0,w,c
  2301  000564  6E44               	movwf	??_controller_work^0,c
  2302  000566  6A45               	clrf	(??_controller_work+1)^0,c
  2303                           
  2304                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2305                           ; Switch size 1, requested type "simple"
  2306                           ; Number of cases is 1, Range of values is 0 to 0
  2307                           ; switch strategies available:
  2308                           ; Name         Instructions Cycles
  2309                           ; simple_byte            4     3 (average)
  2310                           ;	Chosen strategy is simple_byte
  2311  000568  5045               	movf	(??_controller_work+1)^0,w,c
  2312  00056A  0A00               	xorlw	0	; case 0
  2313  00056C  A4D8               	btfss	status,2,c
  2314  00056E  0012               	return	
  2315                           
  2316                           ; Switch size 1, requested type "simple"
  2317                           ; Number of cases is 4, Range of values is 0 to 3
  2318                           ; switch strategies available:
  2319                           ; Name         Instructions Cycles
  2320                           ; simple_byte           13     7 (average)
  2321                           ;	Chosen strategy is simple_byte
  2322  000570  5044               	movf	??_controller_work^0,w,c
  2323  000572  0A00               	xorlw	0	; case 0
  2324  000574  B4D8               	btfsc	status,2,c
  2325  000576  D5A0               	goto	l1681
  2326  000578  0A01               	xorlw	1	; case 1
  2327  00057A  B4D8               	btfsc	status,2,c
  2328  00057C  D634               	goto	l1723
  2329  00057E  0A03               	xorlw	3	; case 2
  2330  000580  B4D8               	btfsc	status,2,c
  2331  000582  D64A               	goto	l1739
  2332  000584  0A01               	xorlw	1	; case 3
  2333  000586  A4D8               	btfss	status,2,c
  2334  000588  0012               	return	
  2335  00058A  D667               	goto	l1749
  2336  00058C                     __end_of_controller_work:
  2337                           	callstack 0
  2338                           
  2339 ;; *************** function _set_led_blink *****************
  2340 ;; Defined at:
  2341 ;;		line 163 in file "../ihc_vector.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  blinks          1    wreg     unsigned char 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  blinks          1    8[COMRAM] unsigned char 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      _Bool 
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0
  2355 ;;      Params:         0       0
  2356 ;;      Locals:         1       0
  2357 ;;      Temps:          0       0
  2358 ;;      Totals:         1       0
  2359 ;;Total ram usage:        1 bytes
  2360 ;; Hardware stack levels used: 1
  2361 ;; Hardware stack levels required when called: 2
  2362 ;; This function calls:
  2363 ;;		Nothing
  2364 ;; This function is called by:
  2365 ;;		_controller_work
  2366 ;;		_init_i400mon
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text4
  2371  0008EA                     __ptext4:
  2372                           	callstack 0
  2373  0008EA                     _set_led_blink:
  2374                           	callstack 27
  2375                           
  2376                           ;incstack = 0
  2377                           ;set_led_blink@blinks stored from wreg
  2378  0008EA  6E32               	movwf	set_led_blink@blinks^0,c
  2379                           
  2380                           ;../ihc_vector.c: 163: _Bool set_led_blink(uint8_t blinks);../ihc_vector.c: 164: {;../ih
      +                          c_vector.c: 165:  if (V.blink_lock) {
  2381  0008EC  B00F               	btfsc	(_V+14)^0,0,c	;volatile
  2382  0008EE  0012               	return	
  2383                           
  2384                           ;../ihc_vector.c: 169:  if (blinks > 10 && (blinks != 255)) {
  2385  0008F0  0E0A               	movlw	10
  2386  0008F2  6432               	cpfsgt	set_led_blink@blinks^0,c
  2387  0008F4  D005               	goto	l1669
  2388  0008F6  2832               	incf	set_led_blink@blinks^0,w,c
  2389  0008F8  B4D8               	btfsc	status,2,c
  2390  0008FA  D002               	goto	l1669
  2391                           
  2392                           ;../ihc_vector.c: 170:   blinks = 0;
  2393  0008FC  0E00               	movlw	0
  2394  0008FE  6E32               	movwf	set_led_blink@blinks^0,c
  2395  000900                     l1669:
  2396                           
  2397                           ;../ihc_vector.c: 173:  INTCONbits.GIEH = 0;
  2398  000900  9EF2               	bcf	242,7,c	;volatile
  2399                           
  2400                           ;../ihc_vector.c: 174:  V.blink_lock = 1;
  2401  000902  800F               	bsf	(_V+14)^0,0,c	;volatile
  2402                           
  2403                           ;../ihc_vector.c: 175:  V.num_blinks = blinks;
  2404  000904  C032  F00E         	movff	set_led_blink@blinks,_V+13	;volatile
  2405                           
  2406                           ;../ihc_vector.c: 176:  INTCONbits.GIEH = 1;
  2407  000908  8EF2               	bsf	242,7,c	;volatile
  2408  00090A  0012               	return		;funcret
  2409  00090C                     __end_of_set_led_blink:
  2410                           	callstack 0
  2411                           
  2412 ;; *************** function _modbus_rtu_send_msg *****************
  2413 ;; Defined at:
  2414 ;;		line 85 in file "../crc.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  cc_buffer       1   21[COMRAM] PTR void 
  2417 ;;		 -> cc_buffer(64), 
  2418 ;;  modbus_cc_mo    2   22[COMRAM] PTR const void 
  2419 ;;		 -> modbus_cc_mode(6), modbus_cc_error(6), modbus_cc_clear(6), modbus_cc_freset(6), 
  2420 ;;  req_length      2   24[COMRAM] unsigned short 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  2   21[COMRAM] unsigned short 
  2425 ;; Registers used:
  2426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0
  2432 ;;      Params:         5       0
  2433 ;;      Locals:         0       0
  2434 ;;      Temps:          0       0
  2435 ;;      Totals:         5       0
  2436 ;;Total ram usage:        5 bytes
  2437 ;; Hardware stack levels used: 1
  2438 ;; Hardware stack levels required when called: 4
  2439 ;; This function calls:
  2440 ;;		_memcpy
  2441 ;;		_modbus_rtu_send_msg_crc
  2442 ;; This function is called by:
  2443 ;;		_controller_work
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text5
  2448  00088E                     __ptext5:
  2449                           	callstack 0
  2450  00088E                     _modbus_rtu_send_msg:
  2451                           	callstack 25
  2452                           
  2453                           ;../crc.c: 85: uint16_t modbus_rtu_send_msg(void *cc_buffer, const void *modbus_cc_mode,
      +                           uint16_t req_length);../crc.c: 86: {;../crc.c: 87:  memcpy((void*) cc_buffer, (const vo
      +                          id *) modbus_cc_mode, req_length);
  2454                           
  2455                           ;incstack = 0
  2456  00088E  C03F  F032         	movff	modbus_rtu_send_msg@cc_buffer,memcpy@d1
  2457  000892  C040  F033         	movff	modbus_rtu_send_msg@modbus_cc_mode,memcpy@s1
  2458  000896  C041  F034         	movff	modbus_rtu_send_msg@modbus_cc_mode+1,memcpy@s1+1
  2459  00089A  C042  F035         	movff	modbus_rtu_send_msg@req_length,memcpy@n
  2460  00089E  C043  F036         	movff	modbus_rtu_send_msg@req_length+1,memcpy@n+1
  2461  0008A2  EC7D  F003         	call	_memcpy	;wreg free
  2462                           
  2463                           ;../crc.c: 91:  return modbus_rtu_send_msg_crc((volatile uint8_t *) cc_buffer, req_lengt
      +                          h);
  2464  0008A6  C03F  F03A         	movff	modbus_rtu_send_msg@cc_buffer,modbus_rtu_send_msg_crc@req
  2465  0008AA  C042  F03B         	movff	modbus_rtu_send_msg@req_length,modbus_rtu_send_msg_crc@req_length
  2466  0008AE  C043  F03C         	movff	modbus_rtu_send_msg@req_length+1,modbus_rtu_send_msg_crc@req_length+1
  2467  0008B2  ECC9  F003         	call	_modbus_rtu_send_msg_crc	;wreg free
  2468  0008B6  C03A  F03F         	movff	?_modbus_rtu_send_msg_crc,?_modbus_rtu_send_msg
  2469  0008BA  C03B  F040         	movff	?_modbus_rtu_send_msg_crc+1,?_modbus_rtu_send_msg+1
  2470  0008BE  0012               	return		;funcret
  2471  0008C0                     __end_of_modbus_rtu_send_msg:
  2472                           	callstack 0
  2473                           
  2474 ;; *************** function _modbus_rtu_send_msg_crc *****************
  2475 ;; Defined at:
  2476 ;;		line 71 in file "../crc.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  req             1   16[COMRAM] PTR volatile unsigned ch
  2479 ;;		 -> cc_buffer(64), 
  2480 ;;  req_length      2   17[COMRAM] unsigned short 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  crc             2   19[COMRAM] unsigned short 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  2   16[COMRAM] unsigned short 
  2485 ;; Registers used:
  2486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0
  2492 ;;      Params:         3       0
  2493 ;;      Locals:         2       0
  2494 ;;      Temps:          0       0
  2495 ;;      Totals:         5       0
  2496 ;;Total ram usage:        5 bytes
  2497 ;; Hardware stack levels used: 1
  2498 ;; Hardware stack levels required when called: 3
  2499 ;; This function calls:
  2500 ;;		_crc16
  2501 ;; This function is called by:
  2502 ;;		_modbus_rtu_send_msg
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text6
  2507  000792                     __ptext6:
  2508                           	callstack 0
  2509  000792                     _modbus_rtu_send_msg_crc:
  2510                           	callstack 25
  2511                           
  2512                           ;../crc.c: 71: static uint16_t modbus_rtu_send_msg_crc(volatile uint8_t *req, uint16_t r
      +                          eq_length);../crc.c: 72: {;../crc.c: 73:  uint16_t crc;;../crc.c: 75:  crc = crc16(req, 
      +                          req_length);
  2513                           
  2514                           ;incstack = 0
  2515  000792  C03A  F032         	movff	modbus_rtu_send_msg_crc@req,crc16@buffer
  2516  000796  C03B  F033         	movff	modbus_rtu_send_msg_crc@req_length,crc16@buffer_length
  2517  00079A  C03C  F034         	movff	modbus_rtu_send_msg_crc@req_length+1,crc16@buffer_length+1
  2518  00079E  EC51  F003         	call	_crc16	;wreg free
  2519  0007A2  C032  F03D         	movff	?_crc16,modbus_rtu_send_msg_crc@crc
  2520  0007A6  C033  F03E         	movff	?_crc16+1,modbus_rtu_send_msg_crc@crc+1
  2521                           
  2522                           ;../crc.c: 76:  req[req_length++] = crc >> (uint16_t) 8;
  2523  0007AA  503A               	movf	modbus_rtu_send_msg_crc@req^0,w,c
  2524  0007AC  243B               	addwf	modbus_rtu_send_msg_crc@req_length^0,w,c
  2525  0007AE  6ED9               	movwf	fsr2l,c
  2526  0007B0  6ADA               	clrf	fsr2h,c
  2527  0007B2  C03E  FFDF         	movff	modbus_rtu_send_msg_crc@crc+1,indf2
  2528  0007B6  4A3B               	infsnz	modbus_rtu_send_msg_crc@req_length^0,f,c
  2529  0007B8  2A3C               	incf	(modbus_rtu_send_msg_crc@req_length+1)^0,f,c
  2530                           
  2531                           ;../crc.c: 77:  req[req_length++] = crc & 0x00FF;
  2532  0007BA  503A               	movf	modbus_rtu_send_msg_crc@req^0,w,c
  2533  0007BC  243B               	addwf	modbus_rtu_send_msg_crc@req_length^0,w,c
  2534  0007BE  6ED9               	movwf	fsr2l,c
  2535  0007C0  6ADA               	clrf	fsr2h,c
  2536  0007C2  C03D  FFDF         	movff	modbus_rtu_send_msg_crc@crc,indf2
  2537  0007C6  4A3B               	infsnz	modbus_rtu_send_msg_crc@req_length^0,f,c
  2538  0007C8  2A3C               	incf	(modbus_rtu_send_msg_crc@req_length+1)^0,f,c
  2539                           
  2540                           ;../crc.c: 79:  return req_length;
  2541  0007CA  C03B  F03A         	movff	modbus_rtu_send_msg_crc@req_length,?_modbus_rtu_send_msg_crc
  2542  0007CE  C03C  F03B         	movff	modbus_rtu_send_msg_crc@req_length+1,?_modbus_rtu_send_msg_crc+1
  2543  0007D2  0012               	return		;funcret
  2544  0007D4                     __end_of_modbus_rtu_send_msg_crc:
  2545                           	callstack 0
  2546                           
  2547 ;; *************** function _crc16 *****************
  2548 ;; Defined at:
  2549 ;;		line 94 in file "../crc.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  buffer          1    8[COMRAM] PTR volatile unsigned ch
  2552 ;;		 -> cc_buffer(64), 
  2553 ;;  buffer_lengt    2    9[COMRAM] unsigned short 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  crc_lo          1   15[COMRAM] unsigned char 
  2556 ;;  crc_hi          1   14[COMRAM] unsigned char 
  2557 ;;  i               1   13[COMRAM] unsigned char 
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  2    8[COMRAM] unsigned short 
  2560 ;; Registers used:
  2561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0
  2567 ;;      Params:         3       0
  2568 ;;      Locals:         3       0
  2569 ;;      Temps:          2       0
  2570 ;;      Totals:         8       0
  2571 ;;Total ram usage:        8 bytes
  2572 ;; Hardware stack levels used: 1
  2573 ;; Hardware stack levels required when called: 2
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_controller_work
  2578 ;;		_modbus_rtu_send_msg_crc
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text7
  2583  0006A2                     __ptext7:
  2584                           	callstack 0
  2585  0006A2                     _crc16:
  2586                           	callstack 25
  2587                           
  2588                           ;../crc.c: 94: uint16_t crc16(volatile uint8_t *buffer, uint16_t buffer_length);../crc.c
      +                          : 95: {;../crc.c: 96:  uint8_t crc_hi = 0xFF;
  2589                           
  2590                           ;incstack = 0
  2591  0006A2  6838               	setf	crc16@crc_hi^0,c
  2592                           
  2593                           ;../crc.c: 97:  uint8_t crc_lo = 0xFF;
  2594  0006A4  6839               	setf	crc16@crc_lo^0,c
  2595                           
  2596                           ;../crc.c: 98:  uint8_t i;;../crc.c: 101:  while (buffer_length--) {
  2597  0006A6  D01A               	goto	l1589
  2598  0006A8                     l1581:
  2599                           
  2600                           ;../crc.c: 102:   i = crc_hi ^ *buffer++;
  2601  0006A8  5032               	movf	crc16@buffer^0,w,c
  2602  0006AA  6ED9               	movwf	fsr2l,c
  2603  0006AC  6ADA               	clrf	fsr2h,c
  2604  0006AE  50DF               	movf	indf2,w,c
  2605  0006B0  1838               	xorwf	crc16@crc_hi^0,w,c
  2606  0006B2  6E37               	movwf	crc16@i^0,c
  2607  0006B4  2A32               	incf	crc16@buffer^0,f,c
  2608                           
  2609                           ;../crc.c: 103:   crc_hi = crc_lo ^ table_crc_hi[i];
  2610  0006B6  0EAF               	movlw	low _table_crc_hi
  2611  0006B8  2437               	addwf	crc16@i^0,w,c
  2612  0006BA  6EF6               	movwf	tblptrl,c
  2613  0006BC  6AF7               	clrf	tblptrh,c
  2614  0006BE  0E1E               	movlw	high _table_crc_hi
  2615  0006C0  22F7               	addwfc	tblptrh,f,c
  2616  0006C2                     	if	0	;There are less than 3 active tblptr bytes
  2617  0006C2                     	endif
  2618  0006C2  0008               	tblrd		*
  2619  0006C4  50F5               	movf	tablat,w,c
  2620  0006C6  1839               	xorwf	crc16@crc_lo^0,w,c
  2621  0006C8  6E38               	movwf	crc16@crc_hi^0,c
  2622                           
  2623                           ;../crc.c: 104:   crc_lo = table_crc_lo[i];
  2624  0006CA  0EAF               	movlw	low _table_crc_lo
  2625  0006CC  2437               	addwf	crc16@i^0,w,c
  2626  0006CE  6EF6               	movwf	tblptrl,c
  2627  0006D0  6AF7               	clrf	tblptrh,c
  2628  0006D2  0E1D               	movlw	high _table_crc_lo
  2629  0006D4  22F7               	addwfc	tblptrh,f,c
  2630  0006D6                     	if	0	;There are less than 3 active tblptr bytes
  2631  0006D6                     	endif
  2632  0006D6  0008               	tblrd		*
  2633  0006D8  CFF5 F039          	movff	tablat,crc16@crc_lo
  2634  0006DC                     l1589:
  2635                           
  2636                           ;../crc.c: 101:  while (buffer_length--) {
  2637  0006DC  0633               	decf	crc16@buffer_length^0,f,c
  2638  0006DE  A0D8               	btfss	status,0,c
  2639  0006E0  0634               	decf	(crc16@buffer_length+1)^0,f,c
  2640  0006E2  2833               	incf	crc16@buffer_length^0,w,c
  2641  0006E4  E1E1               	bnz	l1581
  2642  0006E6  2834               	incf	(crc16@buffer_length+1)^0,w,c
  2643  0006E8  A4D8               	btfss	status,2,c
  2644  0006EA  D7DE               	goto	l1581
  2645                           
  2646                           ;../crc.c: 107:  return((uint16_t) crc_hi << (uint16_t) 8 | (uint16_t) crc_lo);
  2647  0006EC  5038               	movf	crc16@crc_hi^0,w,c
  2648  0006EE  6E35               	movwf	??_crc16^0,c
  2649  0006F0  5039               	movf	crc16@crc_lo^0,w,c
  2650  0006F2  6E32               	movwf	?_crc16^0,c
  2651  0006F4  C035  F033         	movff	??_crc16,?_crc16+1
  2652  0006F8  0012               	return		;funcret
  2653  0006FA                     __end_of_crc16:
  2654                           	callstack 0
  2655                           
  2656 ;; *************** function _memcpy *****************
  2657 ;; Defined at:
  2658 ;;		line 4 in file "/opt/microchip/xc8/v2.35/pic/sources/c99/common/memcpy.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  d1              1    8[COMRAM] PTR void 
  2661 ;;		 -> cc_buffer(64), 
  2662 ;;  s1              2    9[COMRAM] PTR const void 
  2663 ;;		 -> modbus_cc_mode(6), modbus_cc_error(6), modbus_cc_clear(6), modbus_cc_freset(6), 
  2664 ;;  n               2   11[COMRAM] unsigned int 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2667 ;;		 -> modbus_cc_mode(6), modbus_cc_error(6), modbus_cc_clear(6), modbus_cc_freset(6), 
  2668 ;;  d               1   16[COMRAM] PTR unsigned char 
  2669 ;;		 -> cc_buffer(64), 
  2670 ;;  tmp             1   15[COMRAM] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      PTR void 
  2673 ;; Registers used:
  2674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0
  2680 ;;      Params:         5       0
  2681 ;;      Locals:         4       0
  2682 ;;      Temps:          0       0
  2683 ;;      Totals:         9       0
  2684 ;;Total ram usage:        9 bytes
  2685 ;; Hardware stack levels used: 1
  2686 ;; Hardware stack levels required when called: 2
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_modbus_rtu_send_msg
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text8
  2695  0006FA                     __ptext8:
  2696                           	callstack 0
  2697  0006FA                     _memcpy:
  2698                           	callstack 26
  2699                           
  2700                           ;incstack = 0
  2701  0006FA  C033  F037         	movff	memcpy@s1,memcpy@s
  2702  0006FE  C034  F038         	movff	memcpy@s1+1,memcpy@s+1
  2703  000702  C032  F03A         	movff	memcpy@d1,memcpy@d
  2704  000706  D019               	goto	l1619
  2705  000708                     l1611:
  2706  000708  C037  FFF6         	movff	memcpy@s,tblptrl
  2707  00070C  C038  FFF7         	movff	memcpy@s+1,tblptrh
  2708  000710  6AF8               	clrf	tblptru,c
  2709  000712  0E00               	movlw	(high __ramtop+-1)
  2710  000714  64F7               	cpfsgt	tblptrh,c
  2711  000716  D003               	bra	u637
  2712  000718  0008               	tblrd		*
  2713  00071A  50F5               	movf	tablat,w,c
  2714  00071C  D005               	bra	u630
  2715  00071E                     u637:
  2716  00071E  CFF6 FFD9          	movff	tblptrl,fsr2l
  2717  000722  CFF7 FFDA          	movff	tblptrh,fsr2h
  2718  000726  50DF               	movf	indf2,w,c
  2719  000728                     u630:
  2720  000728  6E39               	movwf	memcpy@tmp^0,c
  2721  00072A  4A37               	infsnz	memcpy@s^0,f,c
  2722  00072C  2A38               	incf	(memcpy@s+1)^0,f,c
  2723  00072E  503A               	movf	memcpy@d^0,w,c
  2724  000730  6ED9               	movwf	fsr2l,c
  2725  000732  6ADA               	clrf	fsr2h,c
  2726  000734  C039  FFDF         	movff	memcpy@tmp,indf2
  2727  000738  2A3A               	incf	memcpy@d^0,f,c
  2728  00073A                     l1619:
  2729  00073A  0635               	decf	memcpy@n^0,f,c
  2730  00073C  A0D8               	btfss	status,0,c
  2731  00073E  0636               	decf	(memcpy@n+1)^0,f,c
  2732  000740  2835               	incf	memcpy@n^0,w,c
  2733  000742  E1E2               	bnz	l1611
  2734  000744  2836               	incf	(memcpy@n+1)^0,w,c
  2735  000746  B4D8               	btfsc	status,2,c
  2736  000748  0012               	return	
  2737  00074A  D7DE               	goto	l1611
  2738  00074C                     __end_of_memcpy:
  2739                           	callstack 0
  2740                           
  2741 ;; *************** function _get_500hz *****************
  2742 ;; Defined at:
  2743 ;;		line 114 in file "../ihc_vector.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  mode            1    wreg     unsigned char 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  mode            1   12[COMRAM] unsigned char 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  4    8[COMRAM] unsigned long 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0
  2757 ;;      Params:         4       0
  2758 ;;      Locals:         1       0
  2759 ;;      Temps:          0       0
  2760 ;;      Totals:         5       0
  2761 ;;Total ram usage:        5 bytes
  2762 ;; Hardware stack levels used: 1
  2763 ;; Hardware stack levels required when called: 2
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_controller_work
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text9
  2772  0007D4                     __ptext9:
  2773                           	callstack 0
  2774  0007D4                     _get_500hz:
  2775                           	callstack 27
  2776                           
  2777                           ;incstack = 0
  2778                           ;get_500hz@mode stored from wreg
  2779  0007D4  6E36               	movwf	get_500hz@mode^0,c
  2780                           
  2781                           ;../ihc_vector.c: 114: uint32_t get_500hz(uint8_t mode);../ihc_vector.c: 115: {;../ihc_v
      +                          ector.c: 116:  static uint32_t tmp = 0;;../ihc_vector.c: 118:  if (mode) {
  2782  0007D6  5036               	movf	get_500hz@mode^0,w,c
  2783  0007D8  B4D8               	btfsc	status,2,c
  2784  0007DA  D009               	goto	l293
  2785                           
  2786                           ;../ihc_vector.c: 119:   return tmp;
  2787  0007DC  C04D  F032         	movff	get_500hz@tmp,?_get_500hz
  2788  0007E0  C04E  F033         	movff	get_500hz@tmp+1,?_get_500hz+1
  2789  0007E4  C04F  F034         	movff	get_500hz@tmp+2,?_get_500hz+2
  2790  0007E8  C050  F035         	movff	get_500hz@tmp+3,?_get_500hz+3
  2791  0007EC  0012               	return	
  2792  0007EE                     l293:
  2793                           
  2794                           ;../ihc_vector.c: 122:  INTCONbits.GIEH = 0;
  2795  0007EE  9EF2               	bcf	242,7,c	;volatile
  2796                           
  2797                           ;../ihc_vector.c: 123:  tmp = V.clock_500hz;
  2798  0007F0  C001  F04D         	movff	_V,get_500hz@tmp	;volatile
  2799  0007F4  C002  F04E         	movff	_V+1,get_500hz@tmp+1	;volatile
  2800  0007F8  C003  F04F         	movff	_V+2,get_500hz@tmp+2	;volatile
  2801  0007FC  C004  F050         	movff	_V+3,get_500hz@tmp+3	;volatile
  2802                           
  2803                           ;../ihc_vector.c: 124:  INTCONbits.GIEH = 1;
  2804  000800  8EF2               	bsf	242,7,c	;volatile
  2805                           
  2806                           ;../ihc_vector.c: 125:  return tmp;
  2807  000802  C04D  F032         	movff	get_500hz@tmp,?_get_500hz
  2808  000806  C04E  F033         	movff	get_500hz@tmp+1,?_get_500hz+1
  2809  00080A  C04F  F034         	movff	get_500hz@tmp+2,?_get_500hz+2
  2810  00080E  C050  F035         	movff	get_500hz@tmp+3,?_get_500hz+3
  2811  000812  0012               	return		;funcret
  2812  000814                     __end_of_get_500hz:
  2813                           	callstack 0
  2814                           
  2815 ;; *************** function _get_2hz *****************
  2816 ;; Defined at:
  2817 ;;		line 86 in file "../ihc_vector.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  mode            1    wreg     unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  mode            1    8[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  4   16[None  ] unsigned long 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0
  2831 ;;      Params:         0       0
  2832 ;;      Locals:         1       0
  2833 ;;      Temps:          0       0
  2834 ;;      Totals:         1       0
  2835 ;;Total ram usage:        1 bytes
  2836 ;; Hardware stack levels used: 1
  2837 ;; Hardware stack levels required when called: 2
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_controller_work
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text10
  2846  00090C                     __ptext10:
  2847                           	callstack 0
  2848  00090C                     _get_2hz:
  2849                           	callstack 27
  2850                           
  2851                           ;incstack = 0
  2852                           ;get_2hz@mode stored from wreg
  2853  00090C  6E32               	movwf	get_2hz@mode^0,c
  2854                           
  2855                           ;../ihc_vector.c: 86: uint32_t get_2hz(uint8_t mode);../ihc_vector.c: 87: {;../ihc_vecto
      +                          r.c: 88:  static uint32_t tmp = 0;;../ihc_vector.c: 90:  if (mode) {
  2856  00090E  5032               	movf	get_2hz@mode^0,w,c
  2857  000910  A4D8               	btfss	status,2,c
  2858  000912  0012               	return	
  2859                           
  2860                           ;../ihc_vector.c: 94:  INTCONbits.GIEH = 0;
  2861                           
  2862                           ;../ihc_vector.c: 92:  }
  2863  000914  9EF2               	bcf	242,7,c	;volatile
  2864                           
  2865                           ;../ihc_vector.c: 95:  tmp = V.clock_2hz;
  2866  000916  C009  F055         	movff	_V+8,get_2hz@tmp	;volatile
  2867  00091A  C00A  F056         	movff	_V+9,get_2hz@tmp+1	;volatile
  2868  00091E  C00B  F057         	movff	_V+10,get_2hz@tmp+2	;volatile
  2869  000922  C00C  F058         	movff	_V+11,get_2hz@tmp+3	;volatile
  2870                           
  2871                           ;../ihc_vector.c: 96:  INTCONbits.GIEH = 1;
  2872  000926  8EF2               	bsf	242,7,c	;volatile
  2873                           
  2874                           ;../ihc_vector.c: 97:  return tmp;;	Return value of _get_2hz is never used
  2875  000928  0012               	return		;funcret
  2876  00092A                     __end_of_get_2hz:
  2877                           	callstack 0
  2878                           
  2879 ;; *************** function _get_10hz *****************
  2880 ;; Defined at:
  2881 ;;		line 100 in file "../ihc_vector.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  mode            1    wreg     unsigned char 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  mode            1   12[COMRAM] unsigned char 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  4    8[COMRAM] unsigned long 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0
  2895 ;;      Params:         4       0
  2896 ;;      Locals:         1       0
  2897 ;;      Temps:          0       0
  2898 ;;      Totals:         5       0
  2899 ;;Total ram usage:        5 bytes
  2900 ;; Hardware stack levels used: 1
  2901 ;; Hardware stack levels required when called: 2
  2902 ;; This function calls:
  2903 ;;		Nothing
  2904 ;; This function is called by:
  2905 ;;		_controller_work
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text11
  2910  000814                     __ptext11:
  2911                           	callstack 0
  2912  000814                     _get_10hz:
  2913                           	callstack 27
  2914                           
  2915                           ;incstack = 0
  2916                           ;get_10hz@mode stored from wreg
  2917  000814  6E36               	movwf	get_10hz@mode^0,c
  2918                           
  2919                           ;../ihc_vector.c: 100: uint32_t get_10hz(uint8_t mode);../ihc_vector.c: 101: {;../ihc_ve
      +                          ctor.c: 102:  static uint32_t tmp = 0;;../ihc_vector.c: 104:  if (mode) {
  2920  000816  5036               	movf	get_10hz@mode^0,w,c
  2921  000818  B4D8               	btfsc	status,2,c
  2922  00081A  D009               	goto	l287
  2923                           
  2924                           ;../ihc_vector.c: 105:   return tmp;
  2925  00081C  C051  F032         	movff	get_10hz@tmp,?_get_10hz
  2926  000820  C052  F033         	movff	get_10hz@tmp+1,?_get_10hz+1
  2927  000824  C053  F034         	movff	get_10hz@tmp+2,?_get_10hz+2
  2928  000828  C054  F035         	movff	get_10hz@tmp+3,?_get_10hz+3
  2929  00082C  0012               	return	
  2930  00082E                     l287:
  2931                           
  2932                           ;../ihc_vector.c: 108:  INTCONbits.GIEH = 0;
  2933  00082E  9EF2               	bcf	242,7,c	;volatile
  2934                           
  2935                           ;../ihc_vector.c: 109:  tmp = V.clock_10hz;
  2936  000830  C005  F051         	movff	_V+4,get_10hz@tmp	;volatile
  2937  000834  C006  F052         	movff	_V+5,get_10hz@tmp+1	;volatile
  2938  000838  C007  F053         	movff	_V+6,get_10hz@tmp+2	;volatile
  2939  00083C  C008  F054         	movff	_V+7,get_10hz@tmp+3	;volatile
  2940                           
  2941                           ;../ihc_vector.c: 110:  INTCONbits.GIEH = 1;
  2942  000840  8EF2               	bsf	242,7,c	;volatile
  2943                           
  2944                           ;../ihc_vector.c: 111:  return tmp;
  2945  000842  C051  F032         	movff	get_10hz@tmp,?_get_10hz
  2946  000846  C052  F033         	movff	get_10hz@tmp+1,?_get_10hz+1
  2947  00084A  C053  F034         	movff	get_10hz@tmp+2,?_get_10hz+2
  2948  00084E  C054  F035         	movff	get_10hz@tmp+3,?_get_10hz+3
  2949  000852  0012               	return		;funcret
  2950  000854                     __end_of_get_10hz:
  2951                           	callstack 0
  2952                           
  2953 ;; *************** function _clear_500hz *****************
  2954 ;; Defined at:
  2955 ;;		line 79 in file "../ihc_vector.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;		None
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg, status,2
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0
  2969 ;;      Params:         0       0
  2970 ;;      Locals:         0       0
  2971 ;;      Temps:          0       0
  2972 ;;      Totals:         0       0
  2973 ;;Total ram usage:        0 bytes
  2974 ;; Hardware stack levels used: 1
  2975 ;; Hardware stack levels required when called: 2
  2976 ;; This function calls:
  2977 ;;		Nothing
  2978 ;; This function is called by:
  2979 ;;		_controller_work
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text12
  2984  00092A                     __ptext12:
  2985                           	callstack 0
  2986  00092A                     _clear_500hz:
  2987                           	callstack 27
  2988                           
  2989                           ;../ihc_vector.c: 81:  INTCONbits.GIEH = 0;
  2990                           
  2991                           ;incstack = 0
  2992  00092A  9EF2               	bcf	242,7,c	;volatile
  2993                           
  2994                           ;../ihc_vector.c: 82:  V.clock_500hz = 0;
  2995  00092C  0E00               	movlw	0
  2996  00092E  6E01               	movwf	_V^0,c	;volatile
  2997  000930  0E00               	movlw	0
  2998  000932  6E02               	movwf	(_V+1)^0,c	;volatile
  2999  000934  0E00               	movlw	0
  3000  000936  6E03               	movwf	(_V+2)^0,c	;volatile
  3001  000938  0E00               	movlw	0
  3002  00093A  6E04               	movwf	(_V+3)^0,c	;volatile
  3003                           
  3004                           ;../ihc_vector.c: 83:  INTCONbits.GIEH = 1;
  3005  00093C  8EF2               	bsf	242,7,c	;volatile
  3006  00093E  0012               	return		;funcret
  3007  000940                     __end_of_clear_500hz:
  3008                           	callstack 0
  3009                           
  3010 ;; *************** function _clear_2hz *****************
  3011 ;; Defined at:
  3012 ;;		line 65 in file "../ihc_vector.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;		None
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, status,2
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0
  3026 ;;      Params:         0       0
  3027 ;;      Locals:         0       0
  3028 ;;      Temps:          0       0
  3029 ;;      Totals:         0       0
  3030 ;;Total ram usage:        0 bytes
  3031 ;; Hardware stack levels used: 1
  3032 ;; Hardware stack levels required when called: 2
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_controller_work
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text13
  3041  000940                     __ptext13:
  3042                           	callstack 0
  3043  000940                     _clear_2hz:
  3044                           	callstack 27
  3045                           
  3046                           ;../ihc_vector.c: 67:  INTCONbits.GIEH = 0;
  3047                           
  3048                           ;incstack = 0
  3049  000940  9EF2               	bcf	242,7,c	;volatile
  3050                           
  3051                           ;../ihc_vector.c: 68:  V.clock_2hz = 0;
  3052  000942  0E00               	movlw	0
  3053  000944  6E09               	movwf	(_V+8)^0,c	;volatile
  3054  000946  0E00               	movlw	0
  3055  000948  6E0A               	movwf	(_V+9)^0,c	;volatile
  3056  00094A  0E00               	movlw	0
  3057  00094C  6E0B               	movwf	(_V+10)^0,c	;volatile
  3058  00094E  0E00               	movlw	0
  3059  000950  6E0C               	movwf	(_V+11)^0,c	;volatile
  3060                           
  3061                           ;../ihc_vector.c: 69:  INTCONbits.GIEH = 1;
  3062  000952  8EF2               	bsf	242,7,c	;volatile
  3063  000954  0012               	return		;funcret
  3064  000956                     __end_of_clear_2hz:
  3065                           	callstack 0
  3066                           
  3067 ;; *************** function _clear_10hz *****************
  3068 ;; Defined at:
  3069 ;;		line 72 in file "../ihc_vector.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;		None
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;		None
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      void 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0
  3083 ;;      Params:         0       0
  3084 ;;      Locals:         0       0
  3085 ;;      Temps:          0       0
  3086 ;;      Totals:         0       0
  3087 ;;Total ram usage:        0 bytes
  3088 ;; Hardware stack levels used: 1
  3089 ;; Hardware stack levels required when called: 2
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_controller_work
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text14
  3098  000956                     __ptext14:
  3099                           	callstack 0
  3100  000956                     _clear_10hz:
  3101                           	callstack 27
  3102                           
  3103                           ;../ihc_vector.c: 74:  INTCONbits.GIEH = 0;
  3104                           
  3105                           ;incstack = 0
  3106  000956  9EF2               	bcf	242,7,c	;volatile
  3107                           
  3108                           ;../ihc_vector.c: 75:  V.clock_10hz = 0;
  3109  000958  0E00               	movlw	0
  3110  00095A  6E05               	movwf	(_V+4)^0,c	;volatile
  3111  00095C  0E00               	movlw	0
  3112  00095E  6E06               	movwf	(_V+5)^0,c	;volatile
  3113  000960  0E00               	movlw	0
  3114  000962  6E07               	movwf	(_V+6)^0,c	;volatile
  3115  000964  0E00               	movlw	0
  3116  000966  6E08               	movwf	(_V+7)^0,c	;volatile
  3117                           
  3118                           ;../ihc_vector.c: 76:  INTCONbits.GIEH = 1;
  3119  000968  8EF2               	bsf	242,7,c	;volatile
  3120  00096A  0012               	return		;funcret
  3121  00096C                     __end_of_clear_10hz:
  3122                           	callstack 0
  3123                           
  3124 ;; *************** function _SetDCPWM1 *****************
  3125 ;; Defined at:
  3126 ;;		line 101 in file "../ibsmon.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  dutycycle       2    8[COMRAM] unsigned short 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  DCycle          2   12[COMRAM] struct PWMDC
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      void 
  3133 ;; Registers used:
  3134 ;;		wreg, status,2, status,0
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0
  3140 ;;      Params:         2       0
  3141 ;;      Locals:         2       0
  3142 ;;      Temps:          2       0
  3143 ;;      Totals:         6       0
  3144 ;;Total ram usage:        6 bytes
  3145 ;; Hardware stack levels used: 1
  3146 ;; Hardware stack levels required when called: 2
  3147 ;; This function calls:
  3148 ;;		Nothing
  3149 ;; This function is called by:
  3150 ;;		_controller_work
  3151 ;;		_init_i400mon
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text15
  3156  000854                     __ptext15:
  3157                           	callstack 0
  3158  000854                     _SetDCPWM1:
  3159                           	callstack 27
  3160                           
  3161                           ;../ibsmon.c: 101: void SetDCPWM1(uint16_t dutycycle);../ibsmon.c: 102: {;../ibsmon.c: 1
      +                          03:  union PWMDC DCycle;;../ibsmon.c: 106:  DCycle.lpwm = dutycycle << 6;
  3162                           
  3163                           ;incstack = 0
  3164  000854  C032  F034         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  3165  000858  C033  F035         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  3166  00085C  0E06               	movlw	6
  3167  00085E                     u655:
  3168  00085E  90D8               	bcf	status,0,c
  3169  000860  3634               	rlcf	??_SetDCPWM1^0,f,c
  3170  000862  3635               	rlcf	(??_SetDCPWM1+1)^0,f,c
  3171  000864  2EE8               	decfsz	wreg,f,c
  3172  000866  D7FB               	goto	u655
  3173  000868  C034  F036         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  3174  00086C  C035  F037         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  3175                           
  3176                           ;../ibsmon.c: 109:  CCPR1L = DCycle.bpwm[1];
  3177  000870  C037  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  3178                           
  3179                           ;../ibsmon.c: 112:  CCP1CON = (CCP1CON & 0xCF) | ((DCycle.bpwm[0] >> 2) & 0x30);
  3180  000874  C036  F034         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  3181  000878  90D8               	bcf	status,0,c
  3182  00087A  3234               	rrcf	??_SetDCPWM1^0,f,c
  3183  00087C  90D8               	bcf	status,0,c
  3184  00087E  3234               	rrcf	??_SetDCPWM1^0,f,c
  3185  000880  0E30               	movlw	48
  3186  000882  1634               	andwf	??_SetDCPWM1^0,f,c
  3187  000884  50BD               	movf	189,w,c	;volatile
  3188  000886  0BCF               	andlw	207
  3189  000888  1034               	iorwf	??_SetDCPWM1^0,w,c
  3190  00088A  6EBD               	movwf	189,c	;volatile
  3191  00088C  0012               	return		;funcret
  3192  00088E                     __end_of_SetDCPWM1:
  3193                           	callstack 0
  3194                           
  3195 ;; *************** function _tm_handler *****************
  3196 ;; Defined at:
  3197 ;;		line 5 in file "../ihc_vector.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;		None
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  tmp             2    0        unsigned short 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0
  3211 ;;      Params:         0       0
  3212 ;;      Locals:         0       0
  3213 ;;      Temps:          3       0
  3214 ;;      Totals:         3       0
  3215 ;;Total ram usage:        3 bytes
  3216 ;; Hardware stack levels used: 1
  3217 ;; Hardware stack levels required when called: 1
  3218 ;; This function calls:
  3219 ;;		_led_blink
  3220 ;; This function is called by:
  3221 ;;		Interrupt level 2
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	intcode
  3226  000008                     __pintcode:
  3227                           	callstack 0
  3228  000008                     _tm_handler:
  3229                           	callstack 25
  3230                           
  3231                           ;incstack = 0
  3232  000008  8266               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3233  00000A  CFD9 F030          	movff	fsr2l,??_tm_handler+1
  3234  00000E  CFDA F031          	movff	fsr2h,??_tm_handler+2
  3235                           
  3236                           ;../ihc_vector.c: 7:  static uint8_t c_error = 0;;../ihc_vector.c: 8:  uint16_t tmp;;../
      +                          ihc_vector.c: 10:  if (PIR1bits.RCIF) {
  3237  000012  AA9E               	btfss	158,5,c	;volatile
  3238  000014  D021               	goto	i2l2093
  3239                           
  3240                           ;../ihc_vector.c: 11:   cc_stream_file = RCREG;
  3241  000016  CFAE F065          	movff	4014,_cc_stream_file	;volatile
  3242                           
  3243                           ;../ihc_vector.c: 15:   if (RCSTAbits.OERR || RCSTAbits.FERR) {
  3244  00001A  B2AB               	btfsc	171,1,c	;volatile
  3245  00001C  D002               	goto	i2u116_40
  3246  00001E  A4AB               	btfss	171,2,c	;volatile
  3247  000020  D00F               	goto	i2l2087
  3248  000022                     i2u116_40:
  3249                           
  3250                           ;../ihc_vector.c: 16:    cc_stream_file = 0x00;
  3251  000022  0E00               	movlw	0
  3252  000024  6E65               	movwf	_cc_stream_file^0,c	;volatile
  3253                           
  3254                           ;../ihc_vector.c: 17:    RCSTAbits.CREN = 0;
  3255  000026  98AB               	bcf	171,4,c	;volatile
  3256                           
  3257                           ;../ihc_vector.c: 18:    RCSTAbits.CREN = 1;
  3258  000028  88AB               	bsf	171,4,c	;volatile
  3259                           
  3260                           ;../ihc_vector.c: 19:    if (c_error++>3) {
  3261  00002A  2A61               	incf	tm_handler@c_error^0,f,c
  3262  00002C  0461               	decf	tm_handler@c_error^0,w,c
  3263  00002E  6E2F               	movwf	??_tm_handler^0,c
  3264  000030  0E03               	movlw	3
  3265  000032  642F               	cpfsgt	??_tm_handler^0,c
  3266  000034  D011               	goto	i2l2093
  3267                           
  3268                           ;../ihc_vector.c: 20:     c_error = 0;
  3269  000036  0E00               	movlw	0
  3270  000038  6E61               	movwf	tm_handler@c_error^0,c
  3271                           
  3272                           ;../ihc_vector.c: 21:     V.error++;
  3273  00003A  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  3274  00003C  2A14               	incf	(_V+19)^0,f,c	;volatile
  3275  00003E  D00C               	goto	i2l2093
  3276  000040                     i2l2087:
  3277                           
  3278                           ;../ihc_vector.c: 27:    cc_buffer[V.recv_count] = cc_stream_file;
  3279  000040  5011               	movf	(_V+16)^0,w,c	;volatile
  3280  000042  0F80               	addlw	low _cc_buffer
  3281  000044  6ED9               	movwf	fsr2l,c
  3282  000046  6ADA               	clrf	fsr2h,c
  3283  000048  C065  FFDF         	movff	_cc_stream_file,indf2	;volatile
  3284                           
  3285                           ;../ihc_vector.c: 28:    if (++V.recv_count >= 64) {
  3286  00004C  2A11               	incf	(_V+16)^0,f,c	;volatile
  3287  00004E  0E3F               	movlw	63
  3288  000050  6411               	cpfsgt	(_V+16)^0,c	;volatile
  3289  000052  D002               	goto	i2l2093
  3290                           
  3291                           ;../ihc_vector.c: 29:     V.recv_count = 0;
  3292  000054  0E00               	movlw	0
  3293  000056  6E11               	movwf	(_V+16)^0,c	;volatile
  3294  000058                     i2l2093:
  3295                           
  3296                           ;../ihc_vector.c: 34:  if (PIR1bits.TMR1IF) {
  3297  000058  A09E               	btfss	158,0,c	;volatile
  3298  00005A  D011               	goto	i2l2107
  3299                           
  3300                           ;../ihc_vector.c: 35:   PIR1bits.TMR1IF = 0;
  3301  00005C  909E               	bcf	158,0,c	;volatile
  3302                           
  3303                           ;../ihc_vector.c: 37:   TMR1H = (uint8_t) tmp;
  3304  00005E  0EF6               	movlw	246
  3305  000060  6ECF               	movwf	207,c	;volatile
  3306                           
  3307                           ;../ihc_vector.c: 39:   TMR1L = (uint8_t) tmp;
  3308  000062  0E60               	movlw	96
  3309  000064  6ECE               	movwf	206,c	;volatile
  3310                           
  3311                           ;../ihc_vector.c: 40:   V.clock_500hz++;
  3312  000066  0E01               	movlw	1
  3313  000068  2601               	addwf	_V^0,f,c	;volatile
  3314  00006A  0E00               	movlw	0
  3315  00006C  2202               	addwfc	(_V+1)^0,f,c	;volatile
  3316  00006E  2203               	addwfc	(_V+2)^0,f,c	;volatile
  3317  000070  2204               	addwfc	(_V+3)^0,f,c	;volatile
  3318                           
  3319                           ;../ihc_vector.c: 41:   V.clock_10hz++;
  3320  000072  0E01               	movlw	1
  3321  000074  2605               	addwf	(_V+4)^0,f,c	;volatile
  3322  000076  0E00               	movlw	0
  3323  000078  2206               	addwfc	(_V+5)^0,f,c	;volatile
  3324  00007A  2207               	addwfc	(_V+6)^0,f,c	;volatile
  3325  00007C  2208               	addwfc	(_V+7)^0,f,c	;volatile
  3326  00007E                     i2l2107:
  3327                           
  3328                           ;../ihc_vector.c: 44:  if (INTCONbits.TMR0IF) {
  3329  00007E  A4F2               	btfss	242,2,c	;volatile
  3330  000080  D00E               	goto	i2l2123
  3331                           
  3332                           ;../ihc_vector.c: 45:   INTCONbits.TMR0IF = 0;
  3333  000082  94F2               	bcf	242,2,c	;volatile
  3334                           
  3335                           ;../ihc_vector.c: 47:   TMR0H = (uint8_t) tmp;
  3336  000084  0E67               	movlw	103
  3337  000086  6ED7               	movwf	215,c	;volatile
  3338                           
  3339                           ;../ihc_vector.c: 49:   TMR0L = (uint8_t) tmp;
  3340  000088  0EE8               	movlw	232
  3341  00008A  6ED6               	movwf	214,c	;volatile
  3342                           
  3343                           ;../ihc_vector.c: 50:   V.clock_2hz++;
  3344  00008C  0E01               	movlw	1
  3345  00008E  2609               	addwf	(_V+8)^0,f,c	;volatile
  3346  000090  0E00               	movlw	0
  3347  000092  220A               	addwfc	(_V+9)^0,f,c	;volatile
  3348  000094  220B               	addwfc	(_V+10)^0,f,c	;volatile
  3349  000096  220C               	addwfc	(_V+11)^0,f,c	;volatile
  3350                           
  3351                           ;../ihc_vector.c: 51:   V.clock_blinks++;
  3352  000098  2A0D               	incf	(_V+12)^0,f,c	;volatile
  3353                           
  3354                           ;../ihc_vector.c: 52:   led_blink();
  3355  00009A  EC16  F003         	call	_led_blink	;wreg free
  3356  00009E                     i2l2123:
  3357                           
  3358                           ;../ihc_vector.c: 55:  if (PIR1bits.TMR2IF) {
  3359  00009E  B29E               	btfsc	158,1,c	;volatile
  3360                           
  3361                           ;../ihc_vector.c: 56:   PIR1bits.TMR2IF = 0;
  3362  0000A0  929E               	bcf	158,1,c	;volatile
  3363                           
  3364                           ;../ihc_vector.c: 59:  if (PIR1bits.CCP1IF) {
  3365                           
  3366                           ;../ihc_vector.c: 57:  }
  3367  0000A2  B49E               	btfsc	158,2,c	;volatile
  3368                           
  3369                           ;../ihc_vector.c: 60:   PIR1bits.CCP1IF = 0;
  3370  0000A4  949E               	bcf	158,2,c	;volatile
  3371  0000A6  C031  FFDA         	movff	??_tm_handler+2,fsr2h
  3372  0000AA  C030  FFD9         	movff	??_tm_handler+1,fsr2l
  3373  0000AE  9266               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3374  0000B0  0011               	retfie		f
  3375  0000B2                     __end_of_tm_handler:
  3376                           	callstack 0
  3377                           
  3378 ;; *************** function _led_blink *****************
  3379 ;; Defined at:
  3380 ;;		line 132 in file "../ihc_vector.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0
  3394 ;;      Params:         0       0
  3395 ;;      Locals:         0       0
  3396 ;;      Temps:          5       0
  3397 ;;      Totals:         5       0
  3398 ;;Total ram usage:        5 bytes
  3399 ;; Hardware stack levels used: 1
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_tm_handler
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text17
  3408  00062C                     __ptext17:
  3409                           	callstack 0
  3410  00062C                     _led_blink:
  3411                           	callstack 25
  3412                           
  3413                           ;../ihc_vector.c: 135:  if (V.num_blinks == 255) {
  3414                           
  3415                           ;incstack = 0
  3416  00062C  280E               	incf	(_V+13)^0,w,c	;volatile
  3417  00062E  A4D8               	btfss	status,2,c
  3418  000630  D005               	goto	i2l2043
  3419                           
  3420                           ;../ihc_vector.c: 136:   LATBbits.LATB0 = 1;
  3421  000632  808A               	bsf	138,0,c	;volatile
  3422  000634                     i2l2037:
  3423                           
  3424                           ;../ihc_vector.c: 137:   V.clock_blinks = 0;
  3425  000634  0E00               	movlw	0
  3426  000636  6E0D               	movwf	(_V+12)^0,c	;volatile
  3427  000638                     i2l2039:
  3428                           
  3429                           ;../ihc_vector.c: 138:   V.blink_lock = 0;
  3430  000638  900F               	bcf	(_V+14)^0,0,c	;volatile
  3431  00063A  0012               	return	
  3432  00063C                     i2l2043:
  3433                           
  3434                           ;../ihc_vector.c: 141:  if (!V.num_blinks || V.num_blinks > 10) {
  3435  00063C  500E               	movf	(_V+13)^0,w,c	;volatile
  3436  00063E  B4D8               	btfsc	status,2,c
  3437  000640  D003               	goto	i2u110_40
  3438  000642  0E0A               	movlw	10
  3439  000644  640E               	cpfsgt	(_V+13)^0,c	;volatile
  3440  000646  D002               	goto	i2l2053
  3441  000648                     i2u110_40:
  3442                           
  3443                           ;../ihc_vector.c: 142:   LATBbits.LATB0 = 0;
  3444  000648  908A               	bcf	138,0,c	;volatile
  3445  00064A  D7F4               	goto	i2l2037
  3446  00064C                     i2l2053:
  3447                           
  3448                           ;../ihc_vector.c: 149:  if (V.clock_blinks > 8) {
  3449  00064C  0E08               	movlw	8
  3450  00064E  640D               	cpfsgt	(_V+12)^0,c	;volatile
  3451  000650  0012               	return	
  3452                           
  3453                           ;../ihc_vector.c: 150:   if ((8 + (V.num_blinks << 1)) <= V.clock_blinks) {
  3454  000652  500E               	movf	(_V+13)^0,w,c	;volatile
  3455  000654  6E2A               	movwf	??_led_blink^0,c
  3456  000656  6A2B               	clrf	(??_led_blink+1)^0,c
  3457  000658  90D8               	bcf	status,0,c
  3458  00065A  362A               	rlcf	??_led_blink^0,f,c
  3459  00065C  362B               	rlcf	(??_led_blink+1)^0,f,c
  3460  00065E  0E08               	movlw	8
  3461  000660  262A               	addwf	??_led_blink^0,f,c
  3462  000662  0E00               	movlw	0
  3463  000664  222B               	addwfc	(??_led_blink+1)^0,f,c
  3464  000666  500D               	movf	(_V+12)^0,w,c	;volatile
  3465  000668  6E2C               	movwf	(??_led_blink+2)^0,c
  3466  00066A  6A2D               	clrf	(??_led_blink+3)^0,c
  3467  00066C  502A               	movf	??_led_blink^0,w,c
  3468  00066E  5C2C               	subwf	(??_led_blink+2)^0,w,c
  3469  000670  502D               	movf	(??_led_blink+3)^0,w,c
  3470  000672  0A80               	xorlw	128
  3471  000674  6E2E               	movwf	(??_led_blink+4)^0,c
  3472  000676  502B               	movf	(??_led_blink+1)^0,w,c
  3473  000678  0A80               	xorlw	128
  3474  00067A  582E               	subwfb	(??_led_blink+4)^0,w,c
  3475  00067C  A0D8               	btfss	status,0,c
  3476  00067E  D004               	goto	i2l2063
  3477                           
  3478                           ;../ihc_vector.c: 151:    V.clock_blinks = 0;
  3479  000680  0E00               	movlw	0
  3480  000682  6E0D               	movwf	(_V+12)^0,c	;volatile
  3481                           
  3482                           ;../ihc_vector.c: 152:    LATBbits.LATB0 = 0;
  3483  000684  908A               	bcf	138,0,c	;volatile
  3484  000686  D7D8               	goto	i2l2039
  3485  000688                     i2l2063:
  3486                           
  3487                           ;../ihc_vector.c: 155:    LATBbits.LATB0 = ~LATBbits.LATB0;
  3488  000688  A08A               	btfss	138,0,c	;volatile
  3489  00068A  D002               	goto	i2u113_40
  3490  00068C  0E01               	movlw	1
  3491  00068E  D001               	goto	i2u113_46
  3492  000690                     i2u113_40:
  3493  000690  0E00               	movlw	0
  3494  000692                     i2u113_46:
  3495  000692  0AFF               	xorlw	255
  3496  000694  6E2A               	movwf	??_led_blink^0,c
  3497  000696  508A               	movf	138,w,c	;volatile
  3498  000698  182A               	xorwf	??_led_blink^0,w,c
  3499  00069A  0BFE               	andlw	-2
  3500  00069C  182A               	xorwf	??_led_blink^0,w,c
  3501  00069E  6E8A               	movwf	138,c	;volatile
  3502  0006A0  0012               	return		;funcret
  3503  0006A2                     __end_of_led_blink:
  3504                           	callstack 0
  3505                           
  3506                           	psect	rparam
  3507  0000                     
  3508                           	psect	temp
  3509  000066                     btemp:
  3510                           	callstack 0
  3511  000066                     	ds	1
  3512  0000                     int$flags	set	btemp
  3513  0000                     wtemp8	set	btemp+1
  3514  0000                     ttemp5	set	btemp+1
  3515  0000                     ttemp6	set	btemp+4
  3516  0000                     ttemp7	set	btemp+8
  3517                           
  3518                           	psect	idloc
  3519                           
  3520                           ;Config register IDLOC0 @ 0x200000
  3521                           ;	unspecified, using default values
  3522  200000                     	org	2097152
  3523  200000  FF                 	db	255
  3524                           
  3525                           ;Config register IDLOC1 @ 0x200001
  3526                           ;	unspecified, using default values
  3527  200001                     	org	2097153
  3528  200001  FF                 	db	255
  3529                           
  3530                           ;Config register IDLOC2 @ 0x200002
  3531                           ;	unspecified, using default values
  3532  200002                     	org	2097154
  3533  200002  FF                 	db	255
  3534                           
  3535                           ;Config register IDLOC3 @ 0x200003
  3536                           ;	unspecified, using default values
  3537  200003                     	org	2097155
  3538  200003  FF                 	db	255
  3539                           
  3540                           ;Config register IDLOC4 @ 0x200004
  3541                           ;	unspecified, using default values
  3542  200004                     	org	2097156
  3543  200004  FF                 	db	255
  3544                           
  3545                           ;Config register IDLOC5 @ 0x200005
  3546                           ;	unspecified, using default values
  3547  200005                     	org	2097157
  3548  200005  FF                 	db	255
  3549                           
  3550                           ;Config register IDLOC6 @ 0x200006
  3551                           ;	unspecified, using default values
  3552  200006                     	org	2097158
  3553  200006  FF                 	db	255
  3554                           
  3555                           ;Config register IDLOC7 @ 0x200007
  3556                           ;	unspecified, using default values
  3557  200007                     	org	2097159
  3558  200007  FF                 	db	255
  3559                           
  3560                           	psect	config
  3561                           
  3562                           ; Padding undefined space
  3563  300000                     	org	3145728
  3564  300000  FF                 	db	255
  3565                           
  3566                           ;Config register CONFIG1H @ 0x300001
  3567                           ;	Oscillator Selection bits
  3568                           ;	OSC = HSPLL, HS oscillator, PLL enabled (clock frequency = 4 x FOSC1)
  3569                           ;	Fail-Safe Clock Monitor Enable bit
  3570                           ;	FSCM = ON, Fail-Safe Clock Monitor enabled
  3571                           ;	Internal External Switchover bit
  3572                           ;	IESO = ON, Internal External Switchover mode enabled
  3573  300001                     	org	3145729
  3574  300001  C6                 	db	198
  3575                           
  3576                           ;Config register CONFIG2L @ 0x300002
  3577                           ;	Power-up Timer Enable bit
  3578                           ;	PWRT = OFF, PWRT disabled
  3579                           ;	Brown-out Reset Enable bit
  3580                           ;	BOR = ON, Brown-out Reset enabled
  3581                           ;	Brown-out Reset Voltage bits
  3582                           ;	BORV = 0x3, unprogrammed default
  3583  300002                     	org	3145730
  3584  300002  0F                 	db	15
  3585                           
  3586                           ;Config register CONFIG2H @ 0x300003
  3587                           ;	Watchdog Timer Enable bit
  3588                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3589                           ;	Watchdog Timer Postscale Select bits
  3590                           ;	WDTPS = 32768, 1:32768
  3591  300003                     	org	3145731
  3592  300003  1E                 	db	30
  3593                           
  3594                           ; Padding undefined space
  3595  300004                     	org	3145732
  3596  300004  FF                 	db	255
  3597                           
  3598                           ;Config register CONFIG3H @ 0x300005
  3599                           ;	MCLR Pin Enable bit
  3600                           ;	MCLRE = ON, MCLR pin enabled, RA5 input pin disabled
  3601  300005                     	org	3145733
  3602  300005  80                 	db	128
  3603                           
  3604                           ;Config register CONFIG4L @ 0x300006
  3605                           ;	Stack Full/Underflow Reset Enable bit
  3606                           ;	STVR = ON, Stack full/underflow will cause Reset
  3607                           ;	Low-Voltage ICSP Enable bit
  3608                           ;	LVP = OFF, Low-Voltage ICSP disabled
  3609                           ;	Background Debugger Enable bit
  3610                           ;	DEBUG = 0x1, unprogrammed default
  3611  300006                     	org	3145734
  3612  300006  81                 	db	129
  3613                           
  3614                           ; Padding undefined space
  3615  300007                     	org	3145735
  3616  300007  FF                 	db	255
  3617                           
  3618                           ;Config register CONFIG5L @ 0x300008
  3619                           ;	Code Protection bit
  3620                           ;	CP0 = OFF, Block 0 (00200-000FFFh) not code-protected
  3621                           ;	Code Protection bit
  3622                           ;	CP1 = OFF, Block 1 (001000-001FFFh) not code-protected
  3623  300008                     	org	3145736
  3624  300008  03                 	db	3
  3625                           
  3626                           ;Config register CONFIG5H @ 0x300009
  3627                           ;	Boot Block Code Protection bit
  3628                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  3629                           ;	Data EEPROM Code Protection bit
  3630                           ;	CPD = OFF, Data EEPROM not code-protected
  3631  300009                     	org	3145737
  3632  300009  C0                 	db	192
  3633                           
  3634                           ;Config register CONFIG6L @ 0x30000A
  3635                           ;	Write Protection bit
  3636                           ;	WRT0 = OFF, Block 0 (00200-000FFFh) not write-protected
  3637                           ;	Write Protection bit
  3638                           ;	WRT1 = OFF, Block 1 (001000-001FFFh) not write-protected
  3639  30000A                     	org	3145738
  3640  30000A  03                 	db	3
  3641                           
  3642                           ;Config register CONFIG6H @ 0x30000B
  3643                           ;	Configuration Register Write Protection bit
  3644                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3645                           ;	Boot Block Write Protection bit
  3646                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  3647                           ;	Data EEPROM Write Protection bit
  3648                           ;	WRTD = OFF, Data EEPROM not write-protected
  3649  30000B                     	org	3145739
  3650  30000B  E0                 	db	224
  3651                           
  3652                           ;Config register CONFIG7L @ 0x30000C
  3653                           ;	Table Read Protection bit
  3654                           ;	EBTR0 = OFF, Block 0 (00200-000FFFh) not protected from table reads executed in other 
      +                          blocks
  3655                           ;	Table Read Protection bit
  3656                           ;	EBTR1 = OFF, Block 1 (001000-001FFFh) not protected from table reads executed in other
      +                           blocks
  3657  30000C                     	org	3145740
  3658  30000C  03                 	db	3
  3659                           
  3660                           ;Config register CONFIG7H @ 0x30000D
  3661                           ;	Boot Block Table Read Protection bit
  3662                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  3663  30000D                     	org	3145741
  3664  30000D  40                 	db	64
  3665                           tosu	equ	0xFFF
  3666                           tosh	equ	0xFFE
  3667                           tosl	equ	0xFFD
  3668                           stkptr	equ	0xFFC
  3669                           pclatu	equ	0xFFB
  3670                           pclath	equ	0xFFA
  3671                           pcl	equ	0xFF9
  3672                           tblptru	equ	0xFF8
  3673                           tblptrh	equ	0xFF7
  3674                           tblptrl	equ	0xFF6
  3675                           tablat	equ	0xFF5
  3676                           prodh	equ	0xFF4
  3677                           prodl	equ	0xFF3
  3678                           indf0	equ	0xFEF
  3679                           postinc0	equ	0xFEE
  3680                           postdec0	equ	0xFED
  3681                           preinc0	equ	0xFEC
  3682                           plusw0	equ	0xFEB
  3683                           fsr0h	equ	0xFEA
  3684                           fsr0l	equ	0xFE9
  3685                           wreg	equ	0xFE8
  3686                           indf1	equ	0xFE7
  3687                           postinc1	equ	0xFE6
  3688                           postdec1	equ	0xFE5
  3689                           preinc1	equ	0xFE4
  3690                           plusw1	equ	0xFE3
  3691                           fsr1h	equ	0xFE2
  3692                           fsr1l	equ	0xFE1
  3693                           bsr	equ	0xFE0
  3694                           indf2	equ	0xFDF
  3695                           postinc2	equ	0xFDE
  3696                           postdec2	equ	0xFDD
  3697                           preinc2	equ	0xFDC
  3698                           plusw2	equ	0xFDB
  3699                           fsr2h	equ	0xFDA
  3700                           fsr2l	equ	0xFD9
  3701                           status	equ	0xFD8

Data Sizes:
    Strings     21
    Constant    571
    Data        41
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     35     101
    BANK0           128      0      64

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 6
		 -> modbus_cc_mode(CODE[6]), modbus_cc_error(CODE[6]), modbus_cc_clear(COMRAM[6]), modbus_cc_freset(COMRAM[6]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 6
		 -> modbus_cc_mode(CODE[6]), modbus_cc_error(CODE[6]), modbus_cc_clear(COMRAM[6]), modbus_cc_freset(COMRAM[6]), 

    crc16@buffer	PTR volatile unsigned char  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    sp__memcpy	PTR void  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    modbus_rtu_send_msg@modbus_cc_mode	PTR const void  size(2) Largest target is 6
		 -> modbus_cc_mode(CODE[6]), modbus_cc_error(CODE[6]), modbus_cc_clear(COMRAM[6]), modbus_cc_freset(COMRAM[6]), 

    modbus_rtu_send_msg@cc_buffer	PTR void  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    modbus_rtu_send_msg_crc@req	PTR volatile unsigned char  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    build_time	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    build_date	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_controller_work
    _init_i400mon->_SetDCPWM1
    _controller_work->_modbus_rtu_send_msg
    _modbus_rtu_send_msg->_modbus_rtu_send_msg_crc
    _modbus_rtu_send_msg_crc->_crc16

Critical Paths under _tm_handler in COMRAM

    _tm_handler->_led_blink

Critical Paths under _main in BANK0

    None.

Critical Paths under _tm_handler in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4745
                    _controller_work
                       _init_i400mon
 ---------------------------------------------------------------------------------
 (1) _init_i400mon                                         2     2      0     455
                          _SetDCPWM1
                 _init_stream_params
                      _set_led_blink
 ---------------------------------------------------------------------------------
 (2) _init_stream_params                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _controller_work                                      9     9      0    4290
                                             26 COMRAM     9     9      0
                          _SetDCPWM1
                         _clear_10hz
                          _clear_2hz
                        _clear_500hz
                              _crc16
                           _get_10hz
                            _get_2hz
                          _get_500hz
                _modbus_rtu_send_msg
                      _set_led_blink
 ---------------------------------------------------------------------------------
 (2) _set_led_blink                                        1     1      0      67
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _modbus_rtu_send_msg                                  5     0      5    2689
                                             21 COMRAM     5     0      5
                             _memcpy
            _modbus_rtu_send_msg_crc
 ---------------------------------------------------------------------------------
 (3) _modbus_rtu_send_msg_crc                              5     2      3    1296
                                             16 COMRAM     5     2      3
                              _crc16
 ---------------------------------------------------------------------------------
 (4) _crc16                                                8     5      3     942
                                              8 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               9     4      5     371
                                              8 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (2) _get_500hz                                            5     1      4      22
                                              8 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _get_2hz                                              1     1      0      22
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _get_10hz                                             5     1      4      22
                                              8 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _clear_500hz                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_2hz                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_10hz                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM1                                            6     4      2     296
                                              8 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _tm_handler                                           5     5      0      92
                                              5 COMRAM     3     3      0
                          _led_blink
 ---------------------------------------------------------------------------------
 (6) _led_blink                                            5     5      0       0
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controller_work
     _SetDCPWM1
     _clear_10hz
     _clear_2hz
     _clear_500hz
     _crc16
     _get_10hz
     _get_2hz
     _get_500hz
     _modbus_rtu_send_msg
       _memcpy
       _modbus_rtu_send_msg_crc
         _crc16
     _set_led_blink
   _init_i400mon
     _SetDCPWM1
     _init_stream_params
     _set_led_blink

 _tm_handler (ROOT)
   _led_blink

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0      19        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      40       5       50.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     23      65       1       80.2%
BITBIGSFRhhllhh     19      0       0       8        0.0%
BITBIGSFRlhhh        C      0       0      13        0.0%
BITBIGSFRlhlhh       A      0       0      14        0.0%
BITBIGSFRhhlh        9      0       0       7        0.0%
BITBIGSFRlhlhl       9      0       0      15        0.0%
BITBIGSFRll          9      0       0      17        0.0%
BITBIGSFRhlhll       8      0       0      11        0.0%
BITBIGSFRlhll        7      0       0      16        0.0%
BITBIGSFRhhlll       4      0       0       9        0.0%
BITBIGSFRhhh         3      0       0       6        0.0%
BITBIGSFRhll         2      0       0      12        0.0%
BITBIGSFRhlhlh       1      0       0      10        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5      18        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Thu Jan 27 13:42:37 2022

                       _STKPTRbits 000FFC                _modbus_rtu_send_msg 088E  
                                _V 0001                      _build_version 1FD9  
                              l208 05A6                                l138 00D6  
                              l178 03F6                                l293 07EE  
                              l287 082E                                _PR2 000FCB  
                              u630 0728                                u810 0270  
                              u740 011A                                u637 071E  
                              u655 085E                                u760 01FC  
                              u770 022E                                u746 011C  
                              u755 012E                                u860 02FE  
                              u790 0252                                u970 0420  
                              wreg 000FE8               ?_modbus_rtu_send_msg 003F  
                             l1611 0708                               l2067 0970  
                             l1703 0112                               l1801 0362  
                             l1721 01BC                               l1619 073A  
                             l1723 01E6                               l1715 0178  
                             l1581 06A8                               l1717 019A  
                             l1905 0508                               l1817 0382  
                             l1809 037A                               l1753 0276  
                             l1681 00B8                               l1921 0562  
                             l1739 0218                               l1589 06DC  
                             l1669 0900                               l1853 0422  
                             l1837 03FA                               l1845 0412  
                             l1917 0538                               l1749 025A  
                             l1871 0488                               l1775 02E0  
                             l1695 00E2                               l1881 049C  
                             l1873 048C                               l1785 030E  
                             l1769 02CA                               l1777 02E6  
                             l1875 0490                               l1877 0494  
                             l1893 04E2                               l1879 0498  
                             l1887 04A0                               l1889 04D6  
                             l1899 04F8                               STR_1 1FEA  
                             STR_2 1FF6                               u1030 0520  
                             u1060 05A0                               _RCON 000FD0  
                             _main 096C                               fsr2h 000FDA  
                             indf2 000FDF                               fsr1l 000FE1  
                             fsr2l 000FD9                               btemp 0066  
                             start 00B2                       ___param_bank 000000  
          _modbus_rtu_send_msg_crc 0792                              ?_main 002A  
                            _T0CON 000FD5                              _T1CON 000FCD  
                            _RCREG 000FAE                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _SPBRG 000FAF                              _TRISA 000F92  
                            _TRISB 000F93                              _TXREG 000FAD  
                            _TXSTA 000FAC                    __end_of_get_2hz 092A  
            ??_modbus_rtu_send_msg 0044                              _crc16 06A2  
                            tablat 000FF5                              ttemp5 0067  
                            ttemp6 006A                              ttemp7 006E  
                            status 000FD8                              wtemp8 0067  
modbus_rtu_send_msg@modbus_cc_mode 0040                      ?_init_i400mon 002A  
                  __initialization 074C                       __end_of_main 0976  
                           ??_main 004D                      __activetblptr 000002  
                           ?_crc16 0032                             _ADCON1 000FC1  
                           _CCPR1L 000FBE                 crc16@buffer_length 0033  
                           i2l2043 063C                             i2l2123 009E  
                           i2l2107 007E                             i2l2053 064C  
                           i2l2037 0634                             i2l2063 0688  
                           i2l2039 0638                             i2l2093 0058  
                           i2l2087 0040                             _SPBRGH 000FB0  
                 __end_of_get_10hz 0854          ??_modbus_rtu_send_msg_crc 003D  
                   ??_init_i400mon 0038                             crc16@i 0037  
                __end_of_i400_mode 1FC0                             _memcpy 06FA  
                ??_controller_work 0044                             clear_0 0772  
                           clear_1 077E                          ??_get_2hz 0032  
                           isa$std 000001                             _rvalue 005D  
                     __pdataCOMRAM 0001                       __mediumconst 1DAE  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8              __end_of_set_led_blink 090C  
                       __accesstop 0080            __end_of__initialization 0784  
                    ___rparam_used 000001                     __pcstackCOMRAM 002A  
                    __end_of_crc16 06FA           controller_work@c_crc_rec 004B  
                __end_of_SetDCPWM1 088E    __end_of_modbus_rtu_send_msg_crc 07D4  
                    get_500hz@mode 0036                            ??_crc16 0035  
                       __pbssBANK0 0080                         _clear_10hz 0956  
                          _CCP1CON 000FBD                            ?_memcpy 0032  
                        ?_get_10hz 0032               __end_of_init_i400mon 062C  
              set_led_blink@blinks 0032                         _build_date 0017  
                       _build_time 0015                  __end_of_get_500hz 0814  
                __end_of_clear_2hz 0956         modbus_rtu_send_msg_crc@crc 003D  
       modbus_rtu_send_msg_crc@req 003A                            __Hparam 0000  
                          __Lparam 0000                  __end_of_led_blink 06A2  
               __end_of_i400_clear 1FD9                            __pcinit 074C  
                          __ramtop 0100                            _get_2hz 090C  
               __end_of_i400_error 1FC9        __end_of_modbus_rtu_send_msg 08C0  
                          __ptext0 096C                            __ptext1 058C  
                          __ptext2 0976                            __ptext3 00B6  
                          __ptext4 08EA                            __ptext5 088E  
                          __ptext6 0792                            __ptext7 06A2  
                          __ptext8 06FA                            __ptext9 07D4  
                        _T2CONbits 000FCA                         ??_get_10hz 0036  
                    ??_clear_500hz 0032               end_of_initialization 0784  
                          memcpy@d 003A                            memcpy@n 0035  
                          memcpy@s 0037                         _req_length 005F  
                    __Lmediumconst 1DAE                         get_2hz@tmp 0055  
                      ?_clear_10hz 002A                    _controller_work 00B6  
                        _RCSTAbits 000FAB                         _tm_handler 0008  
                          postdec1 000FE5                            postinc0 000FEE  
             __end_of_table_crc_hi 1FAF               __end_of_table_crc_lo 1EAF  
                        _i400_mode 1FAF                          _TXSTAbits 000FAC  
              __end_of_clear_500hz 0940                  tm_handler@c_error 0061  
            __end_of_build_version 1FDE                      __pidataCOMRAM 08C0  
                      _BAUDCTLbits 000FAA                     __end_of_memcpy 074C  
              start_initialization 074C                          _SetDCPWM1 0854  
                  SetDCPWM1@DCycle 0036            __end_of_controller_work 058C  
       __end_of_init_stream_params 097A           ?_modbus_rtu_send_msg_crc 003A  
                     _init_i400mon 058C                        ?_tm_handler 002A  
                         ??_memcpy 0037                        crc16@crc_hi 0038  
                      crc16@crc_lo 0039                        crc16@buffer 0032  
                      __pbssCOMRAM 004D                         ?_SetDCPWM1 0032  
                      _clear_500hz 092A                          _cc_buffer 0080  
                     get_500hz@tmp 004D                          _get_500hz 07D4  
                        _clear_2hz 0940              controller_work@cstate 0063  
                        __pintcode 0008                      __pmediumconst 1DAE  
                        _crc_error 0059            controller_work@temp_727 0048  
                         ?_get_2hz 002A                          _led_blink 062C  
                     get_10hz@mode 0036                   ?_controller_work 002A  
                     _table_crc_hi 1EAF                       _table_crc_lo 1DAF  
                    _set_led_blink 08EA  modbus_rtu_send_msg_crc@req_length 003B  
                     ??_clear_10hz 0032                           _LATAbits 000F89  
                         _LATBbits 000F8A                         ?_get_500hz 0032  
                         _IPR1bits 000F9F                           _PIE1bits 000F9D  
                       ?_clear_2hz 002A                           i2u110_40 0648  
                         i2u113_40 0690                           i2u113_46 0692  
                         i2u116_40 0022                           _PIR1bits 000F9E  
                         _RCONbits 000FD0                           _i400_pwm 001B  
                       ?_led_blink 002A                   _modbus_cc_freset 001E  
               __end_of_clear_10hz 096C                        ??_SetDCPWM1 0034  
                      _INTCON2bits 000FF1                          copy_data0 0760  
                   ?_set_led_blink 002A                 SetDCPWM1@dutycycle 0032  
                         __Hrparam 0000                          memcpy@tmp 0039  
                         __Lrparam 0000      controller_work@modbus_command 0062  
                         _get_10hz 0814               controller_work@c_crc 0049  
              __end_of_i400_freset 1FD1                           __ptext10 090C  
                         __ptext11 0814                           __ptext12 092A  
                         __ptext13 0940                           __ptext14 0956  
                         __ptext15 0854                           __ptext17 062C  
             controller_work@volts 001D                        get_10hz@tmp 0051  
                      ??_get_500hz 0036                        ??_clear_2hz 0032  
               _init_stream_params 0976                       ??_tm_handler 002F  
                         isa$xinst 000000       modbus_rtu_send_msg@cc_buffer 003F  
                         int$flags 0066                    _modbus_cc_clear 0024  
                  _modbus_cc_error 1FDE                ?_init_stream_params 002A  
                      ??_led_blink 002A                     _cc_stream_file 0065  
                       _INTCONbits 000FF2                           memcpy@d1 0032  
                         memcpy@s1 0033                       ?_clear_500hz 002A  
                      get_2hz@mode 0032                    ??_set_led_blink 0032  
    modbus_rtu_send_msg@req_length 0042                 __end_of_tm_handler 00B2  
                         intlevel2 0000               ??_init_stream_params 0032  
              controller_work@mcmd 0064                controller_work@temp 0046  
                   _modbus_cc_mode 1FE4                        _i400_freset 1FC9  
                       _i400_clear 1FD1                         _i400_error 1FC0  
                       _i400_power 0019            __end_of_modbus_cc_error 1FE4  
           __end_of_modbus_cc_mode 1FEA  
