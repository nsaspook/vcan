

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Oct 17 15:17:32 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18F1320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F1320 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataCOMRAM
    72  0008B4                     __pidataCOMRAM:
    73                           	callstack 0
    74                           
    75                           ;initializer for _V
    76  0008B4  0000               	dw	0
    77  0008B6  0000               	dw	0
    78  0008B8  0000               	dw	0
    79  0008BA  0000               	dw	0
    80  0008BC  0000               	dw	0
    81  0008BE  0000               	dw	0
    82  0008C0  00                 	db	0
    83  0008C1  00                 	db	0
    84  0008C2  10                 	db	16
    85  0008C3  00                 	db	0
    86  0008C4  00                 	db	0
    87  0008C5  00                 	db	0
    88  0008C6  00                 	db	0
    89  0008C7  00                 	db	0
    90                           
    91                           ;initializer for _build_time
    92  0008C8  F6                 	db	low STR_2
    93  0008C9  1F                 	db	high STR_2
    94                           
    95                           ;initializer for _build_date
    96  0008CA  EA                 	db	low STR_1
    97  0008CB  1F                 	db	high STR_1
    98                           
    99                           ;initializer for _i400_power
   100  0008CC  0130               	dw	304
   101                           
   102                           ;initializer for _i400_pwm
   103  0008CE  0171               	dw	369
   104                           
   105                           ;initializer for controller_work@volts
   106  0008D0  FF                 	db	255
   107                           
   108                           ;initializer for _modbus_cc_freset
   109  0008D1  04                 	db	4
   110  0008D2  06                 	db	6
   111  0008D3  00                 	db	0
   112  0008D4  0B                 	db	11
   113  0008D5  00                 	db	0
   114  0008D6  02                 	db	2
   115                           
   116                           ;initializer for _modbus_cc_clear
   117  0008D7  04                 	db	4
   118  0008D8  06                 	db	6
   119  0008D9  00                 	db	0
   120  0008DA  0A                 	db	10
   121  0008DB  00                 	db	0
   122  0008DC  01                 	db	1
   123                           
   124                           	psect	mediumconst
   125  001DAE                     __pmediumconst:
   126                           	callstack 0
   127  001DAE  00                 	db	0
   128  001DAF                     _table_crc_lo:
   129                           	callstack 0
   130  001DAF  00                 	db	0
   131  001DB0  C0                 	db	192
   132  001DB1  C1                 	db	193
   133  001DB2  01                 	db	1
   134  001DB3  C3                 	db	195
   135  001DB4  03                 	db	3
   136  001DB5  02                 	db	2
   137  001DB6  C2                 	db	194
   138  001DB7  C6                 	db	198
   139  001DB8  06                 	db	6
   140  001DB9  07                 	db	7
   141  001DBA  C7                 	db	199
   142  001DBB  05                 	db	5
   143  001DBC  C5                 	db	197
   144  001DBD  C4                 	db	196
   145  001DBE  04                 	db	4
   146  001DBF  CC                 	db	204
   147  001DC0  0C                 	db	12
   148  001DC1  0D                 	db	13
   149  001DC2  CD                 	db	205
   150  001DC3  0F                 	db	15
   151  001DC4  CF                 	db	207
   152  001DC5  CE                 	db	206
   153  001DC6  0E                 	db	14
   154  001DC7  0A                 	db	10
   155  001DC8  CA                 	db	202
   156  001DC9  CB                 	db	203
   157  001DCA  0B                 	db	11
   158  001DCB  C9                 	db	201
   159  001DCC  09                 	db	9
   160  001DCD  08                 	db	8
   161  001DCE  C8                 	db	200
   162  001DCF  D8                 	db	216
   163  001DD0  18                 	db	24
   164  001DD1  19                 	db	25
   165  001DD2  D9                 	db	217
   166  001DD3  1B                 	db	27
   167  001DD4  DB                 	db	219
   168  001DD5  DA                 	db	218
   169  001DD6  1A                 	db	26
   170  001DD7  1E                 	db	30
   171  001DD8  DE                 	db	222
   172  001DD9  DF                 	db	223
   173  001DDA  1F                 	db	31
   174  001DDB  DD                 	db	221
   175  001DDC  1D                 	db	29
   176  001DDD  1C                 	db	28
   177  001DDE  DC                 	db	220
   178  001DDF  14                 	db	20
   179  001DE0  D4                 	db	212
   180  001DE1  D5                 	db	213
   181  001DE2  15                 	db	21
   182  001DE3  D7                 	db	215
   183  001DE4  17                 	db	23
   184  001DE5  16                 	db	22
   185  001DE6  D6                 	db	214
   186  001DE7  D2                 	db	210
   187  001DE8  12                 	db	18
   188  001DE9  13                 	db	19
   189  001DEA  D3                 	db	211
   190  001DEB  11                 	db	17
   191  001DEC  D1                 	db	209
   192  001DED  D0                 	db	208
   193  001DEE  10                 	db	16
   194  001DEF  F0                 	db	240
   195  001DF0  30                 	db	48
   196  001DF1  31                 	db	49
   197  001DF2  F1                 	db	241
   198  001DF3  33                 	db	51
   199  001DF4  F3                 	db	243
   200  001DF5  F2                 	db	242
   201  001DF6  32                 	db	50
   202  001DF7  36                 	db	54
   203  001DF8  F6                 	db	246
   204  001DF9  F7                 	db	247
   205  001DFA  37                 	db	55
   206  001DFB  F5                 	db	245
   207  001DFC  35                 	db	53
   208  001DFD  34                 	db	52
   209  001DFE  F4                 	db	244
   210  001DFF  3C                 	db	60
   211  001E00  FC                 	db	252
   212  001E01  FD                 	db	253
   213  001E02  3D                 	db	61
   214  001E03  FF                 	db	255
   215  001E04  3F                 	db	63
   216  001E05  3E                 	db	62
   217  001E06  FE                 	db	254
   218  001E07  FA                 	db	250
   219  001E08  3A                 	db	58
   220  001E09  3B                 	db	59
   221  001E0A  FB                 	db	251
   222  001E0B  39                 	db	57
   223  001E0C  F9                 	db	249
   224  001E0D  F8                 	db	248
   225  001E0E  38                 	db	56
   226  001E0F  28                 	db	40
   227  001E10  E8                 	db	232
   228  001E11  E9                 	db	233
   229  001E12  29                 	db	41
   230  001E13  EB                 	db	235
   231  001E14  2B                 	db	43
   232  001E15  2A                 	db	42
   233  001E16  EA                 	db	234
   234  001E17  EE                 	db	238
   235  001E18  2E                 	db	46
   236  001E19  2F                 	db	47
   237  001E1A  EF                 	db	239
   238  001E1B  2D                 	db	45
   239  001E1C  ED                 	db	237
   240  001E1D  EC                 	db	236
   241  001E1E  2C                 	db	44
   242  001E1F  E4                 	db	228
   243  001E20  24                 	db	36
   244  001E21  25                 	db	37
   245  001E22  E5                 	db	229
   246  001E23  27                 	db	39
   247  001E24  E7                 	db	231
   248  001E25  E6                 	db	230
   249  001E26  26                 	db	38
   250  001E27  22                 	db	34
   251  001E28  E2                 	db	226
   252  001E29  E3                 	db	227
   253  001E2A  23                 	db	35
   254  001E2B  E1                 	db	225
   255  001E2C  21                 	db	33
   256  001E2D  20                 	db	32
   257  001E2E  E0                 	db	224
   258  001E2F  A0                 	db	160
   259  001E30  60                 	db	96
   260  001E31  61                 	db	97
   261  001E32  A1                 	db	161
   262  001E33  63                 	db	99
   263  001E34  A3                 	db	163
   264  001E35  A2                 	db	162
   265  001E36  62                 	db	98
   266  001E37  66                 	db	102
   267  001E38  A6                 	db	166
   268  001E39  A7                 	db	167
   269  001E3A  67                 	db	103
   270  001E3B  A5                 	db	165
   271  001E3C  65                 	db	101
   272  001E3D  64                 	db	100
   273  001E3E  A4                 	db	164
   274  001E3F  6C                 	db	108
   275  001E40  AC                 	db	172
   276  001E41  AD                 	db	173
   277  001E42  6D                 	db	109
   278  001E43  AF                 	db	175
   279  001E44  6F                 	db	111
   280  001E45  6E                 	db	110
   281  001E46  AE                 	db	174
   282  001E47  AA                 	db	170
   283  001E48  6A                 	db	106
   284  001E49  6B                 	db	107
   285  001E4A  AB                 	db	171
   286  001E4B  69                 	db	105
   287  001E4C  A9                 	db	169
   288  001E4D  A8                 	db	168
   289  001E4E  68                 	db	104
   290  001E4F  78                 	db	120
   291  001E50  B8                 	db	184
   292  001E51  B9                 	db	185
   293  001E52  79                 	db	121
   294  001E53  BB                 	db	187
   295  001E54  7B                 	db	123
   296  001E55  7A                 	db	122
   297  001E56  BA                 	db	186
   298  001E57  BE                 	db	190
   299  001E58  7E                 	db	126
   300  001E59  7F                 	db	127
   301  001E5A  BF                 	db	191
   302  001E5B  7D                 	db	125
   303  001E5C  BD                 	db	189
   304  001E5D  BC                 	db	188
   305  001E5E  7C                 	db	124
   306  001E5F  B4                 	db	180
   307  001E60  74                 	db	116
   308  001E61  75                 	db	117
   309  001E62  B5                 	db	181
   310  001E63  77                 	db	119
   311  001E64  B7                 	db	183
   312  001E65  B6                 	db	182
   313  001E66  76                 	db	118
   314  001E67  72                 	db	114
   315  001E68  B2                 	db	178
   316  001E69  B3                 	db	179
   317  001E6A  73                 	db	115
   318  001E6B  B1                 	db	177
   319  001E6C  71                 	db	113
   320  001E6D  70                 	db	112
   321  001E6E  B0                 	db	176
   322  001E6F  50                 	db	80
   323  001E70  90                 	db	144
   324  001E71  91                 	db	145
   325  001E72  51                 	db	81
   326  001E73  93                 	db	147
   327  001E74  53                 	db	83
   328  001E75  52                 	db	82
   329  001E76  92                 	db	146
   330  001E77  96                 	db	150
   331  001E78  56                 	db	86
   332  001E79  57                 	db	87
   333  001E7A  97                 	db	151
   334  001E7B  55                 	db	85
   335  001E7C  95                 	db	149
   336  001E7D  94                 	db	148
   337  001E7E  54                 	db	84
   338  001E7F  9C                 	db	156
   339  001E80  5C                 	db	92
   340  001E81  5D                 	db	93
   341  001E82  9D                 	db	157
   342  001E83  5F                 	db	95
   343  001E84  9F                 	db	159
   344  001E85  9E                 	db	158
   345  001E86  5E                 	db	94
   346  001E87  5A                 	db	90
   347  001E88  9A                 	db	154
   348  001E89  9B                 	db	155
   349  001E8A  5B                 	db	91
   350  001E8B  99                 	db	153
   351  001E8C  59                 	db	89
   352  001E8D  58                 	db	88
   353  001E8E  98                 	db	152
   354  001E8F  88                 	db	136
   355  001E90  48                 	db	72
   356  001E91  49                 	db	73
   357  001E92  89                 	db	137
   358  001E93  4B                 	db	75
   359  001E94  8B                 	db	139
   360  001E95  8A                 	db	138
   361  001E96  4A                 	db	74
   362  001E97  4E                 	db	78
   363  001E98  8E                 	db	142
   364  001E99  8F                 	db	143
   365  001E9A  4F                 	db	79
   366  001E9B  8D                 	db	141
   367  001E9C  4D                 	db	77
   368  001E9D  4C                 	db	76
   369  001E9E  8C                 	db	140
   370  001E9F  44                 	db	68
   371  001EA0  84                 	db	132
   372  001EA1  85                 	db	133
   373  001EA2  45                 	db	69
   374  001EA3  87                 	db	135
   375  001EA4  47                 	db	71
   376  001EA5  46                 	db	70
   377  001EA6  86                 	db	134
   378  001EA7  82                 	db	130
   379  001EA8  42                 	db	66
   380  001EA9  43                 	db	67
   381  001EAA  83                 	db	131
   382  001EAB  41                 	db	65
   383  001EAC  81                 	db	129
   384  001EAD  80                 	db	128
   385  001EAE  40                 	db	64
   386  001EAF                     __end_of_table_crc_lo:
   387                           	callstack 0
   388  001EAF                     _table_crc_hi:
   389                           	callstack 0
   390  001EAF  00                 	db	0
   391  001EB0  C1                 	db	193
   392  001EB1  81                 	db	129
   393  001EB2  40                 	db	64
   394  001EB3  01                 	db	1
   395  001EB4  C0                 	db	192
   396  001EB5  80                 	db	128
   397  001EB6  41                 	db	65
   398  001EB7  01                 	db	1
   399  001EB8  C0                 	db	192
   400  001EB9  80                 	db	128
   401  001EBA  41                 	db	65
   402  001EBB  00                 	db	0
   403  001EBC  C1                 	db	193
   404  001EBD  81                 	db	129
   405  001EBE  40                 	db	64
   406  001EBF  01                 	db	1
   407  001EC0  C0                 	db	192
   408  001EC1  80                 	db	128
   409  001EC2  41                 	db	65
   410  001EC3  00                 	db	0
   411  001EC4  C1                 	db	193
   412  001EC5  81                 	db	129
   413  001EC6  40                 	db	64
   414  001EC7  00                 	db	0
   415  001EC8  C1                 	db	193
   416  001EC9  81                 	db	129
   417  001ECA  40                 	db	64
   418  001ECB  01                 	db	1
   419  001ECC  C0                 	db	192
   420  001ECD  80                 	db	128
   421  001ECE  41                 	db	65
   422  001ECF  01                 	db	1
   423  001ED0  C0                 	db	192
   424  001ED1  80                 	db	128
   425  001ED2  41                 	db	65
   426  001ED3  00                 	db	0
   427  001ED4  C1                 	db	193
   428  001ED5  81                 	db	129
   429  001ED6  40                 	db	64
   430  001ED7  00                 	db	0
   431  001ED8  C1                 	db	193
   432  001ED9  81                 	db	129
   433  001EDA  40                 	db	64
   434  001EDB  01                 	db	1
   435  001EDC  C0                 	db	192
   436  001EDD  80                 	db	128
   437  001EDE  41                 	db	65
   438  001EDF  00                 	db	0
   439  001EE0  C1                 	db	193
   440  001EE1  81                 	db	129
   441  001EE2  40                 	db	64
   442  001EE3  01                 	db	1
   443  001EE4  C0                 	db	192
   444  001EE5  80                 	db	128
   445  001EE6  41                 	db	65
   446  001EE7  01                 	db	1
   447  001EE8  C0                 	db	192
   448  001EE9  80                 	db	128
   449  001EEA  41                 	db	65
   450  001EEB  00                 	db	0
   451  001EEC  C1                 	db	193
   452  001EED  81                 	db	129
   453  001EEE  40                 	db	64
   454  001EEF  01                 	db	1
   455  001EF0  C0                 	db	192
   456  001EF1  80                 	db	128
   457  001EF2  41                 	db	65
   458  001EF3  00                 	db	0
   459  001EF4  C1                 	db	193
   460  001EF5  81                 	db	129
   461  001EF6  40                 	db	64
   462  001EF7  00                 	db	0
   463  001EF8  C1                 	db	193
   464  001EF9  81                 	db	129
   465  001EFA  40                 	db	64
   466  001EFB  01                 	db	1
   467  001EFC  C0                 	db	192
   468  001EFD  80                 	db	128
   469  001EFE  41                 	db	65
   470  001EFF  00                 	db	0
   471  001F00  C1                 	db	193
   472  001F01  81                 	db	129
   473  001F02  40                 	db	64
   474  001F03  01                 	db	1
   475  001F04  C0                 	db	192
   476  001F05  80                 	db	128
   477  001F06  41                 	db	65
   478  001F07  01                 	db	1
   479  001F08  C0                 	db	192
   480  001F09  80                 	db	128
   481  001F0A  41                 	db	65
   482  001F0B  00                 	db	0
   483  001F0C  C1                 	db	193
   484  001F0D  81                 	db	129
   485  001F0E  40                 	db	64
   486  001F0F  00                 	db	0
   487  001F10  C1                 	db	193
   488  001F11  81                 	db	129
   489  001F12  40                 	db	64
   490  001F13  01                 	db	1
   491  001F14  C0                 	db	192
   492  001F15  80                 	db	128
   493  001F16  41                 	db	65
   494  001F17  01                 	db	1
   495  001F18  C0                 	db	192
   496  001F19  80                 	db	128
   497  001F1A  41                 	db	65
   498  001F1B  00                 	db	0
   499  001F1C  C1                 	db	193
   500  001F1D  81                 	db	129
   501  001F1E  40                 	db	64
   502  001F1F  01                 	db	1
   503  001F20  C0                 	db	192
   504  001F21  80                 	db	128
   505  001F22  41                 	db	65
   506  001F23  00                 	db	0
   507  001F24  C1                 	db	193
   508  001F25  81                 	db	129
   509  001F26  40                 	db	64
   510  001F27  00                 	db	0
   511  001F28  C1                 	db	193
   512  001F29  81                 	db	129
   513  001F2A  40                 	db	64
   514  001F2B  01                 	db	1
   515  001F2C  C0                 	db	192
   516  001F2D  80                 	db	128
   517  001F2E  41                 	db	65
   518  001F2F  01                 	db	1
   519  001F30  C0                 	db	192
   520  001F31  80                 	db	128
   521  001F32  41                 	db	65
   522  001F33  00                 	db	0
   523  001F34  C1                 	db	193
   524  001F35  81                 	db	129
   525  001F36  40                 	db	64
   526  001F37  00                 	db	0
   527  001F38  C1                 	db	193
   528  001F39  81                 	db	129
   529  001F3A  40                 	db	64
   530  001F3B  01                 	db	1
   531  001F3C  C0                 	db	192
   532  001F3D  80                 	db	128
   533  001F3E  41                 	db	65
   534  001F3F  00                 	db	0
   535  001F40  C1                 	db	193
   536  001F41  81                 	db	129
   537  001F42  40                 	db	64
   538  001F43  01                 	db	1
   539  001F44  C0                 	db	192
   540  001F45  80                 	db	128
   541  001F46  41                 	db	65
   542  001F47  01                 	db	1
   543  001F48  C0                 	db	192
   544  001F49  80                 	db	128
   545  001F4A  41                 	db	65
   546  001F4B  00                 	db	0
   547  001F4C  C1                 	db	193
   548  001F4D  81                 	db	129
   549  001F4E  40                 	db	64
   550  001F4F  00                 	db	0
   551  001F50  C1                 	db	193
   552  001F51  81                 	db	129
   553  001F52  40                 	db	64
   554  001F53  01                 	db	1
   555  001F54  C0                 	db	192
   556  001F55  80                 	db	128
   557  001F56  41                 	db	65
   558  001F57  01                 	db	1
   559  001F58  C0                 	db	192
   560  001F59  80                 	db	128
   561  001F5A  41                 	db	65
   562  001F5B  00                 	db	0
   563  001F5C  C1                 	db	193
   564  001F5D  81                 	db	129
   565  001F5E  40                 	db	64
   566  001F5F  01                 	db	1
   567  001F60  C0                 	db	192
   568  001F61  80                 	db	128
   569  001F62  41                 	db	65
   570  001F63  00                 	db	0
   571  001F64  C1                 	db	193
   572  001F65  81                 	db	129
   573  001F66  40                 	db	64
   574  001F67  00                 	db	0
   575  001F68  C1                 	db	193
   576  001F69  81                 	db	129
   577  001F6A  40                 	db	64
   578  001F6B  01                 	db	1
   579  001F6C  C0                 	db	192
   580  001F6D  80                 	db	128
   581  001F6E  41                 	db	65
   582  001F6F  00                 	db	0
   583  001F70  C1                 	db	193
   584  001F71  81                 	db	129
   585  001F72  40                 	db	64
   586  001F73  01                 	db	1
   587  001F74  C0                 	db	192
   588  001F75  80                 	db	128
   589  001F76  41                 	db	65
   590  001F77  01                 	db	1
   591  001F78  C0                 	db	192
   592  001F79  80                 	db	128
   593  001F7A  41                 	db	65
   594  001F7B  00                 	db	0
   595  001F7C  C1                 	db	193
   596  001F7D  81                 	db	129
   597  001F7E  40                 	db	64
   598  001F7F  01                 	db	1
   599  001F80  C0                 	db	192
   600  001F81  80                 	db	128
   601  001F82  41                 	db	65
   602  001F83  00                 	db	0
   603  001F84  C1                 	db	193
   604  001F85  81                 	db	129
   605  001F86  40                 	db	64
   606  001F87  00                 	db	0
   607  001F88  C1                 	db	193
   608  001F89  81                 	db	129
   609  001F8A  40                 	db	64
   610  001F8B  01                 	db	1
   611  001F8C  C0                 	db	192
   612  001F8D  80                 	db	128
   613  001F8E  41                 	db	65
   614  001F8F  01                 	db	1
   615  001F90  C0                 	db	192
   616  001F91  80                 	db	128
   617  001F92  41                 	db	65
   618  001F93  00                 	db	0
   619  001F94  C1                 	db	193
   620  001F95  81                 	db	129
   621  001F96  40                 	db	64
   622  001F97  00                 	db	0
   623  001F98  C1                 	db	193
   624  001F99  81                 	db	129
   625  001F9A  40                 	db	64
   626  001F9B  01                 	db	1
   627  001F9C  C0                 	db	192
   628  001F9D  80                 	db	128
   629  001F9E  41                 	db	65
   630  001F9F  00                 	db	0
   631  001FA0  C1                 	db	193
   632  001FA1  81                 	db	129
   633  001FA2  40                 	db	64
   634  001FA3  01                 	db	1
   635  001FA4  C0                 	db	192
   636  001FA5  80                 	db	128
   637  001FA6  41                 	db	65
   638  001FA7  01                 	db	1
   639  001FA8  C0                 	db	192
   640  001FA9  80                 	db	128
   641  001FAA  41                 	db	65
   642  001FAB  00                 	db	0
   643  001FAC  C1                 	db	193
   644  001FAD  81                 	db	129
   645  001FAE  40                 	db	64
   646  001FAF                     __end_of_table_crc_hi:
   647                           	callstack 0
   648  001FAF  04                 	db	4
   649  001FB0  03                 	db	3
   650  001FB1  00                 	db	0
   651  001FB2  00                 	db	0
   652  001FB3  00                 	db	0
   653  001FB4  00                 	db	0
   654  001FB5  85                 	db	133
   655  001FB6  01                 	db	1
   656  001FB7  03                 	db	3
   657  001FB8  00                 	db	0
   658  001FB9  00                 	db	0
   659  001FBA  00                 	db	0
   660  001FBB  00                 	db	0
   661  001FBC  85                 	db	133
   662  001FBD  00                 	db	0
   663  001FBE  00                 	db	0
   664  001FBF  85                 	db	133
   665  001FC0                     __end_of_i400_mode:
   666                           	callstack 0
   667  001FC0  04                 	db	4
   668  001FC1  03                 	db	3
   669  001FC2  04                 	db	4
   670  001FC3  00                 	db	0
   671  001FC4  00                 	db	0
   672  001FC5  00                 	db	0
   673  001FC6  00                 	db	0
   674  001FC7  39                 	db	57
   675  001FC8  85                 	db	133
   676  001FC9                     __end_of_i400_error:
   677                           	callstack 0
   678  001FC9  04                 	db	4
   679  001FCA  06                 	db	6
   680  001FCB  00                 	db	0
   681  001FCC  00                 	db	0
   682  001FCD  00                 	db	0
   683  001FCE  01                 	db	1
   684  001FCF  60                 	db	96
   685  001FD0  00                 	db	0
   686  001FD1                     __end_of_i400_freset:
   687                           	callstack 0
   688  001FD1  04                 	db	4
   689  001FD2  06                 	db	6
   690  001FD3  00                 	db	0
   691  001FD4  00                 	db	0
   692  001FD5  00                 	db	0
   693  001FD6  01                 	db	1
   694  001FD7  5D                 	db	93
   695  001FD8  C0                 	db	192
   696  001FD9                     __end_of_i400_clear:
   697                           	callstack 0
   698  001FD9                     _build_version:
   699                           	callstack 0
   700  001FD9  33                 	db	51
   701  001FDA  2E                 	db	46
   702  001FDB  30                 	db	48
   703  001FDC  61                 	db	97
   704  001FDD  00                 	db	0
   705  001FDE                     __end_of_build_version:
   706                           	callstack 0
   707  001FDE                     _modbus_cc_error:
   708                           	callstack 0
   709  001FDE  04                 	db	4
   710  001FDF  03                 	db	3
   711  001FE0  00                 	db	0
   712  001FE1  0A                 	db	10
   713  001FE2  00                 	db	0
   714  001FE3  02                 	db	2
   715  001FE4                     __end_of_modbus_cc_error:
   716                           	callstack 0
   717  001FE4                     _modbus_cc_mode:
   718                           	callstack 0
   719  001FE4  04                 	db	4
   720  001FE5  03                 	db	3
   721  001FE6  00                 	db	0
   722  001FE7  00                 	db	0
   723  001FE8  00                 	db	0
   724  001FE9  06                 	db	6
   725  001FEA                     __end_of_modbus_cc_mode:
   726                           	callstack 0
   727  0000                     _RCREG	set	4014
   728  0000                     _IPR1bits	set	3999
   729  0000                     _INTCONbits	set	4082
   730  0000                     _SPBRG	set	4015
   731  0000                     _SPBRGH	set	4016
   732  0000                     _BAUDCTLbits	set	4010
   733  0000                     _PIR1bits	set	3998
   734  0000                     _RCSTAbits	set	4011
   735  0000                     _PIE1bits	set	3997
   736  0000                     _RCSTA	set	4011
   737  0000                     _TXSTA	set	4012
   738  0000                     _PR2	set	4043
   739  0000                     _T2CONbits	set	4042
   740  0000                     _TMR1L	set	4046
   741  0000                     _TMR1H	set	4047
   742  0000                     _T1CON	set	4045
   743  0000                     _TMR0L	set	4054
   744  0000                     _TMR0H	set	4055
   745  0000                     _T0CON	set	4053
   746  0000                     _INTCON2bits	set	4081
   747  0000                     _TRISB	set	3987
   748  0000                     _TRISA	set	3986
   749  0000                     _RCONbits	set	4048
   750  0000                     _ADCON1	set	4033
   751  0000                     _STKPTRbits	set	4092
   752  0000                     _RCON	set	4048
   753  0000                     _LATBbits	set	3978
   754  0000                     _TXREG	set	4013
   755  0000                     _TXSTAbits	set	4012
   756  0000                     _LATAbits	set	3977
   757  0000                     _CCP1CON	set	4029
   758  0000                     _CCPR1L	set	4030
   759  001FEA                     STR_1:
   760  001FEA  4F                 	db	79	;'O'
   761  001FEB  63                 	db	99	;'c'
   762  001FEC  74                 	db	116	;'t'
   763  001FED  20                 	db	32
   764  001FEE  31                 	db	49	;'1'
   765  001FEF  37                 	db	55	;'7'
   766  001FF0  20                 	db	32
   767  001FF1  32                 	db	50	;'2'
   768  001FF2  30                 	db	48	;'0'
   769  001FF3  32                 	db	50	;'2'
   770  001FF4  31                 	db	49	;'1'
   771  001FF5  00                 	db	0
   772  001FF6                     STR_2:
   773  001FF6  31                 	db	49	;'1'
   774  001FF7  35                 	db	53	;'5'
   775  001FF8  3A                 	db	58	;':'
   776  001FF9  31                 	db	49	;'1'
   777  001FFA  37                 	db	55	;'7'
   778  001FFB  3A                 	db	58	;':'
   779  001FFC  33                 	db	51	;'3'
   780  001FFD  30                 	db	48	;'0'
   781  001FFE  00                 	db	0
   782  001FFF  00                 	db	0	; dummy byte at the end
   783  0000                     
   784                           ; #config settings
   785                           
   786                           	psect	cinit
   787  000740                     __pcinit:
   788                           	callstack 0
   789  000740                     start_initialization:
   790                           	callstack 0
   791  000740                     __initialization:
   792                           	callstack 0
   793                           
   794                           ; Initialize objects allocated to COMRAM (41 bytes)
   795                           ; load TBLPTR registers with __pidataCOMRAM
   796  000740  0EB4               	movlw	low __pidataCOMRAM
   797  000742  6EF6               	movwf	tblptrl,c
   798  000744  0E08               	movlw	high __pidataCOMRAM
   799  000746  6EF7               	movwf	tblptrh,c
   800  000748  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   801  00074A  6EF8               	movwf	tblptru,c
   802  00074C  EE00  F001         	lfsr	0,__pdataCOMRAM
   803  000750  EE10 F029          	lfsr	1,41
   804  000754                     copy_data0:
   805  000754  0009               	tblrd		*+
   806  000756  CFF5 FFEE          	movff	tablat,postinc0
   807  00075A  50E5               	movf	postdec1,w,c
   808  00075C  50E1               	movf	fsr1l,w,c
   809  00075E  E1FA               	bnz	copy_data0
   810                           
   811                           ; Clear objects allocated to BANK0 (64 bytes)
   812  000760  EE00  F080         	lfsr	0,__pbssBANK0
   813  000764  0E40               	movlw	64
   814  000766                     clear_0:
   815  000766  6AEE               	clrf	postinc0,c
   816  000768  06E8               	decf	wreg,f,c
   817  00076A  E1FD               	bnz	clear_0
   818                           
   819                           ; Clear objects allocated to COMRAM (25 bytes)
   820  00076C  EE00  F04D         	lfsr	0,__pbssCOMRAM
   821  000770  0E19               	movlw	25
   822  000772                     clear_1:
   823  000772  6AEE               	clrf	postinc0,c
   824  000774  06E8               	decf	wreg,f,c
   825  000776  E1FD               	bnz	clear_1
   826  000778                     end_of_initialization:
   827                           	callstack 0
   828  000778                     __end_of__initialization:
   829                           	callstack 0
   830  000778  9066               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   831  00077A  9266               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   832  00077C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   833  00077E  6EF8               	movwf	tblptru,c
   834  000780  0100               	movlb	0
   835  000782  EFB0  F004         	goto	_main	;jump to C main() function
   836                           
   837                           	psect	bssCOMRAM
   838  00004D                     __pbssCOMRAM:
   839                           	callstack 0
   840  00004D                     get_500hz@tmp:
   841                           	callstack 0
   842  00004D                     	ds	4
   843  000051                     get_10hz@tmp:
   844                           	callstack 0
   845  000051                     	ds	4
   846  000055                     get_2hz@tmp:
   847                           	callstack 0
   848  000055                     	ds	4
   849  000059                     _crc_error:
   850                           	callstack 0
   851  000059                     	ds	4
   852  00005D                     _rvalue:
   853                           	callstack 0
   854  00005D                     	ds	2
   855  00005F                     _req_length:
   856                           	callstack 0
   857  00005F                     	ds	2
   858  000061                     tm_handler@c_error:
   859                           	callstack 0
   860  000061                     	ds	1
   861  000062                     controller_work@modbus_command:
   862                           	callstack 0
   863  000062                     	ds	1
   864  000063                     controller_work@cstate:
   865                           	callstack 0
   866  000063                     	ds	1
   867  000064                     controller_work@mcmd:
   868                           	callstack 0
   869  000064                     	ds	1
   870  000065                     _cc_stream_file:
   871                           	callstack 0
   872  000065                     	ds	1
   873                           
   874                           	psect	dataCOMRAM
   875  000001                     __pdataCOMRAM:
   876                           	callstack 0
   877  000001                     _V:
   878                           	callstack 0
   879  000001                     	ds	20
   880  000015                     _build_time:
   881                           	callstack 0
   882  000015                     	ds	2
   883  000017                     _build_date:
   884                           	callstack 0
   885  000017                     	ds	2
   886  000019                     _i400_power:
   887                           	callstack 0
   888  000019                     	ds	2
   889  00001B                     _i400_pwm:
   890                           	callstack 0
   891  00001B                     	ds	2
   892  00001D                     controller_work@volts:
   893                           	callstack 0
   894  00001D                     	ds	1
   895  00001E                     _modbus_cc_freset:
   896                           	callstack 0
   897  00001E                     	ds	6
   898  000024                     _modbus_cc_clear:
   899                           	callstack 0
   900  000024                     	ds	6
   901                           
   902                           	psect	bssBANK0
   903  000080                     __pbssBANK0:
   904                           	callstack 0
   905  000080                     _cc_buffer:
   906                           	callstack 0
   907  000080                     	ds	64
   908                           
   909                           	psect	cstackCOMRAM
   910  00002A                     __pcstackCOMRAM:
   911                           	callstack 0
   912  00002A                     ??_led_blink:
   913  00002A                     
   914                           ; 4 bytes @ 0x0
   915  00002A                     	ds	5
   916  00002F                     ??_tm_handler:
   917                           
   918                           ; 1 bytes @ 0x5
   919  00002F                     	ds	3
   920  000032                     ?_crc16:
   921                           	callstack 0
   922  000032                     ?_get_10hz:
   923                           	callstack 0
   924  000032                     ?_get_500hz:
   925                           	callstack 0
   926  000032                     get_2hz@mode:
   927                           	callstack 0
   928  000032                     set_led_blink@blinks:
   929                           	callstack 0
   930  000032                     crc16@buffer:
   931                           	callstack 0
   932  000032                     memcpy@d1:
   933                           	callstack 0
   934  000032                     SetDCPWM1@dutycycle:
   935                           	callstack 0
   936                           
   937                           ; 2 bytes @ 0x8
   938  000032                     	ds	1
   939  000033                     crc16@buffer_length:
   940                           	callstack 0
   941  000033                     memcpy@s1:
   942                           	callstack 0
   943                           
   944                           ; 2 bytes @ 0x9
   945  000033                     	ds	1
   946  000034                     ??_SetDCPWM1:
   947                           
   948                           ; 1 bytes @ 0xA
   949  000034                     	ds	1
   950  000035                     ??_crc16:
   951  000035                     memcpy@n:
   952                           	callstack 0
   953                           
   954                           ; 2 bytes @ 0xB
   955  000035                     	ds	1
   956  000036                     get_10hz@mode:
   957                           	callstack 0
   958  000036                     get_500hz@mode:
   959                           	callstack 0
   960  000036                     SetDCPWM1@DCycle:
   961                           	callstack 0
   962                           
   963                           ; 2 bytes @ 0xC
   964  000036                     	ds	1
   965  000037                     crc16@i:
   966                           	callstack 0
   967  000037                     memcpy@s:
   968                           	callstack 0
   969                           
   970                           ; 2 bytes @ 0xD
   971  000037                     	ds	1
   972  000038                     crc16@crc_hi:
   973                           	callstack 0
   974                           
   975                           ; 1 bytes @ 0xE
   976  000038                     	ds	1
   977  000039                     crc16@crc_lo:
   978                           	callstack 0
   979  000039                     memcpy@tmp:
   980                           	callstack 0
   981                           
   982                           ; 1 bytes @ 0xF
   983  000039                     	ds	1
   984  00003A                     ?_modbus_rtu_send_msg_crc:
   985                           	callstack 0
   986  00003A                     modbus_rtu_send_msg_crc@req:
   987                           	callstack 0
   988  00003A                     memcpy@d:
   989                           	callstack 0
   990                           
   991                           ; 1 bytes @ 0x10
   992  00003A                     	ds	1
   993  00003B                     modbus_rtu_send_msg_crc@req_length:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x11
   997  00003B                     	ds	2
   998  00003D                     modbus_rtu_send_msg_crc@crc:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x13
  1002  00003D                     	ds	2
  1003  00003F                     ?_modbus_rtu_send_msg:
  1004                           	callstack 0
  1005  00003F                     modbus_rtu_send_msg@cc_buffer:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x15
  1009  00003F                     	ds	1
  1010  000040                     modbus_rtu_send_msg@modbus_cc_mode:
  1011                           	callstack 0
  1012                           
  1013                           ; 2 bytes @ 0x16
  1014  000040                     	ds	2
  1015  000042                     modbus_rtu_send_msg@req_length:
  1016                           	callstack 0
  1017                           
  1018                           ; 2 bytes @ 0x18
  1019  000042                     	ds	2
  1020  000044                     ??_controller_work:
  1021                           
  1022                           ; 1 bytes @ 0x1A
  1023  000044                     	ds	2
  1024  000046                     controller_work@temp:
  1025                           	callstack 0
  1026                           
  1027                           ; 2 bytes @ 0x1C
  1028  000046                     	ds	2
  1029  000048                     controller_work@temp_727:
  1030                           	callstack 0
  1031                           
  1032                           ; 1 bytes @ 0x1E
  1033  000048                     	ds	1
  1034  000049                     controller_work@c_crc:
  1035                           	callstack 0
  1036                           
  1037                           ; 2 bytes @ 0x1F
  1038  000049                     	ds	2
  1039  00004B                     controller_work@c_crc_rec:
  1040                           	callstack 0
  1041                           
  1042                           ; 2 bytes @ 0x21
  1043  00004B                     	ds	2
  1044  00004D                     
  1045                           ; 1 bytes @ 0x23
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 431 in file "../ibsmon.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;		None
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0
  1065 ;;      Params:         0       0
  1066 ;;      Locals:         0       0
  1067 ;;      Temps:          0       0
  1068 ;;      Totals:         0       0
  1069 ;;Total ram usage:        0 bytes
  1070 ;; Hardware stack levels required when called: 6
  1071 ;; This function calls:
  1072 ;;		_controller_work
  1073 ;;		_init_i400mon
  1074 ;; This function is called by:
  1075 ;;		Startup code after reset
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text0
  1080  000960                     __ptext0:
  1081                           	callstack 0
  1082  000960                     _main:
  1083                           	callstack 25
  1084                           
  1085                           ;../ibsmon.c: 433:  init_i400mon();
  1086                           
  1087                           ;incstack = 0
  1088  000960  ECC0  F002         	call	_init_i400mon	;wreg free
  1089  000964                     l2061:
  1090                           
  1091                           ;../ibsmon.c: 436:   controller_work();
  1092  000964  EC5B  F000         	call	_controller_work	;wreg free
  1093  000968  D7FD               	goto	l2061
  1094  00096A                     __end_of_main:
  1095                           	callstack 0
  1096                           
  1097 ;; *************** function _init_i400mon *****************
  1098 ;; Defined at:
  1099 ;;		line 347 in file "../ibsmon.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  tmp             2    0        unsigned short 
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, status,2, status,0, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0
  1113 ;;      Params:         0       0
  1114 ;;      Locals:         0       0
  1115 ;;      Temps:          0       0
  1116 ;;      Totals:         0       0
  1117 ;;Total ram usage:        0 bytes
  1118 ;; Hardware stack levels used: 1
  1119 ;; Hardware stack levels required when called: 3
  1120 ;; This function calls:
  1121 ;;		_SetDCPWM1
  1122 ;;		_init_stream_params
  1123 ;;		_set_led_blink
  1124 ;; This function is called by:
  1125 ;;		_main
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text1
  1130  000580                     __ptext1:
  1131                           	callstack 0
  1132  000580                     _init_i400mon:
  1133                           	callstack 27
  1134                           
  1135                           ;../ibsmon.c: 349:  uint16_t tmp;;../ibsmon.c: 350:  V.boot_code = 0;
  1136                           
  1137                           ;incstack = 0
  1138  000580  960F               	bcf	(_V+14)^0,3,c	;volatile
  1139                           
  1140                           ;../ibsmon.c: 351:  LATBbits.LATB2 = 0;
  1141  000582  948A               	bcf	138,2,c	;volatile
  1142                           
  1143                           ;../ibsmon.c: 352:  if (RCON != 0b0011100) {
  1144  000584  0E1C               	movlw	28
  1145  000586  18D0               	xorwf	208,w,c	;volatile
  1146  000588  A4D8               	btfss	status,2,c
  1147                           
  1148                           ;../ibsmon.c: 353:   V.boot_code = 1;
  1149  00058A  860F               	bsf	(_V+14)^0,3,c	;volatile
  1150                           
  1151                           ;../ibsmon.c: 356:  if (STKPTRbits.STKFUL || STKPTRbits.STKUNF) {
  1152                           
  1153                           ;../ibsmon.c: 354:  }
  1154  00058C  BEFC               	btfsc	252,7,c	;volatile
  1155  00058E  D002               	goto	u1040
  1156  000590  ACFC               	btfss	252,6,c	;volatile
  1157  000592  D003               	goto	l206
  1158  000594                     u1040:
  1159                           
  1160                           ;../ibsmon.c: 357:   V.boot_code = 1;
  1161  000594  860F               	bsf	(_V+14)^0,3,c	;volatile
  1162                           
  1163                           ;../ibsmon.c: 358:   STKPTRbits.STKFUL = 0;
  1164  000596  9EFC               	bcf	252,7,c	;volatile
  1165                           
  1166                           ;../ibsmon.c: 359:   STKPTRbits.STKUNF = 0;
  1167  000598  9CFC               	bcf	252,6,c	;volatile
  1168  00059A                     l206:
  1169                           
  1170                           ;../ibsmon.c: 362:  if (V.boot_code) {
  1171  00059A  B60F               	btfsc	(_V+14)^0,3,c	;volatile
  1172                           
  1173                           ;../ibsmon.c: 363:   LATBbits.LATB2 = 1;
  1174  00059C  848A               	bsf	138,2,c	;volatile
  1175                           
  1176                           ;../ibsmon.c: 366:  ADCON1 = 0x7F;
  1177  00059E  0E7F               	movlw	127
  1178  0005A0  6EC1               	movwf	193,c	;volatile
  1179                           
  1180                           ;../ibsmon.c: 368:  RCONbits.IPEN = 1;
  1181  0005A2  8ED0               	bsf	208,7,c	;volatile
  1182                           
  1183                           ;../ibsmon.c: 370:  TRISA = 0b00001100;
  1184  0005A4  0E0C               	movlw	12
  1185  0005A6  6E92               	movwf	146,c	;volatile
  1186                           
  1187                           ;../ibsmon.c: 371:  TRISB = 0b00010010;
  1188  0005A8  0E12               	movlw	18
  1189  0005AA  6E93               	movwf	147,c	;volatile
  1190                           
  1191                           ;../ibsmon.c: 372:  INTCON2bits.RBPU = 0;
  1192  0005AC  9EF1               	bcf	241,7,c	;volatile
  1193                           
  1194                           ;../ibsmon.c: 374:  LATBbits.LATB0 = 0;
  1195  0005AE  908A               	bcf	138,0,c	;volatile
  1196                           
  1197                           ;../ibsmon.c: 375:  LATAbits.LATA2 = 0;
  1198  0005B0  9489               	bcf	137,2,c	;volatile
  1199                           
  1200                           ;../ibsmon.c: 376:  V.clock_blinks = 0;
  1201  0005B2  0E00               	movlw	0
  1202  0005B4  6E0D               	movwf	(_V+12)^0,c	;volatile
  1203                           
  1204                           ;../ibsmon.c: 377:  set_led_blink(0);
  1205  0005B6  0E00               	movlw	0
  1206  0005B8  EC6F  F004         	call	_set_led_blink
  1207                           
  1208                           ;../ibsmon.c: 379:  T0CON = 0b10000101;
  1209  0005BC  0E85               	movlw	133
  1210  0005BE  6ED5               	movwf	213,c	;volatile
  1211                           
  1212                           ;../ibsmon.c: 381:  TMR0H = (uint8_t) tmp;
  1213  0005C0  0E67               	movlw	103
  1214  0005C2  6ED7               	movwf	215,c	;volatile
  1215                           
  1216                           ;../ibsmon.c: 383:  TMR0L = (uint8_t) tmp;
  1217  0005C4  0EE8               	movlw	232
  1218  0005C6  6ED6               	movwf	214,c	;volatile
  1219                           
  1220                           ;../ibsmon.c: 385:  T1CON = 0b10100101;
  1221  0005C8  0EA5               	movlw	165
  1222  0005CA  6ECD               	movwf	205,c	;volatile
  1223                           
  1224                           ;../ibsmon.c: 387:  TMR1H = (uint8_t) tmp;
  1225  0005CC  0EF6               	movlw	246
  1226  0005CE  6ECF               	movwf	207,c	;volatile
  1227                           
  1228                           ;../ibsmon.c: 389:  TMR1L = (uint8_t) tmp;
  1229  0005D0  0E60               	movlw	96
  1230  0005D2  6ECE               	movwf	206,c	;volatile
  1231                           
  1232                           ;../ibsmon.c: 391:  CCP1CON |= 0b00001100;
  1233  0005D4  0E0C               	movlw	12
  1234  0005D6  12BD               	iorwf	189,f,c	;volatile
  1235                           
  1236                           ;../ibsmon.c: 392:  T2CONbits.TMR2ON = 0;
  1237  0005D8  94CA               	bcf	202,2,c	;volatile
  1238                           
  1239                           ;../ibsmon.c: 393:  PR2 = 65;
  1240  0005DA  0E41               	movlw	65
  1241  0005DC  6ECB               	movwf	203,c	;volatile
  1242                           
  1243                           ;../ibsmon.c: 394:  T2CONbits.TMR2ON = 1;
  1244  0005DE  84CA               	bsf	202,2,c	;volatile
  1245                           
  1246                           ;../ibsmon.c: 395:  V.pwm_volts = 255;
  1247  0005E0  6812               	setf	(_V+17)^0,c	;volatile
  1248                           
  1249                           ;../ibsmon.c: 396:  SetDCPWM1(V.pwm_volts);
  1250  0005E2  C012  F032         	movff	_V+17,SetDCPWM1@dutycycle	;volatile
  1251  0005E6  6A33               	clrf	(SetDCPWM1@dutycycle+1)^0,c
  1252  0005E8  EC24  F004         	call	_SetDCPWM1	;wreg free
  1253                           
  1254                           ;../ibsmon.c: 399:  TXSTA = 0;
  1255  0005EC  0E00               	movlw	0
  1256  0005EE  6EAC               	movwf	172,c	;volatile
  1257                           
  1258                           ;../ibsmon.c: 400:  RCSTA = 0;
  1259  0005F0  0E00               	movlw	0
  1260  0005F2  6EAB               	movwf	171,c	;volatile
  1261                           
  1262                           ;../ibsmon.c: 401:  PIE1bits.RCIE = 1;
  1263  0005F4  8A9D               	bsf	157,5,c	;volatile
  1264                           
  1265                           ;../ibsmon.c: 402:  PIE1bits.TXIE = 0;
  1266  0005F6  989D               	bcf	157,4,c	;volatile
  1267                           
  1268                           ;../ibsmon.c: 403:  TXSTAbits.SYNC = 0;
  1269  0005F8  98AC               	bcf	172,4,c	;volatile
  1270                           
  1271                           ;../ibsmon.c: 404:  RCSTAbits.CREN = 1;
  1272  0005FA  88AB               	bsf	171,4,c	;volatile
  1273                           
  1274                           ;../ibsmon.c: 405:  PIR1bits.TXIF = 0;
  1275  0005FC  989E               	bcf	158,4,c	;volatile
  1276                           
  1277                           ;../ibsmon.c: 406:  PIR1bits.RCIF = 0;
  1278  0005FE  9A9E               	bcf	158,5,c	;volatile
  1279                           
  1280                           ;../ibsmon.c: 407:  BAUDCTLbits.BRG16 = 1;
  1281  000600  86AA               	bsf	170,3,c	;volatile
  1282                           
  1283                           ;../ibsmon.c: 408:  TXSTAbits.BRGH = 0;
  1284  000602  94AC               	bcf	172,2,c	;volatile
  1285                           
  1286                           ;../ibsmon.c: 409:  SPBRGH = 0;
  1287  000604  0E00               	movlw	0
  1288  000606  6EB0               	movwf	176,c	;volatile
  1289                           
  1290                           ;../ibsmon.c: 410:  SPBRG = 42;
  1291  000608  0E2A               	movlw	42
  1292  00060A  6EAF               	movwf	175,c	;volatile
  1293                           
  1294                           ;../ibsmon.c: 411:  TXSTAbits.TXEN = 1;
  1295  00060C  8AAC               	bsf	172,5,c	;volatile
  1296                           
  1297                           ;../ibsmon.c: 412:  RCSTAbits.SPEN = 1;
  1298  00060E  8EAB               	bsf	171,7,c	;volatile
  1299                           
  1300                           ;../ibsmon.c: 414:  INTCONbits.TMR0IE = 1;
  1301  000610  8AF2               	bsf	242,5,c	;volatile
  1302                           
  1303                           ;../ibsmon.c: 415:  INTCON2bits.TMR0IP = 1;
  1304  000612  84F1               	bsf	241,2,c	;volatile
  1305                           
  1306                           ;../ibsmon.c: 416:  PIE1bits.TMR1IE = 1;
  1307  000614  809D               	bsf	157,0,c	;volatile
  1308                           
  1309                           ;../ibsmon.c: 417:  IPR1bits.TMR1IP = 1;
  1310  000616  809F               	bsf	159,0,c	;volatile
  1311                           
  1312                           ;../ibsmon.c: 419:  init_stream_params();
  1313  000618  ECB5  F004         	call	_init_stream_params	;wreg free
  1314                           
  1315                           ;../ibsmon.c: 422:  INTCONbits.GIEH = 1;
  1316  00061C  8EF2               	bsf	242,7,c	;volatile
  1317  00061E  0012               	return		;funcret
  1318  000620                     __end_of_init_i400mon:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _init_stream_params *****************
  1322 ;; Defined at:
  1323 ;;		line 425 in file "../ibsmon.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  1    wreg      unsigned char 
  1330 ;; Registers used:
  1331 ;;		None
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0
  1337 ;;      Params:         0       0
  1338 ;;      Locals:         0       0
  1339 ;;      Temps:          0       0
  1340 ;;      Totals:         0       0
  1341 ;;Total ram usage:        0 bytes
  1342 ;; Hardware stack levels used: 1
  1343 ;; Hardware stack levels required when called: 2
  1344 ;; This function calls:
  1345 ;;		Nothing
  1346 ;; This function is called by:
  1347 ;;		_init_i400mon
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text2
  1352  00096A                     __ptext2:
  1353                           	callstack 0
  1354  00096A                     _init_stream_params:
  1355                           	callstack 27
  1356                           
  1357                           ;../ibsmon.c: 427:  V.config = 0;
  1358                           
  1359                           ;incstack = 0
  1360  00096A  920F               	bcf	(_V+14)^0,1,c	;volatile
  1361                           
  1362                           ;../ibsmon.c: 428:  return 0;;	Return value of _init_stream_params is never used
  1363  00096C  0012               	return		;funcret
  1364  00096E                     __end_of_init_stream_params:
  1365                           	callstack 0
  1366                           
  1367 ;; *************** function _controller_work *****************
  1368 ;; Defined at:
  1369 ;;		line 118 in file "../ibsmon.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;		None
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  temp            1   30[COMRAM] unsigned char 
  1374 ;;  temp            2   28[COMRAM] unsigned short 
  1375 ;;  c_crc_rec       2   33[COMRAM] unsigned short 
  1376 ;;  c_crc           2   31[COMRAM] unsigned short 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      char 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0
  1386 ;;      Params:         0       0
  1387 ;;      Locals:         7       0
  1388 ;;      Temps:          2       0
  1389 ;;      Totals:         9       0
  1390 ;;Total ram usage:        9 bytes
  1391 ;; Hardware stack levels used: 1
  1392 ;; Hardware stack levels required when called: 5
  1393 ;; This function calls:
  1394 ;;		_SetDCPWM1
  1395 ;;		_clear_10hz
  1396 ;;		_clear_2hz
  1397 ;;		_clear_500hz
  1398 ;;		_crc16
  1399 ;;		_get_10hz
  1400 ;;		_get_2hz
  1401 ;;		_get_500hz
  1402 ;;		_modbus_rtu_send_msg
  1403 ;;		_set_led_blink
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           	psect	text3
  1410  0000B6                     __ptext3:
  1411                           	callstack 0
  1412  0000B6                     _controller_work:
  1413                           	callstack 25
  1414                           
  1415                           ;../ibsmon.c: 120:  static uint8_t mcmd = G_MODE;;../ibsmon.c: 121:  static comm_type cs
      +                          tate = CLEAR;;../ibsmon.c: 122:  static cmd_type modbus_command = G_MODE;;../ibsmon.c: 1
      +                          24:  switch (cstate) {
  1416                           
  1417                           ;incstack = 0
  1418  0000B6  D24F               	goto	l1915
  1419  0000B8                     l1677:
  1420                           
  1421                           ;../ibsmon.c: 126:   clear_2hz();
  1422  0000B8  EC9A  F004         	call	_clear_2hz	;wreg free
  1423                           
  1424                           ;../ibsmon.c: 127:   clear_10hz();
  1425  0000BC  ECA5  F004         	call	_clear_10hz	;wreg free
  1426                           
  1427                           ;../ibsmon.c: 128:   cstate = INIT;
  1428  0000C0  0E01               	movlw	1
  1429  0000C2  6E63               	movwf	controller_work@cstate^0,c
  1430                           
  1431                           ;../ibsmon.c: 129:   modbus_command = mcmd++;
  1432  0000C4  C064  F062         	movff	controller_work@mcmd,controller_work@modbus_command
  1433  0000C8  2A64               	incf	controller_work@mcmd^0,f,c
  1434                           
  1435                           ;../ibsmon.c: 130:   if (mcmd > G_LAST) {
  1436  0000CA  0E04               	movlw	4
  1437  0000CC  6464               	cpfsgt	controller_work@mcmd^0,c
  1438  0000CE  D070               	goto	l1715
  1439                           
  1440                           ;../ibsmon.c: 131:    mcmd = G_MODE;
  1441  0000D0  0E00               	movlw	0
  1442  0000D2  6E64               	movwf	controller_work@mcmd^0,c
  1443  0000D4  D06D               	goto	l1715
  1444  0000D6                     l1689:
  1445                           
  1446                           ;../ibsmon.c: 138:    rvalue.value = i400_pwm;
  1447  0000D6  0E01               	movlw	1
  1448  0000D8  6E5E               	movwf	(_rvalue+1)^0,c
  1449  0000DA  0E71               	movlw	113
  1450  0000DC  6E5D               	movwf	_rvalue^0,c
  1451                           
  1452                           ;../ibsmon.c: 139:    modbus_cc_freset[4] = rvalue.bytes[1];
  1453  0000DE  C05E  F022         	movff	_rvalue+1,_modbus_cc_freset+4
  1454                           
  1455                           ;../ibsmon.c: 140:    modbus_cc_freset[5] = rvalue.bytes[0];
  1456  0000E2  C05D  F023         	movff	_rvalue,_modbus_cc_freset+5
  1457                           
  1458                           ;../ibsmon.c: 141:    req_length = modbus_rtu_send_msg((void*) cc_buffer, (const void *)
      +                           modbus_cc_freset, sizeof(modbus_cc_freset));
  1459  0000E6  0E80               	movlw	low _cc_buffer
  1460  0000E8  6E3F               	movwf	modbus_rtu_send_msg@cc_buffer^0,c
  1461  0000EA  0E1E               	movlw	low _modbus_cc_freset
  1462  0000EC  6E40               	movwf	modbus_rtu_send_msg@modbus_cc_mode^0,c
  1463  0000EE  6A41               	clrf	(modbus_rtu_send_msg@modbus_cc_mode+1)^0,c
  1464  0000F0  0E00               	movlw	0
  1465  0000F2  6E43               	movwf	(modbus_rtu_send_msg@req_length+1)^0,c
  1466  0000F4  0E06               	movlw	6
  1467  0000F6  6E42               	movwf	modbus_rtu_send_msg@req_length^0,c
  1468  0000F8  EC41  F004         	call	_modbus_rtu_send_msg	;wreg free
  1469  0000FC  C03F  F05F         	movff	?_modbus_rtu_send_msg,_req_length
  1470  000100  C040  F060         	movff	?_modbus_rtu_send_msg+1,_req_length+1
  1471                           
  1472                           ;../ibsmon.c: 142:    break;
  1473  000104  0012               	return	
  1474  000106                     l1697:
  1475                           
  1476                           ;../ibsmon.c: 144:    i400_power = V.power_on << 8;
  1477  000106  A80F               	btfss	(_V+14)^0,4,c	;volatile
  1478  000108  D002               	goto	u720
  1479  00010A  0E01               	movlw	1
  1480  00010C  D001               	goto	u726
  1481  00010E                     u720:
  1482  00010E  0E00               	movlw	0
  1483  000110                     u726:
  1484  000110  6E1A               	movwf	(_i400_power+1)^0,c
  1485  000112  6A19               	clrf	_i400_power^0,c
  1486                           
  1487                           ;../ibsmon.c: 145:    i400_power += (((uint16_t) (V.error & 0x00ff)) << 9) + 0x0030;;
  1488  000114  0EFF               	movlw	255
  1489  000116  1413               	andwf	(_V+18)^0,w,c	;volatile
  1490  000118  6E44               	movwf	??_controller_work^0,c
  1491  00011A  0E00               	movlw	0
  1492  00011C  1414               	andwf	(_V+19)^0,w,c	;volatile
  1493  00011E  6E45               	movwf	(??_controller_work+1)^0,c
  1494  000120  0E09               	movlw	9
  1495  000122                     u735:
  1496  000122  90D8               	bcf	status,0,c
  1497  000124  3644               	rlcf	??_controller_work^0,f,c
  1498  000126  3645               	rlcf	(??_controller_work+1)^0,f,c
  1499  000128  2EE8               	decfsz	wreg,f,c
  1500  00012A  D7FB               	goto	u735
  1501  00012C  0E30               	movlw	48
  1502  00012E  2644               	addwf	??_controller_work^0,f,c
  1503  000130  0E00               	movlw	0
  1504  000132  2245               	addwfc	(??_controller_work+1)^0,f,c
  1505  000134  5044               	movf	??_controller_work^0,w,c
  1506  000136  2619               	addwf	_i400_power^0,f,c
  1507  000138  5045               	movf	(??_controller_work+1)^0,w,c
  1508  00013A  221A               	addwfc	(_i400_power+1)^0,f,c
  1509                           
  1510                           ;../ibsmon.c: 146:    rvalue.value = i400_power;
  1511  00013C  C019  F05D         	movff	_i400_power,_rvalue
  1512  000140  C01A  F05E         	movff	_i400_power+1,_rvalue+1
  1513                           
  1514                           ;../ibsmon.c: 147:    modbus_cc_clear[4] = rvalue.bytes[1];
  1515  000144  C05E  F028         	movff	_rvalue+1,_modbus_cc_clear+4
  1516                           
  1517                           ;../ibsmon.c: 148:    modbus_cc_clear[5] = rvalue.bytes[0];
  1518  000148  C05D  F029         	movff	_rvalue,_modbus_cc_clear+5
  1519                           
  1520                           ;../ibsmon.c: 149:    req_length = modbus_rtu_send_msg((void*) cc_buffer, (const void *)
      +                           modbus_cc_clear, sizeof(modbus_cc_clear));
  1521  00014C  0E80               	movlw	low _cc_buffer
  1522  00014E  6E3F               	movwf	modbus_rtu_send_msg@cc_buffer^0,c
  1523  000150  0E24               	movlw	low _modbus_cc_clear
  1524  000152  6E40               	movwf	modbus_rtu_send_msg@modbus_cc_mode^0,c
  1525  000154  6A41               	clrf	(modbus_rtu_send_msg@modbus_cc_mode+1)^0,c
  1526  000156  0E00               	movlw	0
  1527  000158  6E43               	movwf	(modbus_rtu_send_msg@req_length+1)^0,c
  1528  00015A  0E06               	movlw	6
  1529  00015C  6E42               	movwf	modbus_rtu_send_msg@req_length^0,c
  1530  00015E  EC41  F004         	call	_modbus_rtu_send_msg	;wreg free
  1531  000162  C03F  F05F         	movff	?_modbus_rtu_send_msg,_req_length
  1532  000166  C040  F060         	movff	?_modbus_rtu_send_msg+1,_req_length+1
  1533                           
  1534                           ;../ibsmon.c: 150:    break;
  1535  00016A  0012               	return	
  1536  00016C                     l1709:
  1537                           
  1538                           ;../ibsmon.c: 152:    req_length = modbus_rtu_send_msg((void*) cc_buffer, (const void *)
      +                           modbus_cc_error, sizeof(modbus_cc_error));
  1539  00016C  0E80               	movlw	low _cc_buffer
  1540  00016E  6E3F               	movwf	modbus_rtu_send_msg@cc_buffer^0,c
  1541  000170  0EDE               	movlw	low _modbus_cc_error
  1542  000172  6E40               	movwf	modbus_rtu_send_msg@modbus_cc_mode^0,c
  1543  000174  0E1F               	movlw	high _modbus_cc_error
  1544  000176  6E41               	movwf	(modbus_rtu_send_msg@modbus_cc_mode+1)^0,c
  1545  000178  0E00               	movlw	0
  1546  00017A  6E43               	movwf	(modbus_rtu_send_msg@req_length+1)^0,c
  1547  00017C  0E06               	movlw	6
  1548  00017E  6E42               	movwf	modbus_rtu_send_msg@req_length^0,c
  1549  000180  EC41  F004         	call	_modbus_rtu_send_msg	;wreg free
  1550  000184  C03F  F05F         	movff	?_modbus_rtu_send_msg,_req_length
  1551  000188  C040  F060         	movff	?_modbus_rtu_send_msg+1,_req_length+1
  1552                           
  1553                           ;../ibsmon.c: 153:    break;
  1554  00018C  0012               	return	
  1555  00018E                     l1711:
  1556                           
  1557                           ;../ibsmon.c: 156:    req_length = modbus_rtu_send_msg((void*) cc_buffer, (const void *)
      +                           modbus_cc_mode, sizeof(modbus_cc_mode));
  1558  00018E  0E80               	movlw	low _cc_buffer
  1559  000190  6E3F               	movwf	modbus_rtu_send_msg@cc_buffer^0,c
  1560  000192  0EE4               	movlw	low _modbus_cc_mode
  1561  000194  6E40               	movwf	modbus_rtu_send_msg@modbus_cc_mode^0,c
  1562  000196  0E1F               	movlw	high _modbus_cc_mode
  1563  000198  6E41               	movwf	(modbus_rtu_send_msg@modbus_cc_mode+1)^0,c
  1564  00019A  0E00               	movlw	0
  1565  00019C  6E43               	movwf	(modbus_rtu_send_msg@req_length+1)^0,c
  1566  00019E  0E06               	movlw	6
  1567  0001A0  6E42               	movwf	modbus_rtu_send_msg@req_length^0,c
  1568  0001A2  EC41  F004         	call	_modbus_rtu_send_msg	;wreg free
  1569  0001A6  C03F  F05F         	movff	?_modbus_rtu_send_msg,_req_length
  1570  0001AA  C040  F060         	movff	?_modbus_rtu_send_msg+1,_req_length+1
  1571                           
  1572                           ;../ibsmon.c: 157:    break;
  1573  0001AE  0012               	return	
  1574  0001B0                     l1715:
  1575  0001B0  5062               	movf	controller_work@modbus_command^0,w,c
  1576  0001B2  6E44               	movwf	??_controller_work^0,c
  1577  0001B4  6A45               	clrf	(??_controller_work+1)^0,c
  1578                           
  1579                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1580                           ; Switch size 1, requested type "simple"
  1581                           ; Number of cases is 1, Range of values is 0 to 0
  1582                           ; switch strategies available:
  1583                           ; Name         Instructions Cycles
  1584                           ; simple_byte            4     3 (average)
  1585                           ;	Chosen strategy is simple_byte
  1586  0001B6  5045               	movf	(??_controller_work+1)^0,w,c
  1587  0001B8  0A00               	xorlw	0	; case 0
  1588  0001BA  A4D8               	btfss	status,2,c
  1589  0001BC  D7E8               	goto	l1711
  1590                           
  1591                           ; Switch size 1, requested type "simple"
  1592                           ; Number of cases is 4, Range of values is 0 to 3
  1593                           ; switch strategies available:
  1594                           ; Name         Instructions Cycles
  1595                           ; simple_byte           13     7 (average)
  1596                           ;	Chosen strategy is simple_byte
  1597  0001BE  5044               	movf	??_controller_work^0,w,c
  1598  0001C0  0A00               	xorlw	0	; case 0
  1599  0001C2  B4D8               	btfsc	status,2,c
  1600  0001C4  D7E4               	goto	l1711
  1601  0001C6  0A01               	xorlw	1	; case 1
  1602  0001C8  B4D8               	btfsc	status,2,c
  1603  0001CA  D7D0               	goto	l1709
  1604  0001CC  0A03               	xorlw	3	; case 2
  1605  0001CE  B4D8               	btfsc	status,2,c
  1606  0001D0  D79A               	goto	l1697
  1607  0001D2  0A01               	xorlw	1	; case 3
  1608  0001D4  B4D8               	btfsc	status,2,c
  1609  0001D6  D77F               	goto	l1689
  1610  0001D8  D7DA               	goto	l1711
  1611  0001DA                     l1717:
  1612                           
  1613                           ;../ibsmon.c: 162:   if (get_10hz(0) >= 50) {
  1614  0001DA  0E00               	movlw	0
  1615  0001DC  EC04  F004         	call	_get_10hz
  1616  0001E0  5035               	movf	(?_get_10hz+3)^0,w,c
  1617  0001E2  1034               	iorwf	(?_get_10hz+2)^0,w,c
  1618  0001E4  1033               	iorwf	(?_get_10hz+1)^0,w,c
  1619  0001E6  E104               	bnz	u740
  1620  0001E8  0E32               	movlw	50
  1621  0001EA  5C32               	subwf	?_get_10hz^0,w,c
  1622  0001EC  A0D8               	btfss	status,0,c
  1623  0001EE  0012               	return	
  1624  0001F0                     u740:
  1625                           
  1626                           ;../ibsmon.c: 163:    get_2hz(0);
  1627  0001F0  0E00               	movlw	0
  1628  0001F2  EC80  F004         	call	_get_2hz
  1629                           
  1630                           ;../ibsmon.c: 171:    LATAbits.LATA1 = 1;
  1631  0001F6  8289               	bsf	137,1,c	;volatile
  1632                           
  1633                           ;../ibsmon.c: 173:    LATAbits.LATA0 = 1;
  1634  0001F8  8089               	bsf	137,0,c	;volatile
  1635                           
  1636                           ;../ibsmon.c: 174:    V.send_count = 0;
  1637  0001FA  0E00               	movlw	0
  1638  0001FC  6E10               	movwf	(_V+15)^0,c	;volatile
  1639                           
  1640                           ;../ibsmon.c: 175:    V.recv_count = 0;
  1641  0001FE  0E00               	movlw	0
  1642  000200  6E11               	movwf	(_V+16)^0,c	;volatile
  1643                           
  1644                           ;../ibsmon.c: 176:    cstate = SEND;
  1645  000202  0E02               	movlw	2
  1646  000204  6E63               	movwf	controller_work@cstate^0,c
  1647                           
  1648                           ;../ibsmon.c: 177:    clear_500hz();
  1649  000206  EC8F  F004         	call	_clear_500hz	;wreg free
  1650  00020A  0012               	return	
  1651  00020C                     l1733:
  1652                           
  1653                           ;../ibsmon.c: 181:   if (get_500hz(0) > 3) {
  1654  00020C  0E00               	movlw	0
  1655  00020E  ECE4  F003         	call	_get_500hz
  1656  000212  5035               	movf	(?_get_500hz+3)^0,w,c
  1657  000214  1034               	iorwf	(?_get_500hz+2)^0,w,c
  1658  000216  1033               	iorwf	(?_get_500hz+1)^0,w,c
  1659  000218  E104               	bnz	u750
  1660  00021A  0E04               	movlw	4
  1661  00021C  5C32               	subwf	?_get_500hz^0,w,c
  1662  00021E  A0D8               	btfss	status,0,c
  1663  000220  0012               	return	
  1664  000222                     u750:
  1665                           
  1666                           ;../ibsmon.c: 183:     while (!TXSTAbits.TRMT) {
  1667                           
  1668                           ;../ibsmon.c: 184:     };
  1669  000222  A2AC               	btfss	172,1,c	;volatile
  1670  000224  D7FE               	goto	u750
  1671                           
  1672                           ;../ibsmon.c: 185:     TXREG = cc_buffer[V.send_count];
  1673  000226  5010               	movf	(_V+15)^0,w,c	;volatile
  1674  000228  0F80               	addlw	low _cc_buffer
  1675  00022A  6ED9               	movwf	fsr2l,c
  1676  00022C  6ADA               	clrf	fsr2h,c
  1677  00022E  50DF               	movf	indf2,w,c
  1678  000230  6EAD               	movwf	173,c	;volatile
  1679                           
  1680                           ;../ibsmon.c: 186:    } while (++V.send_count < req_length);
  1681  000232  2A10               	incf	(_V+15)^0,f,c	;volatile
  1682  000234  5010               	movf	(_V+15)^0,w,c	;volatile
  1683  000236  6E44               	movwf	??_controller_work^0,c
  1684  000238  6A45               	clrf	(??_controller_work+1)^0,c
  1685  00023A  505F               	movf	_req_length^0,w,c
  1686  00023C  5C44               	subwf	??_controller_work^0,w,c
  1687  00023E  5060               	movf	(_req_length+1)^0,w,c
  1688  000240  5845               	subwfb	(??_controller_work+1)^0,w,c
  1689  000242  A0D8               	btfss	status,0,c
  1690  000244  D7EE               	goto	u750
  1691  000246                     u770:
  1692                           
  1693                           ;../ibsmon.c: 187:    while (!TXSTAbits.TRMT) {
  1694                           
  1695                           ;../ibsmon.c: 188:    };
  1696  000246  A2AC               	btfss	172,1,c	;volatile
  1697  000248  D7FE               	goto	u770
  1698                           
  1699                           ;../ibsmon.c: 189:    cstate = RECV;
  1700  00024A  0E03               	movlw	3
  1701  00024C  D7DB               	goto	L1
  1702  00024E                     l1743:
  1703                           
  1704                           ;../ibsmon.c: 194:   if (get_500hz(0) > 3) {
  1705  00024E  0E00               	movlw	0
  1706  000250  ECE4  F003         	call	_get_500hz
  1707  000254  5035               	movf	(?_get_500hz+3)^0,w,c
  1708  000256  1034               	iorwf	(?_get_500hz+2)^0,w,c
  1709  000258  1033               	iorwf	(?_get_500hz+1)^0,w,c
  1710  00025A  E104               	bnz	u790
  1711  00025C  0E04               	movlw	4
  1712  00025E  5C32               	subwf	?_get_500hz^0,w,c
  1713  000260  A0D8               	btfss	status,0,c
  1714  000262  0012               	return	
  1715  000264                     u790:
  1716                           
  1717                           ;../ibsmon.c: 195:    uint16_t c_crc, c_crc_rec;;../ibsmon.c: 197:    LATAbits.LATA0 = 0
      +                          ;
  1718  000264  9089               	bcf	137,0,c	;volatile
  1719                           
  1720                           ;../ibsmon.c: 198:    LATAbits.LATA1 = 0;
  1721  000266  9289               	bcf	137,1,c	;volatile
  1722                           
  1723                           ;../ibsmon.c: 203:    switch (modbus_command) {
  1724  000268  D161               	goto	l1911
  1725  00026A                     l1747:
  1726                           
  1727                           ;../ibsmon.c: 205:     req_length = sizeof(i400_freset);
  1728  00026A  0E00               	movlw	0
  1729  00026C  6E60               	movwf	(_req_length+1)^0,c
  1730  00026E  0E08               	movlw	8
  1731  000270  6E5F               	movwf	_req_length^0,c
  1732                           
  1733                           ;../ibsmon.c: 206:     if ((V.recv_count >= req_length) && (cc_buffer[0] == 0x04) && (cc
      +                          _buffer[1] == 6)) {
  1734  000272  0E07               	movlw	7
  1735  000274  6411               	cpfsgt	(_V+16)^0,c	;volatile
  1736  000276  D031               	goto	l1771
  1737  000278  0E04               	movlw	4
  1738  00027A  0100               	movlb	0	; () banked
  1739  00027C  1980               	xorwf	_cc_buffer& (0+255),w,b	;volatile
  1740  00027E  A4D8               	btfss	status,2,c
  1741  000280  D02C               	goto	l1771
  1742                           
  1743                           ; BSR set to: 0
  1744  000282  0E06               	movlw	6
  1745  000284  1981               	xorwf	(_cc_buffer+1)& (0+255),w,b	;volatile
  1746  000286  A4D8               	btfss	status,2,c
  1747  000288  D028               	goto	l1771
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;../ibsmon.c: 207:      c_crc = crc16(cc_buffer, req_length - 2);
  1751  00028A  0E80               	movlw	low _cc_buffer
  1752  00028C  6E32               	movwf	crc16@buffer^0,c
  1753  00028E  0E00               	movlw	0
  1754  000290  6E34               	movwf	(crc16@buffer_length+1)^0,c
  1755  000292  0E06               	movlw	6
  1756  000294  6E33               	movwf	crc16@buffer_length^0,c
  1757  000296  EC4B  F003         	call	_crc16	;wreg free
  1758  00029A  C032  F049         	movff	?_crc16,controller_work@c_crc
  1759  00029E  C033  F04A         	movff	?_crc16+1,controller_work@c_crc+1
  1760                           
  1761                           ;../ibsmon.c: 208:      c_crc_rec = (uint16_t) ((uint16_t) cc_buffer[req_length - 2] << 
      +                          (uint16_t) 8) | ((uint16_t) cc_buffer[req_length - 1] & 0x00ff);
  1762  0002A2  0100               	movlb	0	; () banked
  1763  0002A4  5186               	movf	(_cc_buffer+6)& (0+255),w,b	;volatile
  1764  0002A6  6E44               	movwf	??_controller_work^0,c
  1765  0002A8  5187               	movf	(_cc_buffer+7)& (0+255),w,b	;volatile
  1766  0002AA  6E4B               	movwf	controller_work@c_crc_rec^0,c
  1767  0002AC  C044  F04C         	movff	??_controller_work,controller_work@c_crc_rec+1
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;../ibsmon.c: 209:      if (c_crc == c_crc_rec) {
  1771  0002B0  504B               	movf	controller_work@c_crc_rec^0,w,c
  1772  0002B2  1849               	xorwf	controller_work@c_crc^0,w,c
  1773  0002B4  E104               	bnz	l1763
  1774  0002B6  504C               	movf	(controller_work@c_crc_rec+1)^0,w,c
  1775  0002B8  184A               	xorwf	(controller_work@c_crc+1)^0,w,c
  1776  0002BA  B4D8               	btfsc	status,2,c
  1777  0002BC  D00B               	goto	l1769
  1778  0002BE                     l1763:
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;../ibsmon.c: 212:       crc_error++;
  1782  0002BE  0E01               	movlw	1
  1783  0002C0  2659               	addwf	_crc_error^0,f,c
  1784  0002C2  0E00               	movlw	0
  1785  0002C4  225A               	addwfc	(_crc_error+1)^0,f,c
  1786  0002C6  225B               	addwfc	(_crc_error+2)^0,f,c
  1787  0002C8  225C               	addwfc	(_crc_error+3)^0,f,c
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;../ibsmon.c: 213:       V.error++;
  1791  0002CA  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  1792  0002CC  2A14               	incf	(_V+19)^0,f,c	;volatile
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;../ibsmon.c: 214:       set_led_blink(0);
  1796  0002CE  0E00               	movlw	0
  1797  0002D0  EC6F  F004         	call	_set_led_blink
  1798  0002D4                     l1769:
  1799                           
  1800                           ;../ibsmon.c: 216:      cstate = CLEAR;
  1801  0002D4  0E00               	movlw	0
  1802  0002D6  6E63               	movwf	controller_work@cstate^0,c
  1803                           
  1804                           ;../ibsmon.c: 217:     } else {
  1805  0002D8  0012               	return	
  1806  0002DA                     l1771:
  1807                           
  1808                           ;../ibsmon.c: 221:      if (get_500hz(0) > 300) {
  1809  0002DA  0E00               	movlw	0
  1810  0002DC  ECE4  F003         	call	_get_500hz
  1811  0002E0  5035               	movf	(?_get_500hz+3)^0,w,c
  1812  0002E2  1034               	iorwf	(?_get_500hz+2)^0,w,c
  1813  0002E4  E106               	bnz	u840
  1814  0002E6  0E2D               	movlw	45
  1815  0002E8  5C32               	subwf	?_get_500hz^0,w,c
  1816  0002EA  0E01               	movlw	1
  1817  0002EC  5833               	subwfb	(?_get_500hz+1)^0,w,c
  1818  0002EE  A0D8               	btfss	status,0,c
  1819  0002F0  0012               	return	
  1820  0002F2                     u840:
  1821                           
  1822                           ;../ibsmon.c: 222:       cstate = CLEAR;
  1823  0002F2  0E00               	movlw	0
  1824  0002F4  6E63               	movwf	controller_work@cstate^0,c
  1825                           
  1826                           ;../ibsmon.c: 223:       LATAbits.LATA2 = 0;
  1827  0002F6  9489               	bcf	137,2,c	;volatile
  1828  0002F8                     
  1829                           ;../ibsmon.c: 224:       mcmd = G_MODE;
  1830  0002F8  0E00               	movlw	0
  1831  0002FA  6E64               	movwf	controller_work@mcmd^0,c
  1832                           
  1833                           ;../ibsmon.c: 225:       V.error++;
  1834  0002FC  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  1835  0002FE  2A14               	incf	(_V+19)^0,f,c	;volatile
  1836  000300  0012               	return	
  1837  000302                     l1779:
  1838                           
  1839                           ;../ibsmon.c: 230:     req_length = sizeof(i400_clear);
  1840  000302  0E00               	movlw	0
  1841  000304  6E60               	movwf	(_req_length+1)^0,c
  1842  000306  0E08               	movlw	8
  1843  000308  6E5F               	movwf	_req_length^0,c
  1844                           
  1845                           ;../ibsmon.c: 231:     if ((V.recv_count >= req_length) && (cc_buffer[0] == 0x04) && (cc
      +                          _buffer[1] == 6)) {
  1846  00030A  0E07               	movlw	7
  1847  00030C  6411               	cpfsgt	(_V+16)^0,c	;volatile
  1848  00030E  D02F               	goto	l1803
  1849  000310  0E04               	movlw	4
  1850  000312  0100               	movlb	0	; () banked
  1851  000314  1980               	xorwf	_cc_buffer& (0+255),w,b	;volatile
  1852  000316  A4D8               	btfss	status,2,c
  1853  000318  D02A               	goto	l1803
  1854                           
  1855                           ; BSR set to: 0
  1856  00031A  0E06               	movlw	6
  1857  00031C  1981               	xorwf	(_cc_buffer+1)& (0+255),w,b	;volatile
  1858  00031E  A4D8               	btfss	status,2,c
  1859  000320  D026               	goto	l1803
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;../ibsmon.c: 232:      c_crc = crc16(cc_buffer, req_length - 2);
  1863  000322  0E80               	movlw	low _cc_buffer
  1864  000324  6E32               	movwf	crc16@buffer^0,c
  1865  000326  0E00               	movlw	0
  1866  000328  6E34               	movwf	(crc16@buffer_length+1)^0,c
  1867  00032A  0E06               	movlw	6
  1868  00032C  6E33               	movwf	crc16@buffer_length^0,c
  1869  00032E  EC4B  F003         	call	_crc16	;wreg free
  1870  000332  C032  F049         	movff	?_crc16,controller_work@c_crc
  1871  000336  C033  F04A         	movff	?_crc16+1,controller_work@c_crc+1
  1872                           
  1873                           ;../ibsmon.c: 233:      c_crc_rec = (uint16_t) ((uint16_t) cc_buffer[req_length - 2] << 
      +                          (uint16_t) 8) | ((uint16_t) cc_buffer[req_length - 1] & 0x00ff);
  1874  00033A  0100               	movlb	0	; () banked
  1875  00033C  5186               	movf	(_cc_buffer+6)& (0+255),w,b	;volatile
  1876  00033E  6E44               	movwf	??_controller_work^0,c
  1877  000340  5187               	movf	(_cc_buffer+7)& (0+255),w,b	;volatile
  1878  000342  6E4B               	movwf	controller_work@c_crc_rec^0,c
  1879  000344  C044  F04C         	movff	??_controller_work,controller_work@c_crc_rec+1
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;../ibsmon.c: 234:      if (c_crc == c_crc_rec) {
  1883  000348  504B               	movf	controller_work@c_crc_rec^0,w,c
  1884  00034A  1849               	xorwf	controller_work@c_crc^0,w,c
  1885  00034C  E104               	bnz	l1795
  1886  00034E  504C               	movf	(controller_work@c_crc_rec+1)^0,w,c
  1887  000350  184A               	xorwf	(controller_work@c_crc+1)^0,w,c
  1888  000352  B4D8               	btfsc	status,2,c
  1889  000354  D7BF               	goto	l1769
  1890  000356                     l1795:
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;../ibsmon.c: 237:       crc_error++;
  1894  000356  0E01               	movlw	1
  1895  000358  2659               	addwf	_crc_error^0,f,c
  1896  00035A  0E00               	movlw	0
  1897  00035C  225A               	addwfc	(_crc_error+1)^0,f,c
  1898  00035E  225B               	addwfc	(_crc_error+2)^0,f,c
  1899  000360  225C               	addwfc	(_crc_error+3)^0,f,c
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;../ibsmon.c: 238:       V.error++;
  1903  000362  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  1904  000364  2A14               	incf	(_V+19)^0,f,c	;volatile
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;../ibsmon.c: 239:       set_led_blink(0);
  1908  000366  0E00               	movlw	0
  1909  000368  EC6F  F004         	call	_set_led_blink
  1910  00036C  D7B3               	goto	l1769
  1911  00036E                     l1803:
  1912                           
  1913                           ;../ibsmon.c: 243:      if (get_500hz(0) > 300) {
  1914  00036E  0E00               	movlw	0
  1915  000370  ECE4  F003         	call	_get_500hz
  1916  000374  D7B5               	goto	L11
  1917  000376                     l1811:
  1918                           
  1919                           ;../ibsmon.c: 252:     req_length = sizeof(i400_error);
  1920  000376  0E00               	movlw	0
  1921  000378  6E60               	movwf	(_req_length+1)^0,c
  1922  00037A  0E09               	movlw	9
  1923  00037C  6E5F               	movwf	_req_length^0,c
  1924                           
  1925                           ;../ibsmon.c: 253:     if ((V.recv_count >= req_length) && (cc_buffer[0] == 0x04) && (cc
      +                          _buffer[1] == 3)) {
  1926  00037E  0E08               	movlw	8
  1927  000380  6411               	cpfsgt	(_V+16)^0,c	;volatile
  1928  000382  D041               	goto	l1839
  1929  000384  0E04               	movlw	4
  1930  000386  0100               	movlb	0	; () banked
  1931  000388  1980               	xorwf	_cc_buffer& (0+255),w,b	;volatile
  1932  00038A  A4D8               	btfss	status,2,c
  1933  00038C  D03C               	goto	l1839
  1934                           
  1935                           ; BSR set to: 0
  1936  00038E  0E03               	movlw	3
  1937  000390  1981               	xorwf	(_cc_buffer+1)& (0+255),w,b	;volatile
  1938  000392  A4D8               	btfss	status,2,c
  1939  000394  D038               	goto	l1839
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;../ibsmon.c: 254:      uint16_t temp;;../ibsmon.c: 255:      c_crc = crc16(cc_buffer, r
      +                          eq_length - 2);
  1943  000396  0E80               	movlw	low _cc_buffer
  1944  000398  6E32               	movwf	crc16@buffer^0,c
  1945  00039A  0E00               	movlw	0
  1946  00039C  6E34               	movwf	(crc16@buffer_length+1)^0,c
  1947  00039E  0E07               	movlw	7
  1948  0003A0  6E33               	movwf	crc16@buffer_length^0,c
  1949  0003A2  EC4B  F003         	call	_crc16	;wreg free
  1950  0003A6  C032  F049         	movff	?_crc16,controller_work@c_crc
  1951  0003AA  C033  F04A         	movff	?_crc16+1,controller_work@c_crc+1
  1952                           
  1953                           ;../ibsmon.c: 256:      c_crc_rec = (uint16_t) ((uint16_t) cc_buffer[req_length - 2] << 
      +                          (uint16_t) 8) | ((uint16_t) cc_buffer[req_length - 1] & 0x00ff);
  1954  0003AE  0100               	movlb	0	; () banked
  1955  0003B0  5187               	movf	(_cc_buffer+7)& (0+255),w,b	;volatile
  1956  0003B2  6E44               	movwf	??_controller_work^0,c
  1957  0003B4  5188               	movf	(_cc_buffer+8)& (0+255),w,b	;volatile
  1958  0003B6  6E4B               	movwf	controller_work@c_crc_rec^0,c
  1959  0003B8  C044  F04C         	movff	??_controller_work,controller_work@c_crc_rec+1
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;../ibsmon.c: 257:      if (c_crc == c_crc_rec) {
  1963  0003BC  504B               	movf	controller_work@c_crc_rec^0,w,c
  1964  0003BE  1849               	xorwf	controller_work@c_crc^0,w,c
  1965  0003C0  E116               	bnz	l1831
  1966  0003C2  504C               	movf	(controller_work@c_crc_rec+1)^0,w,c
  1967  0003C4  184A               	xorwf	(controller_work@c_crc+1)^0,w,c
  1968  0003C6  A4D8               	btfss	status,2,c
  1969  0003C8  D012               	goto	l1831
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;../ibsmon.c: 258:       if ((temp = ((uint16_t) cc_buffer[3] << 8) +((uint16_t) cc_buff
      +                          er[4]&0xff))) {
  1973  0003CA  5183               	movf	(_cc_buffer+3)& (0+255),w,b	;volatile
  1974  0003CC  6E44               	movwf	??_controller_work^0,c
  1975  0003CE  5184               	movf	(_cc_buffer+4)& (0+255),w,b	;volatile
  1976  0003D0  6E46               	movwf	controller_work@temp^0,c
  1977  0003D2  C044  F047         	movff	??_controller_work,controller_work@temp+1
  1978  0003D6  5046               	movf	controller_work@temp^0,w,c
  1979  0003D8  1047               	iorwf	(controller_work@temp+1)^0,w,c
  1980  0003DA  B4D8               	btfsc	status,2,c
  1981  0003DC  D006               	goto	l176
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;../ibsmon.c: 259:        __nop();
  1985  0003DE  F000               	nop	
  1986                           
  1987                           ;../ibsmon.c: 260:        LATAbits.LATA2 = 1;
  1988  0003E0  8489               	bsf	137,2,c	;volatile
  1989                           
  1990                           ;../ibsmon.c: 261:        set_led_blink(10);
  1991  0003E2  0E0A               	movlw	10
  1992  0003E4  EC6F  F004         	call	_set_led_blink
  1993                           
  1994                           ;../ibsmon.c: 262:       } else {
  1995  0003E8  D775               	goto	l1769
  1996  0003EA                     l176:
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;../ibsmon.c: 263:        LATAbits.LATA2 = 0;
  2000  0003EA  9489               	bcf	137,2,c	;volatile
  2001  0003EC  D773               	goto	l1769
  2002  0003EE                     l1831:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;../ibsmon.c: 266:       crc_error++;
  2006  0003EE  0E01               	movlw	1
  2007  0003F0  2659               	addwf	_crc_error^0,f,c
  2008  0003F2  0E00               	movlw	0
  2009  0003F4  225A               	addwfc	(_crc_error+1)^0,f,c
  2010  0003F6  225B               	addwfc	(_crc_error+2)^0,f,c
  2011  0003F8  225C               	addwfc	(_crc_error+3)^0,f,c
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;../ibsmon.c: 267:       V.error++;
  2015  0003FA  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  2016  0003FC  2A14               	incf	(_V+19)^0,f,c	;volatile
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;../ibsmon.c: 268:       set_led_blink(0);
  2020  0003FE  0E00               	movlw	0
  2021  000400  EC6F  F004         	call	_set_led_blink
  2022  000404  D767               	goto	l1769
  2023  000406                     l1839:
  2024                           
  2025                           ;../ibsmon.c: 272:      if (get_500hz(0) > 300) {
  2026  000406  0E00               	movlw	0
  2027  000408  ECE4  F003         	call	_get_500hz
  2028  00040C  5035               	movf	(?_get_500hz+3)^0,w,c
  2029  00040E  1034               	iorwf	(?_get_500hz+2)^0,w,c
  2030  000410  E101               	bnz	u950
  2031  000412  D769               	goto	L10
  2032  000414                     u950:
  2033  000414  D76E               	goto	u840
  2034  000416                     l1847:
  2035                           
  2036                           ;../ibsmon.c: 282:     req_length = sizeof(i400_mode);
  2037  000416  0E00               	movlw	0
  2038  000418  6E60               	movwf	(_req_length+1)^0,c
  2039  00041A  0E11               	movlw	17
  2040  00041C  6E5F               	movwf	_req_length^0,c
  2041                           
  2042                           ;../ibsmon.c: 283:     if ((V.recv_count >= req_length) && (cc_buffer[0] == 0x04) && (cc
      +                          _buffer[1] == 3)) {
  2043  00041E  0E10               	movlw	16
  2044  000420  6411               	cpfsgt	(_V+16)^0,c	;volatile
  2045  000422  D06C               	goto	l1899
  2046  000424  0E04               	movlw	4
  2047  000426  0100               	movlb	0	; () banked
  2048  000428  1980               	xorwf	_cc_buffer& (0+255),w,b	;volatile
  2049  00042A  A4D8               	btfss	status,2,c
  2050  00042C  D067               	goto	l1899
  2051                           
  2052                           ; BSR set to: 0
  2053  00042E  0E03               	movlw	3
  2054  000430  1981               	xorwf	(_cc_buffer+1)& (0+255),w,b	;volatile
  2055  000432  A4D8               	btfss	status,2,c
  2056  000434  D063               	goto	l1899
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;../ibsmon.c: 284:      uint8_t temp;;../ibsmon.c: 285:      static uint8_t volts = 255;
      +                          ;../ibsmon.c: 287:      c_crc = crc16(cc_buffer, req_length - 2);
  2060  000436  0E80               	movlw	low _cc_buffer
  2061  000438  6E32               	movwf	crc16@buffer^0,c
  2062  00043A  0E00               	movlw	0
  2063  00043C  6E34               	movwf	(crc16@buffer_length+1)^0,c
  2064  00043E  0E0F               	movlw	15
  2065  000440  6E33               	movwf	crc16@buffer_length^0,c
  2066  000442  EC4B  F003         	call	_crc16	;wreg free
  2067  000446  C032  F049         	movff	?_crc16,controller_work@c_crc
  2068  00044A  C033  F04A         	movff	?_crc16+1,controller_work@c_crc+1
  2069                           
  2070                           ;../ibsmon.c: 288:      c_crc_rec = (uint16_t) ((uint16_t) cc_buffer[req_length - 2] << 
      +                          (uint16_t) 8) | ((uint16_t) cc_buffer[req_length - 1] & 0x00ff);
  2071  00044E  0100               	movlb	0	; () banked
  2072  000450  518F               	movf	(_cc_buffer+15)& (0+255),w,b	;volatile
  2073  000452  6E44               	movwf	??_controller_work^0,c
  2074  000454  5190               	movf	(_cc_buffer+16)& (0+255),w,b	;volatile
  2075  000456  6E4B               	movwf	controller_work@c_crc_rec^0,c
  2076  000458  C044  F04C         	movff	??_controller_work,controller_work@c_crc_rec+1
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;../ibsmon.c: 290:      if (c_crc == c_crc_rec) {
  2080  00045C  504B               	movf	controller_work@c_crc_rec^0,w,c
  2081  00045E  1849               	xorwf	controller_work@c_crc^0,w,c
  2082  000460  E13A               	bnz	l1887
  2083  000462  504C               	movf	(controller_work@c_crc_rec+1)^0,w,c
  2084  000464  184A               	xorwf	(controller_work@c_crc+1)^0,w,c
  2085  000466  A4D8               	btfss	status,2,c
  2086  000468  D036               	goto	l1887
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;../ibsmon.c: 291:       if ((temp = cc_buffer[4])) {
  2090  00046A  C084  F048         	movff	_cc_buffer+4,controller_work@temp_727	;volatile
  2091  00046E  5048               	movf	controller_work@temp_727^0,w,c
  2092  000470  B4D8               	btfsc	status,2,c
  2093  000472  D02B               	goto	l1883
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;../ibsmon.c: 292:        set_led_blink(temp);
  2097  000474  5048               	movf	controller_work@temp_727^0,w,c
  2098  000476  EC6F  F004         	call	_set_led_blink
  2099                           
  2100                           ;../ibsmon.c: 293:        switch (temp) {
  2101  00047A  D00C               	goto	l1881
  2102  00047C                     l1865:
  2103                           
  2104                           ;../ibsmon.c: 295:         volts = 92;
  2105  00047C  0E5C               	movlw	92
  2106  00047E  D029               	goto	L7
  2107  000480                     l1867:
  2108                           
  2109                           ;../ibsmon.c: 298:         volts = 122;
  2110  000480  0E7A               	movlw	122
  2111  000482  D027               	goto	L7
  2112  000484                     l1869:
  2113                           
  2114                           ;../ibsmon.c: 301:         volts = 150;
  2115  000484  0E96               	movlw	150
  2116  000486  D025               	goto	L7
  2117  000488                     l1871:
  2118                           
  2119                           ;../ibsmon.c: 304:         volts = 177;
  2120  000488  0EB1               	movlw	177
  2121  00048A  D023               	goto	L7
  2122  00048C                     l1873:
  2123                           
  2124                           ;../ibsmon.c: 307:         volts = 205;
  2125  00048C  0ECD               	movlw	205
  2126  00048E  D021               	goto	L7
  2127  000490                     l1875:
  2128                           
  2129                           ;../ibsmon.c: 310:         volts = 230;
  2130  000490  0EE6               	movlw	230
  2131  000492  D01F               	goto	L7
  2132  000494                     l1881:
  2133  000494  5048               	movf	controller_work@temp_727^0,w,c
  2134  000496  6E44               	movwf	??_controller_work^0,c
  2135  000498  6A45               	clrf	(??_controller_work+1)^0,c
  2136                           
  2137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2138                           ; Switch size 1, requested type "simple"
  2139                           ; Number of cases is 1, Range of values is 0 to 0
  2140                           ; switch strategies available:
  2141                           ; Name         Instructions Cycles
  2142                           ; simple_byte            4     3 (average)
  2143                           ;	Chosen strategy is simple_byte
  2144  00049A  5045               	movf	(??_controller_work+1)^0,w,c
  2145  00049C  0A00               	xorlw	0	; case 0
  2146  00049E  A4D8               	btfss	status,2,c
  2147  0004A0  D7ED               	goto	l1865
  2148                           
  2149                           ; Switch size 1, requested type "simple"
  2150                           ; Number of cases is 6, Range of values is 1 to 6
  2151                           ; switch strategies available:
  2152                           ; Name         Instructions Cycles
  2153                           ; simple_byte           19    10 (average)
  2154                           ;	Chosen strategy is simple_byte
  2155  0004A2  5044               	movf	??_controller_work^0,w,c
  2156  0004A4  0A01               	xorlw	1	; case 1
  2157  0004A6  B4D8               	btfsc	status,2,c
  2158  0004A8  D7E9               	goto	l1865
  2159  0004AA  0A03               	xorlw	3	; case 2
  2160  0004AC  B4D8               	btfsc	status,2,c
  2161  0004AE  D7E8               	goto	l1867
  2162  0004B0  0A01               	xorlw	1	; case 3
  2163  0004B2  B4D8               	btfsc	status,2,c
  2164  0004B4  D7E7               	goto	l1869
  2165  0004B6  0A07               	xorlw	7	; case 4
  2166  0004B8  B4D8               	btfsc	status,2,c
  2167  0004BA  D7E6               	goto	l1871
  2168  0004BC  0A01               	xorlw	1	; case 5
  2169  0004BE  B4D8               	btfsc	status,2,c
  2170  0004C0  D7E5               	goto	l1873
  2171  0004C2  0A03               	xorlw	3	; case 6
  2172  0004C4  B4D8               	btfsc	status,2,c
  2173  0004C6  D7E4               	goto	l1875
  2174  0004C8  D7D9               	goto	l1865
  2175  0004CA                     l1883:
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;../ibsmon.c: 317:        set_led_blink(255);
  2179  0004CA  0EFF               	movlw	255
  2180  0004CC  EC6F  F004         	call	_set_led_blink
  2181                           
  2182                           ;../ibsmon.c: 318:        volts = 61;
  2183  0004D0  0E3D               	movlw	61
  2184  0004D2                     L7:
  2185  0004D2  6E1D               	movwf	controller_work@volts^0,c
  2186  0004D4  D00B               	goto	l1893
  2187  0004D6                     l1887:
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;../ibsmon.c: 321:       crc_error++;
  2191  0004D6  0E01               	movlw	1
  2192  0004D8  2659               	addwf	_crc_error^0,f,c
  2193  0004DA  0E00               	movlw	0
  2194  0004DC  225A               	addwfc	(_crc_error+1)^0,f,c
  2195  0004DE  225B               	addwfc	(_crc_error+2)^0,f,c
  2196  0004E0  225C               	addwfc	(_crc_error+3)^0,f,c
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;../ibsmon.c: 322:       V.error++;
  2200  0004E2  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  2201  0004E4  2A14               	incf	(_V+19)^0,f,c	;volatile
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;../ibsmon.c: 323:       set_led_blink(0);
  2205  0004E6  0E00               	movlw	0
  2206  0004E8  EC6F  F004         	call	_set_led_blink
  2207  0004EC                     l1893:
  2208                           
  2209                           ;../ibsmon.c: 325:      V.pwm_volts = volts;
  2210  0004EC  C01D  F012         	movff	controller_work@volts,_V+17	;volatile
  2211                           
  2212                           ;../ibsmon.c: 326:      SetDCPWM1(V.pwm_volts);
  2213  0004F0  C012  F032         	movff	_V+17,SetDCPWM1@dutycycle	;volatile
  2214  0004F4  6A33               	clrf	(SetDCPWM1@dutycycle+1)^0,c
  2215  0004F6  EC24  F004         	call	_SetDCPWM1	;wreg free
  2216  0004FA  D6EC               	goto	l1769
  2217  0004FC                     l1899:
  2218                           
  2219                           ;../ibsmon.c: 329:      if (get_500hz(0) > 300) {
  2220  0004FC  0E00               	movlw	0
  2221  0004FE  ECE4  F003         	call	_get_500hz
  2222  000502  5035               	movf	(?_get_500hz+3)^0,w,c
  2223  000504  1034               	iorwf	(?_get_500hz+2)^0,w,c
  2224  000506  E106               	bnz	u1010
  2225  000508  0E2D               	movlw	45
  2226  00050A  5C32               	subwf	?_get_500hz^0,w,c
  2227  00050C  0E01               	movlw	1
  2228  00050E  5833               	subwfb	(?_get_500hz+1)^0,w,c
  2229  000510  A0D8               	btfss	status,0,c
  2230  000512  0012               	return	
  2231  000514                     u1010:
  2232                           
  2233                           ;../ibsmon.c: 330:       set_led_blink(0);
  2234  000514  0E00               	movlw	0
  2235  000516  EC6F  F004         	call	_set_led_blink
  2236                           
  2237                           ;../ibsmon.c: 331:       cstate = CLEAR;
  2238  00051A  0E00               	movlw	0
  2239  00051C  6E63               	movwf	controller_work@cstate^0,c
  2240                           
  2241                           ;../ibsmon.c: 332:       V.pwm_volts = 255;
  2242  00051E  6812               	setf	(_V+17)^0,c	;volatile
  2243                           
  2244                           ;../ibsmon.c: 333:       SetDCPWM1(V.pwm_volts);
  2245  000520  C012  F032         	movff	_V+17,SetDCPWM1@dutycycle	;volatile
  2246  000524  6A33               	clrf	(SetDCPWM1@dutycycle+1)^0,c
  2247  000526  EC24  F004         	call	_SetDCPWM1	;wreg free
  2248  00052A  D6E6               	goto	L8
  2249  00052C                     l1911:
  2250  00052C  5062               	movf	controller_work@modbus_command^0,w,c
  2251  00052E  6E44               	movwf	??_controller_work^0,c
  2252  000530  6A45               	clrf	(??_controller_work+1)^0,c
  2253                           
  2254                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2255                           ; Switch size 1, requested type "simple"
  2256                           ; Number of cases is 1, Range of values is 0 to 0
  2257                           ; switch strategies available:
  2258                           ; Name         Instructions Cycles
  2259                           ; simple_byte            4     3 (average)
  2260                           ;	Chosen strategy is simple_byte
  2261  000532  5045               	movf	(??_controller_work+1)^0,w,c
  2262  000534  0A00               	xorlw	0	; case 0
  2263  000536  A4D8               	btfss	status,2,c
  2264  000538  D76E               	goto	l1847
  2265                           
  2266                           ; Switch size 1, requested type "simple"
  2267                           ; Number of cases is 4, Range of values is 0 to 3
  2268                           ; switch strategies available:
  2269                           ; Name         Instructions Cycles
  2270                           ; simple_byte           13     7 (average)
  2271                           ;	Chosen strategy is simple_byte
  2272  00053A  5044               	movf	??_controller_work^0,w,c
  2273  00053C  0A00               	xorlw	0	; case 0
  2274  00053E  B4D8               	btfsc	status,2,c
  2275  000540  D76A               	goto	l1847
  2276  000542  0A01               	xorlw	1	; case 1
  2277  000544  B4D8               	btfsc	status,2,c
  2278  000546  D717               	goto	l1811
  2279  000548  0A03               	xorlw	3	; case 2
  2280  00054A  B4D8               	btfsc	status,2,c
  2281  00054C  D6DA               	goto	l1779
  2282  00054E  0A01               	xorlw	1	; case 3
  2283  000550  B4D8               	btfsc	status,2,c
  2284  000552  D68B               	goto	l1747
  2285  000554  D760               	goto	l1847
  2286  000556                     l1915:
  2287  000556  5063               	movf	controller_work@cstate^0,w,c
  2288  000558  6E44               	movwf	??_controller_work^0,c
  2289  00055A  6A45               	clrf	(??_controller_work+1)^0,c
  2290                           
  2291                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2292                           ; Switch size 1, requested type "simple"
  2293                           ; Number of cases is 1, Range of values is 0 to 0
  2294                           ; switch strategies available:
  2295                           ; Name         Instructions Cycles
  2296                           ; simple_byte            4     3 (average)
  2297                           ;	Chosen strategy is simple_byte
  2298  00055C  5045               	movf	(??_controller_work+1)^0,w,c
  2299  00055E  0A00               	xorlw	0	; case 0
  2300  000560  A4D8               	btfss	status,2,c
  2301  000562  0012               	return	
  2302                           
  2303                           ; Switch size 1, requested type "simple"
  2304                           ; Number of cases is 4, Range of values is 0 to 3
  2305                           ; switch strategies available:
  2306                           ; Name         Instructions Cycles
  2307                           ; simple_byte           13     7 (average)
  2308                           ;	Chosen strategy is simple_byte
  2309  000564  5044               	movf	??_controller_work^0,w,c
  2310  000566  0A00               	xorlw	0	; case 0
  2311  000568  B4D8               	btfsc	status,2,c
  2312  00056A  D5A6               	goto	l1677
  2313  00056C  0A01               	xorlw	1	; case 1
  2314  00056E  B4D8               	btfsc	status,2,c
  2315  000570  D634               	goto	l1717
  2316  000572  0A03               	xorlw	3	; case 2
  2317  000574  B4D8               	btfsc	status,2,c
  2318  000576  D64A               	goto	l1733
  2319  000578  0A01               	xorlw	1	; case 3
  2320  00057A  A4D8               	btfss	status,2,c
  2321  00057C  0012               	return	
  2322  00057E  D667               	goto	l1743
  2323  000580                     __end_of_controller_work:
  2324                           	callstack 0
  2325                           
  2326 ;; *************** function _set_led_blink *****************
  2327 ;; Defined at:
  2328 ;;		line 163 in file "../ihc_vector.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  blinks          1    wreg     unsigned char 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  blinks          1    8[COMRAM] unsigned char 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      _Bool 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0
  2342 ;;      Params:         0       0
  2343 ;;      Locals:         1       0
  2344 ;;      Temps:          0       0
  2345 ;;      Totals:         1       0
  2346 ;;Total ram usage:        1 bytes
  2347 ;; Hardware stack levels used: 1
  2348 ;; Hardware stack levels required when called: 2
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_controller_work
  2353 ;;		_init_i400mon
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text4
  2358  0008DE                     __ptext4:
  2359                           	callstack 0
  2360  0008DE                     _set_led_blink:
  2361                           	callstack 27
  2362                           
  2363                           ;incstack = 0
  2364                           ;set_led_blink@blinks stored from wreg
  2365  0008DE  6E32               	movwf	set_led_blink@blinks^0,c
  2366                           
  2367                           ;../ihc_vector.c: 163: _Bool set_led_blink(uint8_t blinks);../ihc_vector.c: 164: {;../ih
      +                          c_vector.c: 165:  if (V.blink_lock) {
  2368  0008E0  B00F               	btfsc	(_V+14)^0,0,c	;volatile
  2369  0008E2  0012               	return	
  2370                           
  2371                           ;../ihc_vector.c: 169:  if (blinks > 10 && (blinks != 255)) {
  2372  0008E4  0E0A               	movlw	10
  2373  0008E6  6432               	cpfsgt	set_led_blink@blinks^0,c
  2374  0008E8  D005               	goto	l1665
  2375  0008EA  2832               	incf	set_led_blink@blinks^0,w,c
  2376  0008EC  B4D8               	btfsc	status,2,c
  2377  0008EE  D002               	goto	l1665
  2378                           
  2379                           ;../ihc_vector.c: 170:   blinks = 0;
  2380  0008F0  0E00               	movlw	0
  2381  0008F2  6E32               	movwf	set_led_blink@blinks^0,c
  2382  0008F4                     l1665:
  2383                           
  2384                           ;../ihc_vector.c: 173:  INTCONbits.GIEH = 0;
  2385  0008F4  9EF2               	bcf	242,7,c	;volatile
  2386                           
  2387                           ;../ihc_vector.c: 174:  V.blink_lock = 1;
  2388  0008F6  800F               	bsf	(_V+14)^0,0,c	;volatile
  2389                           
  2390                           ;../ihc_vector.c: 175:  V.num_blinks = blinks;
  2391  0008F8  C032  F00E         	movff	set_led_blink@blinks,_V+13	;volatile
  2392                           
  2393                           ;../ihc_vector.c: 176:  INTCONbits.GIEH = 1;
  2394  0008FC  8EF2               	bsf	242,7,c	;volatile
  2395  0008FE  0012               	return		;funcret
  2396  000900                     __end_of_set_led_blink:
  2397                           	callstack 0
  2398                           
  2399 ;; *************** function _modbus_rtu_send_msg *****************
  2400 ;; Defined at:
  2401 ;;		line 85 in file "../crc.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  cc_buffer       1   21[COMRAM] PTR void 
  2404 ;;		 -> cc_buffer(64), 
  2405 ;;  modbus_cc_mo    2   22[COMRAM] PTR const void 
  2406 ;;		 -> modbus_cc_mode(6), modbus_cc_error(6), modbus_cc_clear(6), modbus_cc_freset(6), 
  2407 ;;  req_length      2   24[COMRAM] unsigned short 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;		None
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  2   21[COMRAM] unsigned short 
  2412 ;; Registers used:
  2413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0
  2419 ;;      Params:         5       0
  2420 ;;      Locals:         0       0
  2421 ;;      Temps:          0       0
  2422 ;;      Totals:         5       0
  2423 ;;Total ram usage:        5 bytes
  2424 ;; Hardware stack levels used: 1
  2425 ;; Hardware stack levels required when called: 4
  2426 ;; This function calls:
  2427 ;;		_memcpy
  2428 ;;		_modbus_rtu_send_msg_crc
  2429 ;; This function is called by:
  2430 ;;		_controller_work
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           	psect	text5
  2435  000882                     __ptext5:
  2436                           	callstack 0
  2437  000882                     _modbus_rtu_send_msg:
  2438                           	callstack 25
  2439                           
  2440                           ;../crc.c: 85: uint16_t modbus_rtu_send_msg(void *cc_buffer, const void *modbus_cc_mode,
      +                           uint16_t req_length);../crc.c: 86: {;../crc.c: 87:  memcpy((void*) cc_buffer, (const vo
      +                          id *) modbus_cc_mode, req_length);
  2441                           
  2442                           ;incstack = 0
  2443  000882  C03F  F032         	movff	modbus_rtu_send_msg@cc_buffer,memcpy@d1
  2444  000886  C040  F033         	movff	modbus_rtu_send_msg@modbus_cc_mode,memcpy@s1
  2445  00088A  C041  F034         	movff	modbus_rtu_send_msg@modbus_cc_mode+1,memcpy@s1+1
  2446  00088E  C042  F035         	movff	modbus_rtu_send_msg@req_length,memcpy@n
  2447  000892  C043  F036         	movff	modbus_rtu_send_msg@req_length+1,memcpy@n+1
  2448  000896  EC77  F003         	call	_memcpy	;wreg free
  2449                           
  2450                           ;../crc.c: 91:  return modbus_rtu_send_msg_crc((volatile uint8_t *) cc_buffer, req_lengt
      +                          h);
  2451  00089A  C03F  F03A         	movff	modbus_rtu_send_msg@cc_buffer,modbus_rtu_send_msg_crc@req
  2452  00089E  C042  F03B         	movff	modbus_rtu_send_msg@req_length,modbus_rtu_send_msg_crc@req_length
  2453  0008A2  C043  F03C         	movff	modbus_rtu_send_msg@req_length+1,modbus_rtu_send_msg_crc@req_length+1
  2454  0008A6  ECC3  F003         	call	_modbus_rtu_send_msg_crc	;wreg free
  2455  0008AA  C03A  F03F         	movff	?_modbus_rtu_send_msg_crc,?_modbus_rtu_send_msg
  2456  0008AE  C03B  F040         	movff	?_modbus_rtu_send_msg_crc+1,?_modbus_rtu_send_msg+1
  2457  0008B2  0012               	return		;funcret
  2458  0008B4                     __end_of_modbus_rtu_send_msg:
  2459                           	callstack 0
  2460                           
  2461 ;; *************** function _modbus_rtu_send_msg_crc *****************
  2462 ;; Defined at:
  2463 ;;		line 71 in file "../crc.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  req             1   16[COMRAM] PTR volatile unsigned ch
  2466 ;;		 -> cc_buffer(64), 
  2467 ;;  req_length      2   17[COMRAM] unsigned short 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  crc             2   19[COMRAM] unsigned short 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  2   16[COMRAM] unsigned short 
  2472 ;; Registers used:
  2473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMRAM   BANK0
  2479 ;;      Params:         3       0
  2480 ;;      Locals:         2       0
  2481 ;;      Temps:          0       0
  2482 ;;      Totals:         5       0
  2483 ;;Total ram usage:        5 bytes
  2484 ;; Hardware stack levels used: 1
  2485 ;; Hardware stack levels required when called: 3
  2486 ;; This function calls:
  2487 ;;		_crc16
  2488 ;; This function is called by:
  2489 ;;		_modbus_rtu_send_msg
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text6
  2494  000786                     __ptext6:
  2495                           	callstack 0
  2496  000786                     _modbus_rtu_send_msg_crc:
  2497                           	callstack 25
  2498                           
  2499                           ;../crc.c: 71: static uint16_t modbus_rtu_send_msg_crc(volatile uint8_t *req, uint16_t r
      +                          eq_length);../crc.c: 72: {;../crc.c: 73:  uint16_t crc;;../crc.c: 75:  crc = crc16(req, 
      +                          req_length);
  2500                           
  2501                           ;incstack = 0
  2502  000786  C03A  F032         	movff	modbus_rtu_send_msg_crc@req,crc16@buffer
  2503  00078A  C03B  F033         	movff	modbus_rtu_send_msg_crc@req_length,crc16@buffer_length
  2504  00078E  C03C  F034         	movff	modbus_rtu_send_msg_crc@req_length+1,crc16@buffer_length+1
  2505  000792  EC4B  F003         	call	_crc16	;wreg free
  2506  000796  C032  F03D         	movff	?_crc16,modbus_rtu_send_msg_crc@crc
  2507  00079A  C033  F03E         	movff	?_crc16+1,modbus_rtu_send_msg_crc@crc+1
  2508                           
  2509                           ;../crc.c: 76:  req[req_length++] = crc >> (uint16_t) 8;
  2510  00079E  503A               	movf	modbus_rtu_send_msg_crc@req^0,w,c
  2511  0007A0  243B               	addwf	modbus_rtu_send_msg_crc@req_length^0,w,c
  2512  0007A2  6ED9               	movwf	fsr2l,c
  2513  0007A4  6ADA               	clrf	fsr2h,c
  2514  0007A6  C03E  FFDF         	movff	modbus_rtu_send_msg_crc@crc+1,indf2
  2515  0007AA  4A3B               	infsnz	modbus_rtu_send_msg_crc@req_length^0,f,c
  2516  0007AC  2A3C               	incf	(modbus_rtu_send_msg_crc@req_length+1)^0,f,c
  2517                           
  2518                           ;../crc.c: 77:  req[req_length++] = crc & 0x00FF;
  2519  0007AE  503A               	movf	modbus_rtu_send_msg_crc@req^0,w,c
  2520  0007B0  243B               	addwf	modbus_rtu_send_msg_crc@req_length^0,w,c
  2521  0007B2  6ED9               	movwf	fsr2l,c
  2522  0007B4  6ADA               	clrf	fsr2h,c
  2523  0007B6  C03D  FFDF         	movff	modbus_rtu_send_msg_crc@crc,indf2
  2524  0007BA  4A3B               	infsnz	modbus_rtu_send_msg_crc@req_length^0,f,c
  2525  0007BC  2A3C               	incf	(modbus_rtu_send_msg_crc@req_length+1)^0,f,c
  2526                           
  2527                           ;../crc.c: 79:  return req_length;
  2528  0007BE  C03B  F03A         	movff	modbus_rtu_send_msg_crc@req_length,?_modbus_rtu_send_msg_crc
  2529  0007C2  C03C  F03B         	movff	modbus_rtu_send_msg_crc@req_length+1,?_modbus_rtu_send_msg_crc+1
  2530  0007C6  0012               	return		;funcret
  2531  0007C8                     __end_of_modbus_rtu_send_msg_crc:
  2532                           	callstack 0
  2533                           
  2534 ;; *************** function _crc16 *****************
  2535 ;; Defined at:
  2536 ;;		line 94 in file "../crc.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  buffer          1    8[COMRAM] PTR volatile unsigned ch
  2539 ;;		 -> cc_buffer(64), 
  2540 ;;  buffer_lengt    2    9[COMRAM] unsigned short 
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;  crc_lo          1   15[COMRAM] unsigned char 
  2543 ;;  crc_hi          1   14[COMRAM] unsigned char 
  2544 ;;  i               1   13[COMRAM] unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  2    8[COMRAM] unsigned short 
  2547 ;; Registers used:
  2548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0
  2554 ;;      Params:         3       0
  2555 ;;      Locals:         3       0
  2556 ;;      Temps:          2       0
  2557 ;;      Totals:         8       0
  2558 ;;Total ram usage:        8 bytes
  2559 ;; Hardware stack levels used: 1
  2560 ;; Hardware stack levels required when called: 2
  2561 ;; This function calls:
  2562 ;;		Nothing
  2563 ;; This function is called by:
  2564 ;;		_controller_work
  2565 ;;		_modbus_rtu_send_msg_crc
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text7
  2570  000696                     __ptext7:
  2571                           	callstack 0
  2572  000696                     _crc16:
  2573                           	callstack 25
  2574                           
  2575                           ;../crc.c: 94: uint16_t crc16(volatile uint8_t *buffer, uint16_t buffer_length);../crc.c
      +                          : 95: {;../crc.c: 96:  uint8_t crc_hi = 0xFF;
  2576                           
  2577                           ;incstack = 0
  2578  000696  6838               	setf	crc16@crc_hi^0,c
  2579                           
  2580                           ;../crc.c: 97:  uint8_t crc_lo = 0xFF;
  2581  000698  6839               	setf	crc16@crc_lo^0,c
  2582                           
  2583                           ;../crc.c: 98:  uint8_t i;;../crc.c: 101:  while (buffer_length--) {
  2584  00069A  D01A               	goto	l1585
  2585  00069C                     l1577:
  2586                           
  2587                           ;../crc.c: 102:   i = crc_hi ^ *buffer++;
  2588  00069C  5032               	movf	crc16@buffer^0,w,c
  2589  00069E  6ED9               	movwf	fsr2l,c
  2590  0006A0  6ADA               	clrf	fsr2h,c
  2591  0006A2  50DF               	movf	indf2,w,c
  2592  0006A4  1838               	xorwf	crc16@crc_hi^0,w,c
  2593  0006A6  6E37               	movwf	crc16@i^0,c
  2594  0006A8  2A32               	incf	crc16@buffer^0,f,c
  2595                           
  2596                           ;../crc.c: 103:   crc_hi = crc_lo ^ table_crc_hi[i];
  2597  0006AA  0EAF               	movlw	low _table_crc_hi
  2598  0006AC  2437               	addwf	crc16@i^0,w,c
  2599  0006AE  6EF6               	movwf	tblptrl,c
  2600  0006B0  6AF7               	clrf	tblptrh,c
  2601  0006B2  0E1E               	movlw	high _table_crc_hi
  2602  0006B4  22F7               	addwfc	tblptrh,f,c
  2603  0006B6                     	if	0	;There are less than 3 active tblptr bytes
  2604  0006B6                     	endif
  2605  0006B6  0008               	tblrd		*
  2606  0006B8  50F5               	movf	tablat,w,c
  2607  0006BA  1839               	xorwf	crc16@crc_lo^0,w,c
  2608  0006BC  6E38               	movwf	crc16@crc_hi^0,c
  2609                           
  2610                           ;../crc.c: 104:   crc_lo = table_crc_lo[i];
  2611  0006BE  0EAF               	movlw	low _table_crc_lo
  2612  0006C0  2437               	addwf	crc16@i^0,w,c
  2613  0006C2  6EF6               	movwf	tblptrl,c
  2614  0006C4  6AF7               	clrf	tblptrh,c
  2615  0006C6  0E1D               	movlw	high _table_crc_lo
  2616  0006C8  22F7               	addwfc	tblptrh,f,c
  2617  0006CA                     	if	0	;There are less than 3 active tblptr bytes
  2618  0006CA                     	endif
  2619  0006CA  0008               	tblrd		*
  2620  0006CC  CFF5 F039          	movff	tablat,crc16@crc_lo
  2621  0006D0                     l1585:
  2622                           
  2623                           ;../crc.c: 101:  while (buffer_length--) {
  2624  0006D0  0633               	decf	crc16@buffer_length^0,f,c
  2625  0006D2  A0D8               	btfss	status,0,c
  2626  0006D4  0634               	decf	(crc16@buffer_length+1)^0,f,c
  2627  0006D6  2833               	incf	crc16@buffer_length^0,w,c
  2628  0006D8  E1E1               	bnz	l1577
  2629  0006DA  2834               	incf	(crc16@buffer_length+1)^0,w,c
  2630  0006DC  A4D8               	btfss	status,2,c
  2631  0006DE  D7DE               	goto	l1577
  2632                           
  2633                           ;../crc.c: 107:  return((uint16_t) crc_hi << (uint16_t) 8 | (uint16_t) crc_lo);
  2634  0006E0  5038               	movf	crc16@crc_hi^0,w,c
  2635  0006E2  6E35               	movwf	??_crc16^0,c
  2636  0006E4  5039               	movf	crc16@crc_lo^0,w,c
  2637  0006E6  6E32               	movwf	?_crc16^0,c
  2638  0006E8  C035  F033         	movff	??_crc16,?_crc16+1
  2639  0006EC  0012               	return		;funcret
  2640  0006EE                     __end_of_crc16:
  2641                           	callstack 0
  2642                           
  2643 ;; *************** function _memcpy *****************
  2644 ;; Defined at:
  2645 ;;		line 4 in file "/opt/microchip/xc8/v2.32/pic/sources/c99/common/memcpy.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  d1              1    8[COMRAM] PTR void 
  2648 ;;		 -> cc_buffer(64), 
  2649 ;;  s1              2    9[COMRAM] PTR const void 
  2650 ;;		 -> modbus_cc_mode(6), modbus_cc_error(6), modbus_cc_clear(6), modbus_cc_freset(6), 
  2651 ;;  n               2   11[COMRAM] unsigned int 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2654 ;;		 -> modbus_cc_mode(6), modbus_cc_error(6), modbus_cc_clear(6), modbus_cc_freset(6), 
  2655 ;;  d               1   16[COMRAM] PTR unsigned char 
  2656 ;;		 -> cc_buffer(64), 
  2657 ;;  tmp             1   15[COMRAM] unsigned char 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      PTR void 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0
  2667 ;;      Params:         5       0
  2668 ;;      Locals:         4       0
  2669 ;;      Temps:          0       0
  2670 ;;      Totals:         9       0
  2671 ;;Total ram usage:        9 bytes
  2672 ;; Hardware stack levels used: 1
  2673 ;; Hardware stack levels required when called: 2
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_modbus_rtu_send_msg
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text8
  2682  0006EE                     __ptext8:
  2683                           	callstack 0
  2684  0006EE                     _memcpy:
  2685                           	callstack 26
  2686                           
  2687                           ;incstack = 0
  2688  0006EE  C033  F037         	movff	memcpy@s1,memcpy@s
  2689  0006F2  C034  F038         	movff	memcpy@s1+1,memcpy@s+1
  2690  0006F6  C032  F03A         	movff	memcpy@d1,memcpy@d
  2691  0006FA  D019               	goto	l1615
  2692  0006FC                     l1607:
  2693  0006FC  C037  FFF6         	movff	memcpy@s,tblptrl
  2694  000700  C038  FFF7         	movff	memcpy@s+1,tblptrh
  2695  000704  6AF8               	clrf	tblptru,c
  2696  000706  0E00               	movlw	(high __ramtop+-1)
  2697  000708  64F7               	cpfsgt	tblptrh,c
  2698  00070A  D003               	bra	u627
  2699  00070C  0008               	tblrd		*
  2700  00070E  50F5               	movf	tablat,w,c
  2701  000710  D005               	bra	u620
  2702  000712                     u627:
  2703  000712  CFF6 FFD9          	movff	tblptrl,fsr2l
  2704  000716  CFF7 FFDA          	movff	tblptrh,fsr2h
  2705  00071A  50DF               	movf	indf2,w,c
  2706  00071C                     u620:
  2707  00071C  6E39               	movwf	memcpy@tmp^0,c
  2708  00071E  4A37               	infsnz	memcpy@s^0,f,c
  2709  000720  2A38               	incf	(memcpy@s+1)^0,f,c
  2710  000722  503A               	movf	memcpy@d^0,w,c
  2711  000724  6ED9               	movwf	fsr2l,c
  2712  000726  6ADA               	clrf	fsr2h,c
  2713  000728  C039  FFDF         	movff	memcpy@tmp,indf2
  2714  00072C  2A3A               	incf	memcpy@d^0,f,c
  2715  00072E                     l1615:
  2716  00072E  0635               	decf	memcpy@n^0,f,c
  2717  000730  A0D8               	btfss	status,0,c
  2718  000732  0636               	decf	(memcpy@n+1)^0,f,c
  2719  000734  2835               	incf	memcpy@n^0,w,c
  2720  000736  E1E2               	bnz	l1607
  2721  000738  2836               	incf	(memcpy@n+1)^0,w,c
  2722  00073A  B4D8               	btfsc	status,2,c
  2723  00073C  0012               	return	
  2724  00073E  D7DE               	goto	l1607
  2725  000740                     __end_of_memcpy:
  2726                           	callstack 0
  2727                           
  2728 ;; *************** function _get_500hz *****************
  2729 ;; Defined at:
  2730 ;;		line 114 in file "../ihc_vector.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  mode            1    wreg     unsigned char 
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  mode            1   12[COMRAM] unsigned char 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  4    8[COMRAM] unsigned long 
  2737 ;; Registers used:
  2738 ;;		wreg, status,2
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMRAM   BANK0
  2744 ;;      Params:         4       0
  2745 ;;      Locals:         1       0
  2746 ;;      Temps:          0       0
  2747 ;;      Totals:         5       0
  2748 ;;Total ram usage:        5 bytes
  2749 ;; Hardware stack levels used: 1
  2750 ;; Hardware stack levels required when called: 2
  2751 ;; This function calls:
  2752 ;;		Nothing
  2753 ;; This function is called by:
  2754 ;;		_controller_work
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text9
  2759  0007C8                     __ptext9:
  2760                           	callstack 0
  2761  0007C8                     _get_500hz:
  2762                           	callstack 27
  2763                           
  2764                           ;incstack = 0
  2765                           ;get_500hz@mode stored from wreg
  2766  0007C8  6E36               	movwf	get_500hz@mode^0,c
  2767                           
  2768                           ;../ihc_vector.c: 114: uint32_t get_500hz(uint8_t mode);../ihc_vector.c: 115: {;../ihc_v
      +                          ector.c: 116:  static uint32_t tmp = 0;;../ihc_vector.c: 118:  if (mode) {
  2769  0007CA  5036               	movf	get_500hz@mode^0,w,c
  2770  0007CC  B4D8               	btfsc	status,2,c
  2771  0007CE  D009               	goto	l291
  2772                           
  2773                           ;../ihc_vector.c: 119:   return tmp;
  2774  0007D0  C04D  F032         	movff	get_500hz@tmp,?_get_500hz
  2775  0007D4  C04E  F033         	movff	get_500hz@tmp+1,?_get_500hz+1
  2776  0007D8  C04F  F034         	movff	get_500hz@tmp+2,?_get_500hz+2
  2777  0007DC  C050  F035         	movff	get_500hz@tmp+3,?_get_500hz+3
  2778  0007E0  0012               	return	
  2779  0007E2                     l291:
  2780                           
  2781                           ;../ihc_vector.c: 122:  INTCONbits.GIEH = 0;
  2782  0007E2  9EF2               	bcf	242,7,c	;volatile
  2783                           
  2784                           ;../ihc_vector.c: 123:  tmp = V.clock_500hz;
  2785  0007E4  C001  F04D         	movff	_V,get_500hz@tmp	;volatile
  2786  0007E8  C002  F04E         	movff	_V+1,get_500hz@tmp+1	;volatile
  2787  0007EC  C003  F04F         	movff	_V+2,get_500hz@tmp+2	;volatile
  2788  0007F0  C004  F050         	movff	_V+3,get_500hz@tmp+3	;volatile
  2789                           
  2790                           ;../ihc_vector.c: 124:  INTCONbits.GIEH = 1;
  2791  0007F4  8EF2               	bsf	242,7,c	;volatile
  2792                           
  2793                           ;../ihc_vector.c: 125:  return tmp;
  2794  0007F6  C04D  F032         	movff	get_500hz@tmp,?_get_500hz
  2795  0007FA  C04E  F033         	movff	get_500hz@tmp+1,?_get_500hz+1
  2796  0007FE  C04F  F034         	movff	get_500hz@tmp+2,?_get_500hz+2
  2797  000802  C050  F035         	movff	get_500hz@tmp+3,?_get_500hz+3
  2798  000806  0012               	return		;funcret
  2799  000808                     __end_of_get_500hz:
  2800                           	callstack 0
  2801                           
  2802 ;; *************** function _get_2hz *****************
  2803 ;; Defined at:
  2804 ;;		line 86 in file "../ihc_vector.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  mode            1    wreg     unsigned char 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  mode            1    8[COMRAM] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  4   14[None  ] unsigned long 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0
  2818 ;;      Params:         0       0
  2819 ;;      Locals:         1       0
  2820 ;;      Temps:          0       0
  2821 ;;      Totals:         1       0
  2822 ;;Total ram usage:        1 bytes
  2823 ;; Hardware stack levels used: 1
  2824 ;; Hardware stack levels required when called: 2
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_controller_work
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text10
  2833  000900                     __ptext10:
  2834                           	callstack 0
  2835  000900                     _get_2hz:
  2836                           	callstack 27
  2837                           
  2838                           ;incstack = 0
  2839                           ;get_2hz@mode stored from wreg
  2840  000900  6E32               	movwf	get_2hz@mode^0,c
  2841                           
  2842                           ;../ihc_vector.c: 86: uint32_t get_2hz(uint8_t mode);../ihc_vector.c: 87: {;../ihc_vecto
      +                          r.c: 88:  static uint32_t tmp = 0;;../ihc_vector.c: 90:  if (mode) {
  2843  000902  5032               	movf	get_2hz@mode^0,w,c
  2844  000904  A4D8               	btfss	status,2,c
  2845  000906  0012               	return	
  2846                           
  2847                           ;../ihc_vector.c: 94:  INTCONbits.GIEH = 0;
  2848                           
  2849                           ;../ihc_vector.c: 92:  }
  2850  000908  9EF2               	bcf	242,7,c	;volatile
  2851                           
  2852                           ;../ihc_vector.c: 95:  tmp = V.clock_2hz;
  2853  00090A  C009  F055         	movff	_V+8,get_2hz@tmp	;volatile
  2854  00090E  C00A  F056         	movff	_V+9,get_2hz@tmp+1	;volatile
  2855  000912  C00B  F057         	movff	_V+10,get_2hz@tmp+2	;volatile
  2856  000916  C00C  F058         	movff	_V+11,get_2hz@tmp+3	;volatile
  2857                           
  2858                           ;../ihc_vector.c: 96:  INTCONbits.GIEH = 1;
  2859  00091A  8EF2               	bsf	242,7,c	;volatile
  2860                           
  2861                           ;../ihc_vector.c: 97:  return tmp;;	Return value of _get_2hz is never used
  2862  00091C  0012               	return		;funcret
  2863  00091E                     __end_of_get_2hz:
  2864                           	callstack 0
  2865                           
  2866 ;; *************** function _get_10hz *****************
  2867 ;; Defined at:
  2868 ;;		line 100 in file "../ihc_vector.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  mode            1    wreg     unsigned char 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  mode            1   12[COMRAM] unsigned char 
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  4    8[COMRAM] unsigned long 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0
  2882 ;;      Params:         4       0
  2883 ;;      Locals:         1       0
  2884 ;;      Temps:          0       0
  2885 ;;      Totals:         5       0
  2886 ;;Total ram usage:        5 bytes
  2887 ;; Hardware stack levels used: 1
  2888 ;; Hardware stack levels required when called: 2
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_controller_work
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text11
  2897  000808                     __ptext11:
  2898                           	callstack 0
  2899  000808                     _get_10hz:
  2900                           	callstack 27
  2901                           
  2902                           ;incstack = 0
  2903                           ;get_10hz@mode stored from wreg
  2904  000808  6E36               	movwf	get_10hz@mode^0,c
  2905                           
  2906                           ;../ihc_vector.c: 100: uint32_t get_10hz(uint8_t mode);../ihc_vector.c: 101: {;../ihc_ve
      +                          ctor.c: 102:  static uint32_t tmp = 0;;../ihc_vector.c: 104:  if (mode) {
  2907  00080A  5036               	movf	get_10hz@mode^0,w,c
  2908  00080C  B4D8               	btfsc	status,2,c
  2909  00080E  D009               	goto	l285
  2910                           
  2911                           ;../ihc_vector.c: 105:   return tmp;
  2912  000810  C051  F032         	movff	get_10hz@tmp,?_get_10hz
  2913  000814  C052  F033         	movff	get_10hz@tmp+1,?_get_10hz+1
  2914  000818  C053  F034         	movff	get_10hz@tmp+2,?_get_10hz+2
  2915  00081C  C054  F035         	movff	get_10hz@tmp+3,?_get_10hz+3
  2916  000820  0012               	return	
  2917  000822                     l285:
  2918                           
  2919                           ;../ihc_vector.c: 108:  INTCONbits.GIEH = 0;
  2920  000822  9EF2               	bcf	242,7,c	;volatile
  2921                           
  2922                           ;../ihc_vector.c: 109:  tmp = V.clock_10hz;
  2923  000824  C005  F051         	movff	_V+4,get_10hz@tmp	;volatile
  2924  000828  C006  F052         	movff	_V+5,get_10hz@tmp+1	;volatile
  2925  00082C  C007  F053         	movff	_V+6,get_10hz@tmp+2	;volatile
  2926  000830  C008  F054         	movff	_V+7,get_10hz@tmp+3	;volatile
  2927                           
  2928                           ;../ihc_vector.c: 110:  INTCONbits.GIEH = 1;
  2929  000834  8EF2               	bsf	242,7,c	;volatile
  2930                           
  2931                           ;../ihc_vector.c: 111:  return tmp;
  2932  000836  C051  F032         	movff	get_10hz@tmp,?_get_10hz
  2933  00083A  C052  F033         	movff	get_10hz@tmp+1,?_get_10hz+1
  2934  00083E  C053  F034         	movff	get_10hz@tmp+2,?_get_10hz+2
  2935  000842  C054  F035         	movff	get_10hz@tmp+3,?_get_10hz+3
  2936  000846  0012               	return		;funcret
  2937  000848                     __end_of_get_10hz:
  2938                           	callstack 0
  2939                           
  2940 ;; *************** function _clear_500hz *****************
  2941 ;; Defined at:
  2942 ;;		line 79 in file "../ihc_vector.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;		None
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;		None
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  1    wreg      void 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0
  2956 ;;      Params:         0       0
  2957 ;;      Locals:         0       0
  2958 ;;      Temps:          0       0
  2959 ;;      Totals:         0       0
  2960 ;;Total ram usage:        0 bytes
  2961 ;; Hardware stack levels used: 1
  2962 ;; Hardware stack levels required when called: 2
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		_controller_work
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text12
  2971  00091E                     __ptext12:
  2972                           	callstack 0
  2973  00091E                     _clear_500hz:
  2974                           	callstack 27
  2975                           
  2976                           ;../ihc_vector.c: 81:  INTCONbits.GIEH = 0;
  2977                           
  2978                           ;incstack = 0
  2979  00091E  9EF2               	bcf	242,7,c	;volatile
  2980                           
  2981                           ;../ihc_vector.c: 82:  V.clock_500hz = 0;
  2982  000920  0E00               	movlw	0
  2983  000922  6E01               	movwf	_V^0,c	;volatile
  2984  000924  0E00               	movlw	0
  2985  000926  6E02               	movwf	(_V+1)^0,c	;volatile
  2986  000928  0E00               	movlw	0
  2987  00092A  6E03               	movwf	(_V+2)^0,c	;volatile
  2988  00092C  0E00               	movlw	0
  2989  00092E  6E04               	movwf	(_V+3)^0,c	;volatile
  2990                           
  2991                           ;../ihc_vector.c: 83:  INTCONbits.GIEH = 1;
  2992  000930  8EF2               	bsf	242,7,c	;volatile
  2993  000932  0012               	return		;funcret
  2994  000934                     __end_of_clear_500hz:
  2995                           	callstack 0
  2996                           
  2997 ;; *************** function _clear_2hz *****************
  2998 ;; Defined at:
  2999 ;;		line 65 in file "../ihc_vector.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0
  3013 ;;      Params:         0       0
  3014 ;;      Locals:         0       0
  3015 ;;      Temps:          0       0
  3016 ;;      Totals:         0       0
  3017 ;;Total ram usage:        0 bytes
  3018 ;; Hardware stack levels used: 1
  3019 ;; Hardware stack levels required when called: 2
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_controller_work
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text13
  3028  000934                     __ptext13:
  3029                           	callstack 0
  3030  000934                     _clear_2hz:
  3031                           	callstack 27
  3032                           
  3033                           ;../ihc_vector.c: 67:  INTCONbits.GIEH = 0;
  3034                           
  3035                           ;incstack = 0
  3036  000934  9EF2               	bcf	242,7,c	;volatile
  3037                           
  3038                           ;../ihc_vector.c: 68:  V.clock_2hz = 0;
  3039  000936  0E00               	movlw	0
  3040  000938  6E09               	movwf	(_V+8)^0,c	;volatile
  3041  00093A  0E00               	movlw	0
  3042  00093C  6E0A               	movwf	(_V+9)^0,c	;volatile
  3043  00093E  0E00               	movlw	0
  3044  000940  6E0B               	movwf	(_V+10)^0,c	;volatile
  3045  000942  0E00               	movlw	0
  3046  000944  6E0C               	movwf	(_V+11)^0,c	;volatile
  3047                           
  3048                           ;../ihc_vector.c: 69:  INTCONbits.GIEH = 1;
  3049  000946  8EF2               	bsf	242,7,c	;volatile
  3050  000948  0012               	return		;funcret
  3051  00094A                     __end_of_clear_2hz:
  3052                           	callstack 0
  3053                           
  3054 ;; *************** function _clear_10hz *****************
  3055 ;; Defined at:
  3056 ;;		line 72 in file "../ihc_vector.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;		None
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      void 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0
  3070 ;;      Params:         0       0
  3071 ;;      Locals:         0       0
  3072 ;;      Temps:          0       0
  3073 ;;      Totals:         0       0
  3074 ;;Total ram usage:        0 bytes
  3075 ;; Hardware stack levels used: 1
  3076 ;; Hardware stack levels required when called: 2
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_controller_work
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text14
  3085  00094A                     __ptext14:
  3086                           	callstack 0
  3087  00094A                     _clear_10hz:
  3088                           	callstack 27
  3089                           
  3090                           ;../ihc_vector.c: 74:  INTCONbits.GIEH = 0;
  3091                           
  3092                           ;incstack = 0
  3093  00094A  9EF2               	bcf	242,7,c	;volatile
  3094                           
  3095                           ;../ihc_vector.c: 75:  V.clock_10hz = 0;
  3096  00094C  0E00               	movlw	0
  3097  00094E  6E05               	movwf	(_V+4)^0,c	;volatile
  3098  000950  0E00               	movlw	0
  3099  000952  6E06               	movwf	(_V+5)^0,c	;volatile
  3100  000954  0E00               	movlw	0
  3101  000956  6E07               	movwf	(_V+6)^0,c	;volatile
  3102  000958  0E00               	movlw	0
  3103  00095A  6E08               	movwf	(_V+7)^0,c	;volatile
  3104                           
  3105                           ;../ihc_vector.c: 76:  INTCONbits.GIEH = 1;
  3106  00095C  8EF2               	bsf	242,7,c	;volatile
  3107  00095E  0012               	return		;funcret
  3108  000960                     __end_of_clear_10hz:
  3109                           	callstack 0
  3110                           
  3111 ;; *************** function _SetDCPWM1 *****************
  3112 ;; Defined at:
  3113 ;;		line 101 in file "../ibsmon.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  dutycycle       2    8[COMRAM] unsigned short 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  DCycle          2   12[COMRAM] struct PWMDC
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0
  3127 ;;      Params:         2       0
  3128 ;;      Locals:         2       0
  3129 ;;      Temps:          2       0
  3130 ;;      Totals:         6       0
  3131 ;;Total ram usage:        6 bytes
  3132 ;; Hardware stack levels used: 1
  3133 ;; Hardware stack levels required when called: 2
  3134 ;; This function calls:
  3135 ;;		Nothing
  3136 ;; This function is called by:
  3137 ;;		_controller_work
  3138 ;;		_init_i400mon
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           	psect	text15
  3143  000848                     __ptext15:
  3144                           	callstack 0
  3145  000848                     _SetDCPWM1:
  3146                           	callstack 27
  3147                           
  3148                           ;../ibsmon.c: 101: void SetDCPWM1(uint16_t dutycycle);../ibsmon.c: 102: {;../ibsmon.c: 1
      +                          03:  union PWMDC DCycle;;../ibsmon.c: 106:  DCycle.lpwm = dutycycle << 6;
  3149                           
  3150                           ;incstack = 0
  3151  000848  C032  F034         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  3152  00084C  C033  F035         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  3153  000850  0E06               	movlw	6
  3154  000852                     u645:
  3155  000852  90D8               	bcf	status,0,c
  3156  000854  3634               	rlcf	??_SetDCPWM1^0,f,c
  3157  000856  3635               	rlcf	(??_SetDCPWM1+1)^0,f,c
  3158  000858  2EE8               	decfsz	wreg,f,c
  3159  00085A  D7FB               	goto	u645
  3160  00085C  C034  F036         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  3161  000860  C035  F037         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  3162                           
  3163                           ;../ibsmon.c: 109:  CCPR1L = DCycle.bpwm[1];
  3164  000864  C037  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  3165                           
  3166                           ;../ibsmon.c: 112:  CCP1CON = (CCP1CON & 0xCF) | ((DCycle.bpwm[0] >> 2) & 0x30);
  3167  000868  C036  F034         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  3168  00086C  90D8               	bcf	status,0,c
  3169  00086E  3234               	rrcf	??_SetDCPWM1^0,f,c
  3170  000870  90D8               	bcf	status,0,c
  3171  000872  3234               	rrcf	??_SetDCPWM1^0,f,c
  3172  000874  0E30               	movlw	48
  3173  000876  1634               	andwf	??_SetDCPWM1^0,f,c
  3174  000878  50BD               	movf	189,w,c	;volatile
  3175  00087A  0BCF               	andlw	207
  3176  00087C  1034               	iorwf	??_SetDCPWM1^0,w,c
  3177  00087E  6EBD               	movwf	189,c	;volatile
  3178  000880  0012               	return		;funcret
  3179  000882                     __end_of_SetDCPWM1:
  3180                           	callstack 0
  3181                           
  3182 ;; *************** function _tm_handler *****************
  3183 ;; Defined at:
  3184 ;;		line 5 in file "../ihc_vector.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;		None
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  tmp             2    0        unsigned short 
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0
  3198 ;;      Params:         0       0
  3199 ;;      Locals:         0       0
  3200 ;;      Temps:          3       0
  3201 ;;      Totals:         3       0
  3202 ;;Total ram usage:        3 bytes
  3203 ;; Hardware stack levels used: 1
  3204 ;; Hardware stack levels required when called: 1
  3205 ;; This function calls:
  3206 ;;		_led_blink
  3207 ;; This function is called by:
  3208 ;;		Interrupt level 2
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	intcode
  3213  000008                     __pintcode:
  3214                           	callstack 0
  3215  000008                     _tm_handler:
  3216                           	callstack 25
  3217                           
  3218                           ;incstack = 0
  3219  000008  8266               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3220  00000A  CFD9 F030          	movff	fsr2l,??_tm_handler+1
  3221  00000E  CFDA F031          	movff	fsr2h,??_tm_handler+2
  3222                           
  3223                           ;../ihc_vector.c: 7:  static uint8_t c_error = 0;;../ihc_vector.c: 8:  uint16_t tmp;;../
      +                          ihc_vector.c: 10:  if (PIR1bits.RCIF) {
  3224  000012  AA9E               	btfss	158,5,c	;volatile
  3225  000014  D021               	goto	i2l2087
  3226                           
  3227                           ;../ihc_vector.c: 11:   cc_stream_file = RCREG;
  3228  000016  CFAE F065          	movff	4014,_cc_stream_file	;volatile
  3229                           
  3230                           ;../ihc_vector.c: 15:   if (RCSTAbits.OERR || RCSTAbits.FERR) {
  3231  00001A  B2AB               	btfsc	171,1,c	;volatile
  3232  00001C  D002               	goto	i2u114_40
  3233  00001E  A4AB               	btfss	171,2,c	;volatile
  3234  000020  D00F               	goto	i2l2081
  3235  000022                     i2u114_40:
  3236                           
  3237                           ;../ihc_vector.c: 16:    cc_stream_file = 0x00;
  3238  000022  0E00               	movlw	0
  3239  000024  6E65               	movwf	_cc_stream_file^0,c	;volatile
  3240                           
  3241                           ;../ihc_vector.c: 17:    RCSTAbits.CREN = 0;
  3242  000026  98AB               	bcf	171,4,c	;volatile
  3243                           
  3244                           ;../ihc_vector.c: 18:    RCSTAbits.CREN = 1;
  3245  000028  88AB               	bsf	171,4,c	;volatile
  3246                           
  3247                           ;../ihc_vector.c: 19:    if (c_error++>3) {
  3248  00002A  2A61               	incf	tm_handler@c_error^0,f,c
  3249  00002C  0461               	decf	tm_handler@c_error^0,w,c
  3250  00002E  6E2F               	movwf	??_tm_handler^0,c
  3251  000030  0E03               	movlw	3
  3252  000032  642F               	cpfsgt	??_tm_handler^0,c
  3253  000034  D011               	goto	i2l2087
  3254                           
  3255                           ;../ihc_vector.c: 20:     c_error = 0;
  3256  000036  0E00               	movlw	0
  3257  000038  6E61               	movwf	tm_handler@c_error^0,c
  3258                           
  3259                           ;../ihc_vector.c: 21:     V.error++;
  3260  00003A  4A13               	infsnz	(_V+18)^0,f,c	;volatile
  3261  00003C  2A14               	incf	(_V+19)^0,f,c	;volatile
  3262  00003E  D00C               	goto	i2l2087
  3263  000040                     i2l2081:
  3264                           
  3265                           ;../ihc_vector.c: 27:    cc_buffer[V.recv_count] = cc_stream_file;
  3266  000040  5011               	movf	(_V+16)^0,w,c	;volatile
  3267  000042  0F80               	addlw	low _cc_buffer
  3268  000044  6ED9               	movwf	fsr2l,c
  3269  000046  6ADA               	clrf	fsr2h,c
  3270  000048  C065  FFDF         	movff	_cc_stream_file,indf2	;volatile
  3271                           
  3272                           ;../ihc_vector.c: 28:    if (++V.recv_count >= 64) {
  3273  00004C  2A11               	incf	(_V+16)^0,f,c	;volatile
  3274  00004E  0E3F               	movlw	63
  3275  000050  6411               	cpfsgt	(_V+16)^0,c	;volatile
  3276  000052  D002               	goto	i2l2087
  3277                           
  3278                           ;../ihc_vector.c: 29:     V.recv_count = 0;
  3279  000054  0E00               	movlw	0
  3280  000056  6E11               	movwf	(_V+16)^0,c	;volatile
  3281  000058                     i2l2087:
  3282                           
  3283                           ;../ihc_vector.c: 34:  if (PIR1bits.TMR1IF) {
  3284  000058  A09E               	btfss	158,0,c	;volatile
  3285  00005A  D011               	goto	i2l2101
  3286                           
  3287                           ;../ihc_vector.c: 35:   PIR1bits.TMR1IF = 0;
  3288  00005C  909E               	bcf	158,0,c	;volatile
  3289                           
  3290                           ;../ihc_vector.c: 37:   TMR1H = (uint8_t) tmp;
  3291  00005E  0EF6               	movlw	246
  3292  000060  6ECF               	movwf	207,c	;volatile
  3293                           
  3294                           ;../ihc_vector.c: 39:   TMR1L = (uint8_t) tmp;
  3295  000062  0E60               	movlw	96
  3296  000064  6ECE               	movwf	206,c	;volatile
  3297                           
  3298                           ;../ihc_vector.c: 40:   V.clock_500hz++;
  3299  000066  0E01               	movlw	1
  3300  000068  2601               	addwf	_V^0,f,c	;volatile
  3301  00006A  0E00               	movlw	0
  3302  00006C  2202               	addwfc	(_V+1)^0,f,c	;volatile
  3303  00006E  2203               	addwfc	(_V+2)^0,f,c	;volatile
  3304  000070  2204               	addwfc	(_V+3)^0,f,c	;volatile
  3305                           
  3306                           ;../ihc_vector.c: 41:   V.clock_10hz++;
  3307  000072  0E01               	movlw	1
  3308  000074  2605               	addwf	(_V+4)^0,f,c	;volatile
  3309  000076  0E00               	movlw	0
  3310  000078  2206               	addwfc	(_V+5)^0,f,c	;volatile
  3311  00007A  2207               	addwfc	(_V+6)^0,f,c	;volatile
  3312  00007C  2208               	addwfc	(_V+7)^0,f,c	;volatile
  3313  00007E                     i2l2101:
  3314                           
  3315                           ;../ihc_vector.c: 44:  if (INTCONbits.TMR0IF) {
  3316  00007E  A4F2               	btfss	242,2,c	;volatile
  3317  000080  D00E               	goto	i2l2117
  3318                           
  3319                           ;../ihc_vector.c: 45:   INTCONbits.TMR0IF = 0;
  3320  000082  94F2               	bcf	242,2,c	;volatile
  3321                           
  3322                           ;../ihc_vector.c: 47:   TMR0H = (uint8_t) tmp;
  3323  000084  0E67               	movlw	103
  3324  000086  6ED7               	movwf	215,c	;volatile
  3325                           
  3326                           ;../ihc_vector.c: 49:   TMR0L = (uint8_t) tmp;
  3327  000088  0EE8               	movlw	232
  3328  00008A  6ED6               	movwf	214,c	;volatile
  3329                           
  3330                           ;../ihc_vector.c: 50:   V.clock_2hz++;
  3331  00008C  0E01               	movlw	1
  3332  00008E  2609               	addwf	(_V+8)^0,f,c	;volatile
  3333  000090  0E00               	movlw	0
  3334  000092  220A               	addwfc	(_V+9)^0,f,c	;volatile
  3335  000094  220B               	addwfc	(_V+10)^0,f,c	;volatile
  3336  000096  220C               	addwfc	(_V+11)^0,f,c	;volatile
  3337                           
  3338                           ;../ihc_vector.c: 51:   V.clock_blinks++;
  3339  000098  2A0D               	incf	(_V+12)^0,f,c	;volatile
  3340                           
  3341                           ;../ihc_vector.c: 52:   led_blink();
  3342  00009A  EC10  F003         	call	_led_blink	;wreg free
  3343  00009E                     i2l2117:
  3344                           
  3345                           ;../ihc_vector.c: 55:  if (PIR1bits.TMR2IF) {
  3346  00009E  B29E               	btfsc	158,1,c	;volatile
  3347                           
  3348                           ;../ihc_vector.c: 56:   PIR1bits.TMR2IF = 0;
  3349  0000A0  929E               	bcf	158,1,c	;volatile
  3350                           
  3351                           ;../ihc_vector.c: 59:  if (PIR1bits.CCP1IF) {
  3352                           
  3353                           ;../ihc_vector.c: 57:  }
  3354  0000A2  B49E               	btfsc	158,2,c	;volatile
  3355                           
  3356                           ;../ihc_vector.c: 60:   PIR1bits.CCP1IF = 0;
  3357  0000A4  949E               	bcf	158,2,c	;volatile
  3358  0000A6  C031  FFDA         	movff	??_tm_handler+2,fsr2h
  3359  0000AA  C030  FFD9         	movff	??_tm_handler+1,fsr2l
  3360  0000AE  9266               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3361  0000B0  0011               	retfie		f
  3362  0000B2                     __end_of_tm_handler:
  3363                           	callstack 0
  3364                           
  3365 ;; *************** function _led_blink *****************
  3366 ;; Defined at:
  3367 ;;		line 132 in file "../ihc_vector.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  1    wreg      void 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0
  3381 ;;      Params:         0       0
  3382 ;;      Locals:         0       0
  3383 ;;      Temps:          5       0
  3384 ;;      Totals:         5       0
  3385 ;;Total ram usage:        5 bytes
  3386 ;; Hardware stack levels used: 1
  3387 ;; This function calls:
  3388 ;;		Nothing
  3389 ;; This function is called by:
  3390 ;;		_tm_handler
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text17
  3395  000620                     __ptext17:
  3396                           	callstack 0
  3397  000620                     _led_blink:
  3398                           	callstack 25
  3399                           
  3400                           ;../ihc_vector.c: 135:  if (V.num_blinks == 255) {
  3401                           
  3402                           ;incstack = 0
  3403  000620  280E               	incf	(_V+13)^0,w,c	;volatile
  3404  000622  A4D8               	btfss	status,2,c
  3405  000624  D005               	goto	i2l2037
  3406                           
  3407                           ;../ihc_vector.c: 136:   LATBbits.LATB0 = 1;
  3408  000626  808A               	bsf	138,0,c	;volatile
  3409  000628                     i2l2031:
  3410                           
  3411                           ;../ihc_vector.c: 137:   V.clock_blinks = 0;
  3412  000628  0E00               	movlw	0
  3413  00062A  6E0D               	movwf	(_V+12)^0,c	;volatile
  3414  00062C                     i2l2033:
  3415                           
  3416                           ;../ihc_vector.c: 138:   V.blink_lock = 0;
  3417  00062C  900F               	bcf	(_V+14)^0,0,c	;volatile
  3418  00062E  0012               	return	
  3419  000630                     i2l2037:
  3420                           
  3421                           ;../ihc_vector.c: 141:  if (!V.num_blinks || V.num_blinks > 10) {
  3422  000630  500E               	movf	(_V+13)^0,w,c	;volatile
  3423  000632  B4D8               	btfsc	status,2,c
  3424  000634  D003               	goto	i2u108_40
  3425  000636  0E0A               	movlw	10
  3426  000638  640E               	cpfsgt	(_V+13)^0,c	;volatile
  3427  00063A  D002               	goto	i2l2047
  3428  00063C                     i2u108_40:
  3429                           
  3430                           ;../ihc_vector.c: 142:   LATBbits.LATB0 = 0;
  3431  00063C  908A               	bcf	138,0,c	;volatile
  3432  00063E  D7F4               	goto	i2l2031
  3433  000640                     i2l2047:
  3434                           
  3435                           ;../ihc_vector.c: 149:  if (V.clock_blinks > 8) {
  3436  000640  0E08               	movlw	8
  3437  000642  640D               	cpfsgt	(_V+12)^0,c	;volatile
  3438  000644  0012               	return	
  3439                           
  3440                           ;../ihc_vector.c: 150:   if ((8 + (V.num_blinks << 1)) <= V.clock_blinks) {
  3441  000646  500E               	movf	(_V+13)^0,w,c	;volatile
  3442  000648  6E2A               	movwf	??_led_blink^0,c
  3443  00064A  6A2B               	clrf	(??_led_blink+1)^0,c
  3444  00064C  90D8               	bcf	status,0,c
  3445  00064E  362A               	rlcf	??_led_blink^0,f,c
  3446  000650  362B               	rlcf	(??_led_blink+1)^0,f,c
  3447  000652  0E08               	movlw	8
  3448  000654  262A               	addwf	??_led_blink^0,f,c
  3449  000656  0E00               	movlw	0
  3450  000658  222B               	addwfc	(??_led_blink+1)^0,f,c
  3451  00065A  500D               	movf	(_V+12)^0,w,c	;volatile
  3452  00065C  6E2C               	movwf	(??_led_blink+2)^0,c
  3453  00065E  6A2D               	clrf	(??_led_blink+3)^0,c
  3454  000660  502A               	movf	??_led_blink^0,w,c
  3455  000662  5C2C               	subwf	(??_led_blink+2)^0,w,c
  3456  000664  502D               	movf	(??_led_blink+3)^0,w,c
  3457  000666  0A80               	xorlw	128
  3458  000668  6E2E               	movwf	(??_led_blink+4)^0,c
  3459  00066A  502B               	movf	(??_led_blink+1)^0,w,c
  3460  00066C  0A80               	xorlw	128
  3461  00066E  582E               	subwfb	(??_led_blink+4)^0,w,c
  3462  000670  A0D8               	btfss	status,0,c
  3463  000672  D004               	goto	i2l2057
  3464                           
  3465                           ;../ihc_vector.c: 151:    V.clock_blinks = 0;
  3466  000674  0E00               	movlw	0
  3467  000676  6E0D               	movwf	(_V+12)^0,c	;volatile
  3468                           
  3469                           ;../ihc_vector.c: 152:    LATBbits.LATB0 = 0;
  3470  000678  908A               	bcf	138,0,c	;volatile
  3471  00067A  D7D8               	goto	i2l2033
  3472  00067C                     i2l2057:
  3473                           
  3474                           ;../ihc_vector.c: 155:    LATBbits.LATB0 = ~LATBbits.LATB0;
  3475  00067C  A08A               	btfss	138,0,c	;volatile
  3476  00067E  D002               	goto	i2u111_40
  3477  000680  0E01               	movlw	1
  3478  000682  D001               	goto	i2u111_46
  3479  000684                     i2u111_40:
  3480  000684  0E00               	movlw	0
  3481  000686                     i2u111_46:
  3482  000686  0AFF               	xorlw	255
  3483  000688  6E2A               	movwf	??_led_blink^0,c
  3484  00068A  508A               	movf	138,w,c	;volatile
  3485  00068C  182A               	xorwf	??_led_blink^0,w,c
  3486  00068E  0BFE               	andlw	-2
  3487  000690  182A               	xorwf	??_led_blink^0,w,c
  3488  000692  6E8A               	movwf	138,c	;volatile
  3489  000694  0012               	return		;funcret
  3490  000696                     __end_of_led_blink:
  3491                           	callstack 0
  3492                           
  3493                           	psect	rparam
  3494  0000                     
  3495                           	psect	temp
  3496  000066                     btemp:
  3497                           	callstack 0
  3498  000066                     	ds	1
  3499  0000                     int$flags	set	btemp
  3500  0000                     wtemp8	set	btemp+1
  3501  0000                     ttemp5	set	btemp+1
  3502  0000                     ttemp6	set	btemp+4
  3503  0000                     ttemp7	set	btemp+8
  3504                           
  3505                           	psect	idloc
  3506                           
  3507                           ;Config register IDLOC0 @ 0x200000
  3508                           ;	unspecified, using default values
  3509  200000                     	org	2097152
  3510  200000  FF                 	db	255
  3511                           
  3512                           ;Config register IDLOC1 @ 0x200001
  3513                           ;	unspecified, using default values
  3514  200001                     	org	2097153
  3515  200001  FF                 	db	255
  3516                           
  3517                           ;Config register IDLOC2 @ 0x200002
  3518                           ;	unspecified, using default values
  3519  200002                     	org	2097154
  3520  200002  FF                 	db	255
  3521                           
  3522                           ;Config register IDLOC3 @ 0x200003
  3523                           ;	unspecified, using default values
  3524  200003                     	org	2097155
  3525  200003  FF                 	db	255
  3526                           
  3527                           ;Config register IDLOC4 @ 0x200004
  3528                           ;	unspecified, using default values
  3529  200004                     	org	2097156
  3530  200004  FF                 	db	255
  3531                           
  3532                           ;Config register IDLOC5 @ 0x200005
  3533                           ;	unspecified, using default values
  3534  200005                     	org	2097157
  3535  200005  FF                 	db	255
  3536                           
  3537                           ;Config register IDLOC6 @ 0x200006
  3538                           ;	unspecified, using default values
  3539  200006                     	org	2097158
  3540  200006  FF                 	db	255
  3541                           
  3542                           ;Config register IDLOC7 @ 0x200007
  3543                           ;	unspecified, using default values
  3544  200007                     	org	2097159
  3545  200007  FF                 	db	255
  3546                           
  3547                           	psect	config
  3548                           
  3549                           ; Padding undefined space
  3550  300000                     	org	3145728
  3551  300000  FF                 	db	255
  3552                           
  3553                           ;Config register CONFIG1H @ 0x300001
  3554                           ;	Oscillator Selection bits
  3555                           ;	OSC = HSPLL, HS oscillator, PLL enabled (clock frequency = 4 x FOSC1)
  3556                           ;	Fail-Safe Clock Monitor Enable bit
  3557                           ;	FSCM = ON, Fail-Safe Clock Monitor enabled
  3558                           ;	Internal External Switchover bit
  3559                           ;	IESO = ON, Internal External Switchover mode enabled
  3560  300001                     	org	3145729
  3561  300001  C6                 	db	198
  3562                           
  3563                           ;Config register CONFIG2L @ 0x300002
  3564                           ;	Power-up Timer Enable bit
  3565                           ;	PWRT = OFF, PWRT disabled
  3566                           ;	Brown-out Reset Enable bit
  3567                           ;	BOR = ON, Brown-out Reset enabled
  3568                           ;	Brown-out Reset Voltage bits
  3569                           ;	BORV = 0x3, unprogrammed default
  3570  300002                     	org	3145730
  3571  300002  0F                 	db	15
  3572                           
  3573                           ;Config register CONFIG2H @ 0x300003
  3574                           ;	Watchdog Timer Enable bit
  3575                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3576                           ;	Watchdog Timer Postscale Select bits
  3577                           ;	WDTPS = 32768, 1:32768
  3578  300003                     	org	3145731
  3579  300003  1E                 	db	30
  3580                           
  3581                           ; Padding undefined space
  3582  300004                     	org	3145732
  3583  300004  FF                 	db	255
  3584                           
  3585                           ;Config register CONFIG3H @ 0x300005
  3586                           ;	MCLR Pin Enable bit
  3587                           ;	MCLRE = ON, MCLR pin enabled, RA5 input pin disabled
  3588  300005                     	org	3145733
  3589  300005  80                 	db	128
  3590                           
  3591                           ;Config register CONFIG4L @ 0x300006
  3592                           ;	Stack Full/Underflow Reset Enable bit
  3593                           ;	STVR = ON, Stack full/underflow will cause Reset
  3594                           ;	Low-Voltage ICSP Enable bit
  3595                           ;	LVP = OFF, Low-Voltage ICSP disabled
  3596                           ;	Background Debugger Enable bit
  3597                           ;	DEBUG = 0x1, unprogrammed default
  3598  300006                     	org	3145734
  3599  300006  81                 	db	129
  3600                           
  3601                           ; Padding undefined space
  3602  300007                     	org	3145735
  3603  300007  FF                 	db	255
  3604                           
  3605                           ;Config register CONFIG5L @ 0x300008
  3606                           ;	Code Protection bit
  3607                           ;	CP0 = OFF, Block 0 (00200-000FFFh) not code-protected
  3608                           ;	Code Protection bit
  3609                           ;	CP1 = OFF, Block 1 (001000-001FFFh) not code-protected
  3610  300008                     	org	3145736
  3611  300008  03                 	db	3
  3612                           
  3613                           ;Config register CONFIG5H @ 0x300009
  3614                           ;	Boot Block Code Protection bit
  3615                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  3616                           ;	Data EEPROM Code Protection bit
  3617                           ;	CPD = OFF, Data EEPROM not code-protected
  3618  300009                     	org	3145737
  3619  300009  C0                 	db	192
  3620                           
  3621                           ;Config register CONFIG6L @ 0x30000A
  3622                           ;	Write Protection bit
  3623                           ;	WRT0 = OFF, Block 0 (00200-000FFFh) not write-protected
  3624                           ;	Write Protection bit
  3625                           ;	WRT1 = OFF, Block 1 (001000-001FFFh) not write-protected
  3626  30000A                     	org	3145738
  3627  30000A  03                 	db	3
  3628                           
  3629                           ;Config register CONFIG6H @ 0x30000B
  3630                           ;	Configuration Register Write Protection bit
  3631                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3632                           ;	Boot Block Write Protection bit
  3633                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  3634                           ;	Data EEPROM Write Protection bit
  3635                           ;	WRTD = OFF, Data EEPROM not write-protected
  3636  30000B                     	org	3145739
  3637  30000B  E0                 	db	224
  3638                           
  3639                           ;Config register CONFIG7L @ 0x30000C
  3640                           ;	Table Read Protection bit
  3641                           ;	EBTR0 = OFF, Block 0 (00200-000FFFh) not protected from table reads executed in other 
      +                          blocks
  3642                           ;	Table Read Protection bit
  3643                           ;	EBTR1 = OFF, Block 1 (001000-001FFFh) not protected from table reads executed in other
      +                           blocks
  3644  30000C                     	org	3145740
  3645  30000C  03                 	db	3
  3646                           
  3647                           ;Config register CONFIG7H @ 0x30000D
  3648                           ;	Boot Block Table Read Protection bit
  3649                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  3650  30000D                     	org	3145741
  3651  30000D  40                 	db	64
  3652                           tosu	equ	0xFFF
  3653                           tosh	equ	0xFFE
  3654                           tosl	equ	0xFFD
  3655                           stkptr	equ	0xFFC
  3656                           pclatu	equ	0xFFB
  3657                           pclath	equ	0xFFA
  3658                           pcl	equ	0xFF9
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           indf0	equ	0xFEF
  3666                           postinc0	equ	0xFEE
  3667                           postdec0	equ	0xFED
  3668                           preinc0	equ	0xFEC
  3669                           plusw0	equ	0xFEB
  3670                           fsr0h	equ	0xFEA
  3671                           fsr0l	equ	0xFE9
  3672                           wreg	equ	0xFE8
  3673                           indf1	equ	0xFE7
  3674                           postinc1	equ	0xFE6
  3675                           postdec1	equ	0xFE5
  3676                           preinc1	equ	0xFE4
  3677                           plusw1	equ	0xFE3
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           bsr	equ	0xFE0
  3681                           indf2	equ	0xFDF
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           preinc2	equ	0xFDC
  3685                           plusw2	equ	0xFDB
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8

Data Sizes:
    Strings     21
    Constant    571
    Data        41
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     35     101
    BANK0           128      0      64

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 6
		 -> modbus_cc_mode(CODE[6]), modbus_cc_error(CODE[6]), modbus_cc_clear(COMRAM[6]), modbus_cc_freset(COMRAM[6]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 6
		 -> modbus_cc_mode(CODE[6]), modbus_cc_error(CODE[6]), modbus_cc_clear(COMRAM[6]), modbus_cc_freset(COMRAM[6]), 

    crc16@buffer	PTR volatile unsigned char  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    sp__memcpy	PTR void  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    modbus_rtu_send_msg@modbus_cc_mode	PTR const void  size(2) Largest target is 6
		 -> modbus_cc_mode(CODE[6]), modbus_cc_error(CODE[6]), modbus_cc_clear(COMRAM[6]), modbus_cc_freset(COMRAM[6]), 

    modbus_rtu_send_msg@cc_buffer	PTR void  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    modbus_rtu_send_msg_crc@req	PTR volatile unsigned char  size(1) Largest target is 64
		 -> cc_buffer(BANK0[64]), 

    build_time	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    build_date	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_controller_work
    _init_i400mon->_SetDCPWM1
    _controller_work->_modbus_rtu_send_msg
    _modbus_rtu_send_msg->_modbus_rtu_send_msg_crc
    _modbus_rtu_send_msg_crc->_crc16

Critical Paths under _tm_handler in COMRAM

    _tm_handler->_led_blink

Critical Paths under _main in BANK0

    None.

Critical Paths under _tm_handler in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4745
                    _controller_work
                       _init_i400mon
 ---------------------------------------------------------------------------------
 (1) _init_i400mon                                         2     2      0     455
                          _SetDCPWM1
                 _init_stream_params
                      _set_led_blink
 ---------------------------------------------------------------------------------
 (2) _init_stream_params                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _controller_work                                      9     9      0    4290
                                             26 COMRAM     9     9      0
                          _SetDCPWM1
                         _clear_10hz
                          _clear_2hz
                        _clear_500hz
                              _crc16
                           _get_10hz
                            _get_2hz
                          _get_500hz
                _modbus_rtu_send_msg
                      _set_led_blink
 ---------------------------------------------------------------------------------
 (2) _set_led_blink                                        1     1      0      67
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _modbus_rtu_send_msg                                  5     0      5    2689
                                             21 COMRAM     5     0      5
                             _memcpy
            _modbus_rtu_send_msg_crc
 ---------------------------------------------------------------------------------
 (3) _modbus_rtu_send_msg_crc                              5     2      3    1296
                                             16 COMRAM     5     2      3
                              _crc16
 ---------------------------------------------------------------------------------
 (4) _crc16                                                8     5      3     942
                                              8 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               9     4      5     371
                                              8 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (2) _get_500hz                                            5     1      4      22
                                              8 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _get_2hz                                              1     1      0      22
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _get_10hz                                             5     1      4      22
                                              8 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _clear_500hz                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_2hz                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_10hz                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM1                                            6     4      2     296
                                              8 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _tm_handler                                           5     5      0      92
                                              5 COMRAM     3     3      0
                          _led_blink
 ---------------------------------------------------------------------------------
 (6) _led_blink                                            5     5      0       0
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controller_work
     _SetDCPWM1
     _clear_10hz
     _clear_2hz
     _clear_500hz
     _crc16
     _get_10hz
     _get_2hz
     _get_500hz
     _modbus_rtu_send_msg
       _memcpy
       _modbus_rtu_send_msg_crc
         _crc16
     _set_led_blink
   _init_i400mon
     _SetDCPWM1
     _init_stream_params
     _set_led_blink

 _tm_handler (ROOT)
   _led_blink

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0      40       4       50.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     23      65       1       80.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5       5        0.0%
DATA                 0      0      A5       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Oct 17 15:17:32 2021

                       _STKPTRbits 000FFC                _modbus_rtu_send_msg 0882  
                                _V 0001                      _build_version 1FD9  
                              l206 059A                                l176 03EA  
                              l291 07E2                                l285 0822  
                              _PR2 000FCB                                u620 071C  
                              u720 010E                                u627 0712  
                              u740 01F0                                u645 0852  
                              u750 0222                                u726 0110  
                              u735 0122                                u840 02F2  
                              u770 0246                                u950 0414  
                              u790 0264                                wreg 000FE8  
             ?_modbus_rtu_send_msg 003F                               l2061 0964  
                             l1607 06FC                               l1615 072E  
                             l1711 018E                               l1811 0376  
                             l1803 036E                               l1715 01B0  
                             l1733 020C                               l1717 01DA  
                             l1709 016C                               l1831 03EE  
                             l1911 052C                               l1743 024E  
                             l1577 069C                               l1585 06D0  
                             l1665 08F4                               l1763 02BE  
                             l1771 02DA                               l1747 026A  
                             l1915 0556                               l1677 00B8  
                             l1871 0488                               l1847 0416  
                             l1839 0406                               l1873 048C  
                             l1865 047C                               l1881 0494  
                             l1769 02D4                               l1697 0106  
                             l1689 00D6                               l1875 0490  
                             l1867 0480                               l1883 04CA  
                             l1795 0356                               l1779 0302  
                             l1869 0484                               l1893 04EC  
                             l1887 04D6                               l1899 04FC  
                             STR_1 1FEA                               STR_2 1FF6  
                             u1010 0514                               u1040 0594  
                             _RCON 000FD0                               _main 0960  
                             fsr2h 000FDA                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 0066                               start 00B2  
         __size_of_controller_work 04CA                       ___param_bank 000000  
          _modbus_rtu_send_msg_crc 0786                              ?_main 002A  
                            _T0CON 000FD5                              _T1CON 000FCD  
                            _RCREG 000FAE                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _SPBRG 000FAF                              _TRISA 000F92  
                            _TRISB 000F93                              _TXREG 000FAD  
                            _TXSTA 000FAC                    __end_of_get_2hz 091E  
            ??_modbus_rtu_send_msg 0044                              _crc16 0696  
                            tablat 000FF5               __size_of_clear_500hz 0016  
                            ttemp5 0067                              ttemp6 006A  
                            ttemp7 006E                              status 000FD8  
                            wtemp8 0067  modbus_rtu_send_msg@modbus_cc_mode 0040  
                    ?_init_i400mon 002A                    __initialization 0740  
                     __end_of_main 096A                             ??_main 004D  
                    __activetblptr 000002                             ?_crc16 0032  
                           _ADCON1 000FC1                             _CCPR1L 000FBE  
               crc16@buffer_length 0033                             i2l2101 007E  
                           i2l2031 0628                             i2l2033 062C  
                           i2l2037 0630                             i2l2117 009E  
                           i2l2047 0640                             i2l2057 067C  
                           i2l2081 0040                             i2l2087 0058  
                           _SPBRGH 000FB0                 __size_of_SetDCPWM1 003A  
                 __end_of_get_10hz 0848          ??_modbus_rtu_send_msg_crc 003D  
                   ??_init_i400mon 0038                             crc16@i 0037  
                __end_of_i400_mode 1FC0                             _memcpy 06EE  
                ??_controller_work 0044                             clear_0 0766  
                           clear_1 0772                          ??_get_2hz 0032  
                           isa$std 000001                             _rvalue 005D  
                     __pdataCOMRAM 0001                       __mediumconst 1DAE  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8              __end_of_set_led_blink 0900  
                       __accesstop 0080            __end_of__initialization 0778  
      __size_of_init_stream_params 0004                      ___rparam_used 000001  
                   __pcstackCOMRAM 002A                      __end_of_crc16 06EE  
               __size_of_get_500hz 0040                 __size_of_clear_2hz 0016  
         controller_work@c_crc_rec 004B                  __end_of_SetDCPWM1 0882  
  __end_of_modbus_rtu_send_msg_crc 07C8                      get_500hz@mode 0036  
                          ??_crc16 0035                 __size_of_led_blink 0076  
                       __pbssBANK0 0080                         _clear_10hz 094A  
                          _CCP1CON 000FBD                            ?_memcpy 0032  
                        ?_get_10hz 0032               __end_of_init_i400mon 0620  
              set_led_blink@blinks 0032                         _build_date 0017  
                       _build_time 0015                  __end_of_get_500hz 0808  
                __end_of_clear_2hz 094A         modbus_rtu_send_msg_crc@crc 003D  
       modbus_rtu_send_msg_crc@req 003A                            __Hparam 0000  
                          __Lparam 0000                  __end_of_led_blink 0696  
               __end_of_i400_clear 1FD9                            __pcinit 0740  
                  __size_of_memcpy 0052                            __ramtop 0100  
                          _get_2hz 0900                 __end_of_i400_error 1FC9  
      __end_of_modbus_rtu_send_msg 08B4                            __ptext0 0960  
                          __ptext1 0580                            __ptext2 096A  
                          __ptext3 00B6                            __ptext4 08DE  
                          __ptext5 0882                            __ptext6 0786  
                          __ptext7 0696                            __ptext8 06EE  
                          __ptext9 07C8                          _T2CONbits 000FCA  
                       ??_get_10hz 0036                      ??_clear_500hz 0032  
             end_of_initialization 0778                            memcpy@d 003A  
                          memcpy@n 0035                            memcpy@s 0037  
                       _req_length 005F                      __Lmediumconst 1DAE  
                       get_2hz@tmp 0055                        ?_clear_10hz 002A  
                  _controller_work 00B6                          _RCSTAbits 000FAB  
                       _tm_handler 0008                            postdec1 000FE5  
                          postinc0 000FEE               __end_of_table_crc_hi 1FAF  
             __end_of_table_crc_lo 1EAF                          _i400_mode 1FAF  
                        _TXSTAbits 000FAC                __end_of_clear_500hz 0934  
                tm_handler@c_error 0061              __end_of_build_version 1FDE  
                    __pidataCOMRAM 08B4                        _BAUDCTLbits 000FAA  
            __size_of_init_i400mon 00A0                     __end_of_memcpy 0740  
              __size_of_clear_10hz 0016                start_initialization 0740  
                        _SetDCPWM1 0848                    SetDCPWM1@DCycle 0036  
          __end_of_controller_work 0580         __end_of_init_stream_params 096E  
         ?_modbus_rtu_send_msg_crc 003A                       _init_i400mon 0580  
                      ?_tm_handler 002A                           ??_memcpy 0037  
                      crc16@crc_hi 0038                        crc16@crc_lo 0039  
                      crc16@buffer 0032             __size_of_set_led_blink 0022  
                      __pbssCOMRAM 004D                         ?_SetDCPWM1 0032  
                __size_of_get_10hz 0040                        _clear_500hz 091E  
                        _cc_buffer 0080                       get_500hz@tmp 004D  
                        _get_500hz 07C8                          _clear_2hz 0934  
            controller_work@cstate 0063                          __pintcode 0008  
                    __pmediumconst 1DAE                          _crc_error 0059  
          controller_work@temp_727 0048                           ?_get_2hz 002A  
                        _led_blink 0620                       get_10hz@mode 0036  
                   __size_of_crc16 0058                __size_of_tm_handler 00AA  
                 ?_controller_work 002A                       _table_crc_hi 1EAF  
                     _table_crc_lo 1DAF                      _set_led_blink 08DE  
modbus_rtu_send_msg_crc@req_length 003B                       ??_clear_10hz 0032  
                         _LATAbits 000F89                           _LATBbits 000F8A  
                       ?_get_500hz 0032                           _IPR1bits 000F9F  
                         _PIE1bits 000F9D                         ?_clear_2hz 002A  
                         i2u111_40 0684                           i2u111_46 0686  
                         i2u114_40 0022                           i2u108_40 063C  
                         _PIR1bits 000F9E                           _RCONbits 000FD0  
                         _i400_pwm 001B                         ?_led_blink 002A  
                 _modbus_cc_freset 001E                 __end_of_clear_10hz 0960  
                      ??_SetDCPWM1 0034       __size_of_modbus_rtu_send_msg 0032  
                      _INTCON2bits 000FF1                          copy_data0 0754  
                   ?_set_led_blink 002A                 SetDCPWM1@dutycycle 0032  
                         __Hrparam 0000                          memcpy@tmp 0039  
                         __Lrparam 0000      controller_work@modbus_command 0062  
                 __size_of_get_2hz 001E                           _get_10hz 0808  
             controller_work@c_crc 0049                __end_of_i400_freset 1FD1  
                         __ptext10 0900                           __ptext11 0808  
                         __ptext12 091E                           __ptext13 0934  
                         __ptext14 094A                           __ptext15 0848  
                         __ptext17 0620               controller_work@volts 001D  
                      get_10hz@tmp 0051                      __size_of_main 000A  
                      ??_get_500hz 0036                        ??_clear_2hz 0032  
               _init_stream_params 096A                       ??_tm_handler 002F  
                         isa$xinst 000000       modbus_rtu_send_msg@cc_buffer 003F  
                         int$flags 0066   __size_of_modbus_rtu_send_msg_crc 0042  
                  _modbus_cc_clear 0024                    _modbus_cc_error 1FDE  
              ?_init_stream_params 002A                        ??_led_blink 002A  
                   _cc_stream_file 0065                         _INTCONbits 000FF2  
                         memcpy@d1 0032                           memcpy@s1 0033  
                     ?_clear_500hz 002A                        get_2hz@mode 0032  
                  ??_set_led_blink 0032      modbus_rtu_send_msg@req_length 0042  
               __end_of_tm_handler 00B2                           intlevel2 0000  
             ??_init_stream_params 0032                controller_work@mcmd 0064  
              controller_work@temp 0046                     _modbus_cc_mode 1FE4  
                      _i400_freset 1FC9                         _i400_clear 1FD1  
                       _i400_error 1FC0                         _i400_power 0019  
          __end_of_modbus_cc_error 1FE4             __end_of_modbus_cc_mode 1FEA  
